using extension pgcrypto;
using extension auth;
using extension pg_trgm;
using extension postgis;



module default {

  global current_user_id: uuid {
    default := <uuid>{};
  };

  # Dynamically computed upon querying
  # Is an empty set if user is not authenticated
  global current_user := (
    select people::User filter .id = global current_user_id
  );

  abstract annotation example;

  # Trims a string, and transforms to an empty set if result is the null string
  function null_if_empty(s: str) -> optional str using(
    with trimmed := str_trim(s)
    select <str>{} if len(trimmed) = 0 else trimmed
  );


  # Objects that are identifiable by a unique code, and have a history of code changes
  abstract type CodeIdentifier {
    required code: str {
      constraint exclusive;
    };

    # Stores the history of code changes
    code_history: array<tuple<code: str, time: datetime>> {
      rewrite update using (
        if __old__.code != .code then
        __old__.code_history ?? [] ++ [(code := __old__.code, time := datetime_of_statement())]
        else .code_history
      );
    }
  }

  abstract type Vocabulary {
    annotation title := "An extensible list of terms";

    required label: str {
      constraint exclusive;
      constraint min_len_value(3);
    };
    required code: str {
      annotation title := "An expressive, unique, user-generated uppercase alphanumeric code";
      delegated constraint exclusive;
      constraint min_len_value(2);
      constraint max_len_value(12);
    };
    description: str;

    index on ((.code, .label));
  }

  function get_vocabulary(code: str, object_name: optional str = 'vocabulary') -> Vocabulary {
    using (
      assert_exists(
        assert_single((select Vocabulary filter .code = code)),
        message := "Failed to find " ++ object_name ++ " with code: " ++ code
      )
    );
  }

  type Picture {
    legend: str;
    required path: str {
      constraint exclusive;
    };
  }
}



