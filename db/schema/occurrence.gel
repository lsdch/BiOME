module occurrence {

  type Identification extending default::Auditable {
    required taxon: taxonomy::Taxon;

    identified_by: people::Person; # might be unknown

    required identified_on: tuple<date: datetime, precision: date::DatePrecision>{
      constraint date::required_unless_unknown(__subject__.date, __subject__.precision);
      rewrite insert, update using (
        (date := date::rewrite_date(.identified_on), precision :=.identified_on.precision)
      )
    };
  }

  # Occurrences are reports of the presence of a taxon at a specific location and time.
  # They can be based on physical samples (BioMaterial) or molecular sequences.
  # Internal sequences are not occurrences, but are linked to internal bio-materials,
  # which are occurrences.
  # External sequences are occurrences and MIGHT be linked to external bio-materials.
  # External sequences without bio-materials are occurrences by themselves.
  # Otherwise, their purpose is to add molecular data to an existing occurrence.
  abstract type Occurrence extending default::Auditable {

    required sampling: events::Sampling;
    required identification: Identification {
      constraint exclusive;
      on source delete delete target;
    };

    multi published_in: references::Article {
      original_source: bool;
    };

    comments: str;
  }

  scalar type OccurrenceCategory extending enum<Internal, External>;

  function biomat_code(taxon: taxonomy::Taxon, sampling: events::Sampling) -> str {
    using ( taxon.code ++ "[" ++ sampling.code ++ "]" )
  };

  abstract type BioMaterial extending default::CodeIdentifier, Occurrence {

    overloaded required code : str {
      constraint exclusive;
      annotation description := "Format like 'taxon_short_code[sampling_code]'";
      rewrite update using (
        if __specified__.code then .code # allow manual overwrite
        else biomat_code(.identification.taxon, .sampling)
      );

      # ðŸš§ unsupported feature for now
      # > error: default expression cannot refer to links of inserted object
      # > this is a tempory implementation restriction
      # ðŸ”— see also: https://github.com/geldata/gel/issues/7384
      # -----
      # default := gen_biomat_code(.identification, .sampling)
      # rewrite insert, update using (
      #   if re_test(r'^\d+$', .code)  then (
      #     .identification.taxon.code ++ "|" ++ events::event_code(.sampling.event)
      #   )
      #   else .code
      # );
    };

    required category := (
      assert_exists((
          if __source__ is InternalBioMat then OccurrenceCategory.Internal
          else if __source__ is ExternalBioMat then OccurrenceCategory.External
          else <OccurrenceCategory>{}
        ),
        message:= "Occurrence category for occurrence::BioMaterial subtype " ++ __source__.__type__.name ++ " is undefined"
      )
    );



    # Defines whether this occurrence is the first scientific description of
    # the taxon
    required is_type: bool {
      default := false;
    };
  };

  type InternalBioMat extending BioMaterial {
    # multi link content := .<biomat[is samples::Sample];
    multi link specimens := .<biomat[is samples::Specimen];
    multi link bundles := .<biomat[is samples::BundledSpecimens];
    multi link identified_taxa := (
      select distinct .specimens.identification.taxon ?? .identification.taxon
    );

    required is_homogenous := (
      select count(distinct .specimens.identification.taxon) <= 1
    );

    required is_congruent := (
      select assert_exists(
        .is_homogenous and (
          (not exists .specimens) or
          .identification.taxon in (
            assert_single(
              distinct .specimens.identification.taxon,
              message := "BioMaterial is marked as homogenous, yet specimens have identification mismatch. UUID: " ++ <str>.id
            ))
        )
      )
    );

    # Molecular identification,if available, and homogenous
    single seq_consensus := (
      select (
        if .is_homogenous then
          assert_single(
            distinct .specimens.identification.taxon,
            message := "BioMaterial is marked as homogenous, yet specimens have identification mismatch. UUID: " ++ <str>.id
          )
        else {}
      )
    );
  }

  scalar type QuantityType extending enum<Unknown, One, Several, Ten, Tens, Hundred>;

  type ExternalBioMat extending BioMaterial {
    original_source: references::DataSource;
    original_link: str; # link to original database

    in_collection: str; # name of a collection where the specimen can be found
    multi item_vouchers: str; # specimen identifier(s) within the collection

    required quantity: QuantityType;
    content_description: str;


    multi link sequences := .<source_sample[is seq::ExternalSequence];


    required is_homogenous := (
      select count(distinct .sequences.identification.taxon) <= 1
    );

    required is_congruent := (
      select assert_exists(
        .is_homogenous and (
          (not exists .sequences) or
          .identification.taxon in (
            assert_single(
              distinct .sequences.identification.taxon,
              message := "BioMaterial is marked as homogenous, yet specimens have identification mismatch. UUID: " ++ <str>.id
            ))
        )
      )
    );

    # Molecular identification,if available, and homogenous
    single seq_consensus := (
      select (
        if .is_homogenous then
          assert_single(
            distinct .sequences.identification.taxon,
            message := "BioMaterial is marked as homogenous, yet specimens have identification mismatch. UUID: " ++ <str>.id
          )
        else {}
      )
    );
  }

  function externalBiomatByCode(code: optional str) -> ExternalBioMat {
    using (
      select assert_exists(
        ExternalBioMat filter .code = code,
        message := "Failed to find external biomaterial with code: " ++ code
      )
    );
  };

  alias BioMaterialWithType := (
    select BioMaterial {
      required has_sequences := (
        exists ([is ExternalBioMat].sequences ?? [is InternalBioMat].specimens.sequences)
      ),
      required is_homogenous := (
        ([is ExternalBioMat].is_homogenous ?? true) and ([is ExternalBioMat].is_homogenous ?? true)
      ),
      required is_congruent := <bool>[is ExternalBioMat].is_congruent ?? <bool>[is InternalBioMat].is_congruent ?? true,
      seq_consensus := <taxonomy::Taxon>[is ExternalBioMat].seq_consensus ?? <taxonomy::Taxon>[is InternalBioMat].seq_consensus,
      external:= [is ExternalBioMat]{
        original_link,
        in_collection,
        item_vouchers,
        quantity,
        content_description,
      }
    }
  )
}
