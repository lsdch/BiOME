
module location {

  type Country {
    annotation description := "Countries as defined in the ISO 3166-1 norm.";
    required name: str {
      constraint exclusive;
    };

    # ISO 3166-1 alpha-3 code
    # https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
    required code: str {
      constraint exclusive;
      constraint min_len_value(3);
      constraint max_len_value(3);
    };

    required continent: str;
    required subcontinent: str;

    multi sites := .<country[is Site];
  }

  function find_country(code: optional str) -> optional Country {
    using (
      if exists code then (
        select assert_exists(
          location::Country
          filter .code = code,
          message := ("Invalid country code: " ++ code)
        )
      ) else <location::Country>{}
    )
  }

  type CountryBoundary {
    required country: Country {
      constraint exclusive;
    };
    required geometry: ext::postgis::geometry {
      annotation description := "PostGIS polygon/multipolygon defining the country boundary.";
    };
  }

  function WGS84_point(lat: float64, lon: float64) -> ext::postgis::geometry {
    using (
      # 4326 is WGS84 SRID
      # https://fr.wikipedia.org/wiki/WGS_84
      ext::postgis::point(lon, lat, 4326)
    )
  }

  function position_to_country(lat: float32, lon: float32) -> optional Country {
    using (
      assert_single((
          select location::CountryBoundary
          filter ext::postgis::contains(
            location::CountryBoundary.geometry,
            WGS84_point(<float64>lat, <float64>lon)
          )
        ).country,
        message := "More than one country found for the given position: " ++ <str>lat ++ ", " ++ <str>lon
      )
    )
  }

  function site_coords_to_country(coords: tuple<precision: CoordinatesPrecision, latitude: float32, longitude: float32>) -> optional Country {
    using (select position_to_country(coords.latitude, coords.longitude))
  }

  alias CountryList := (
    select Country { *, sites_count := count(.sites) }
  );


  # <100m: Coordinates of site position
  # <1Km: Nearest small locality
  # <10Km: Nearest locality
  # 10-100Km: Country/region
  # Unknown
  scalar type CoordinatesPrecision extending enum<"<100m", "<1km", "<10km", "10-100km", "Unknown">;


  type Site extending default::Auditable {
    name: str;
    index on (.name);

    required code : str {
      annotation title := "Site identifier";
      annotation description := "A short, unique, user-generated, alphanumeric identifier. Recommended size is 8.";
      constraint exclusive;
      constraint min_len_value(3);
      constraint max_len_value(10);
    };

    description: str;

    locality: str;
    index on (.locality);

    country: Country;
    required user_defined_locality: bool {
      default := false
    };

    required coordinates: tuple<precision: CoordinatesPrecision, latitude: float32, longitude: float32> {
      constraint expression on (
        (.latitude <= 90 and .latitude >= -90
        and .longitude <= 180 and .longitude >= -180)
      );
      rewrite insert, update using ((
        precision:= __subject__.coordinates.precision,
        latitude := <float32>round(<decimal>__subject__.coordinates.latitude, 5),
        longitude := <float32>round(<decimal>__subject__.coordinates.longitude, 5)
      ));
    };

    altitude: int32 {
      annotation title := "The site elevation in meters";
    };

    single last_visited := (
      assert_single((
        select .events.performed_on
        filter .date = max(__source__.events.performed_on.date)
        limit 1
      ))
    );

    multi link events := .<site[is events::Event];
    multi datasets := .<sites[is datasets::SiteDataset];

    # imported_in: datasets::AbstractDataset {
    #   on target delete allow;
    #   on source delete allow;
    # };
  }

  required global SITE_SEARCH_THRESHOLD: float32 {
    default := 0.7
  };

  function site_as_point(site: Site) -> ext::postgis::geometry {
    using (
      WGS84_point(<float64>site.coordinates.latitude, <float64>site.coordinates.longitude)
    )
  }

  function site_fuzzy_search_score(site: Site, query: str) -> float32 {
    using (
      max({
        ext::pg_trgm::word_similarity(query, site.name),
        ext::pg_trgm::word_similarity(query, site.code),
        ext::pg_trgm::word_similarity(query, site.locality)
      })
    )
  }

  function coords_distance(
    coords: tuple<
      precision: CoordinatesPrecision,
      latitude: float32,
      longitude: float32
    >,
    lat: float32,
    lon: float32
  ) -> float64 {
    using (
      ext::postgis::distance(
        ext::postgis::to_geography(
          WGS84_point(coords.latitude, coords.longitude)
        ),
        ext::postgis::to_geography(
          WGS84_point(lat, lon)
        )
      )
    )
  }

  # Distance between a site and coordinates in meters
  function site_distance (site: Site, lat: float32, lon: float32) -> float64 {
    using (coords_distance(site.coordinates, lat, lon))
  }

  function coords_from_json(data: json) -> tuple<precision: CoordinatesPrecision, latitude: float32, longitude: float32> {
    using (
      assert_exists((
        precision := <CoordinatesPrecision>data['precision'],
        latitude := <float32>data['latitude'],
        longitude := <float32>data['longitude']
      ))
    )
  }

  function insert_site(data: json) -> Site {
    using (
      with
        coords := coords_from_json(data['coordinates']),
        country_code := <str>json_get(data, 'country_code'),
      insert Site {
        name := <str>json_get(data, 'name'),
        code := <str>data['code'],
        description := <str>json_get(data, 'description'),
        coordinates := coords,
        locality := <str>json_get(data, 'locality'),
        country := (select(
          if exists country_code
          then find_country(country_code)
          else site_coords_to_country(coords)
        )),
        altitude := <int32>json_get(data, 'altitude'),
      }
    )
  }
}