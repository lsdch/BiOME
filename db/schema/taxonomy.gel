module taxonomy {

  function taxonByName(name: str) -> Taxon {
    using (
      select assert_exists(
        Taxon filter .name = name,
        message := "Failed to find taxon with name: " ++ name
      )
    );
  };

  function find_taxon(name_or_code: str) -> Taxon {
    using (
      select assert_single(assert_exists(
        Taxon filter (.name = name_or_code or .code = name_or_code),
        message := "Failed to find taxon with name or code: " ++ name_or_code
      ),
        message := "Multiple taxa matching name or code: " ++ name_or_code
      )
    )
  };

  scalar type Rank extending enum<Kingdom, Phylum, Class, Order, Family, Genus, Species, Subspecies>;
  # Ignore FORM, VARIETY, UNRANKED


  # Accepted: referenced in GBIF with status "ACCEPTED"
  # Unreferenced: not "ACCEPTED" in GBIF yet, but a scientific consensus exists for the taxon
  # Unclassified: taxon description is currently on-going
  scalar type TaxonStatus extending enum<Accepted, Unreferenced, Unclassified>;

  type Taxon extending default::Auditable {
    GBIF_ID: int32 {
      constraint exclusive;
    };

    required name: str {
      constraint exclusive;
      constraint min_len_value(4);
    };

    constraint expression on (not contains(.name, " "))
      except (.rank = Rank.Species or .rank = Rank.Subspecies) {
        errmessage := "Taxon names with rank higher than species may not include a whitespace."
      };
    constraint expression on (len(str_split(.name, " ")) >= 2)
      except (.rank != Rank.Species) {
        errmessage := "A species name must include a whitespace."
      };
    constraint expression on (len(str_split(.name, " ")) >= 3)
      except (.rank != Rank.Subspecies){
        errmessage := "A subspecies name must include at least 2 whitespaces."
      };

    required rank: Rank;

    required status: TaxonStatus;
    # constraint expression on (exists .GBIF_ID) except (<TaxonStatus>.status != TaxonStatus.Accepted);
    required code: str {
      constraint exclusive;
      rewrite insert, update using (
        if (__specified__.code and len(.code) > 0) then .code
        else str_replace(.name, " ", "_")
      )
    };
    required anchor: bool {
      annotation description := "Signals whether this taxon was manually imported";
      default := false;
    }
    authorship: str;

    kingdom: Taxon {
      rewrite insert, update using (
        if exists .parent then (
          if .parent.rank = Rank.Kingdom
          then .parent
          else .parent.kingdom
        ) else <Taxon>{}
      );
      on target delete allow;
    };
    phylum: Taxon {
      rewrite insert, update using (
        if exists .parent then (
          if .parent.rank = Rank.Phylum
          then .parent
          else .parent.phylum
        ) else <Taxon>{}
      );
      on target delete allow;
    };
    class: Taxon {
      rewrite insert, update using (
        if exists .parent then (
          if .parent.rank = Rank.Class
          then .parent
          else .parent.class
        ) else <Taxon>{}
      );
      on target delete allow;
    };
    order: Taxon {
      rewrite insert, update using (
        if exists .parent then (
          if .parent.rank = Rank.Order
          then .parent
          else .parent.order
        ) else <Taxon>{}
      );
      on target delete allow;
    };
    family: Taxon {
      rewrite insert, update using (
        if exists .parent then (
          if .parent.rank = Rank.Family
          then .parent
          else .parent.family
        ) else <Taxon>{}
      );
      on target delete allow;
    };
    genus: Taxon {
      rewrite insert, update using (
        if exists .parent then (
          if .parent.rank = Rank.Genus
          then .parent
          else .parent.genus
        ) else <Taxon>{}
      );
      on target delete allow;
    };
    species: Taxon {
      rewrite insert, update using (
        if exists .parent then (
          if .parent.rank = Rank.Species
          then .parent
          else .parent.species
        ) else <Taxon>{}
      );
      on target delete allow;
    };
    parent: Taxon {
      on target delete delete source;
    };
    constraint expression on (exists .parent) except (.rank = Rank.Kingdom);

    constraint exclusive on ((.name, .status));

    multi link children := .<parent[is Taxon];
    required children_count := (select count(.children));

    lineage := (
      select .kingdom
      union .phylum
      union .class
      union .order
      union .family
      union .genus
      union .species
    );

    comment: str;

    index on ((.name, .code, .rank, .status));
  }

  function is_in_clade(taxon: Taxon, ancestor: Taxon) -> bool {
    using (
      select (ancestor in taxon.lineage or taxon = ancestor)
    );
  };
}
