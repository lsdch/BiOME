module date {
  scalar type DatePrecision extending enum<Year, Month, Day, Unknown>;

  function rewrite_date(value: tuple<date:datetime, precision:DatePrecision>) -> optional datetime
  using (
      datetime_truncate(value.date, 'years') if value.precision = DatePrecision.Year else
      datetime_truncate(value.date, 'months') if value.precision = DatePrecision.Month else
      datetime_truncate(value.date, 'days') if value.precision = DatePrecision.Day else
      <datetime>to_datetime(0)
  );

  function from_json_with_precision(value: json) -> tuple<date: datetime, precision:DatePrecision>
  using (assert_exists(
    (
      date := (
        if (exists value['date']) and (<DatePrecision>value['precision'] != DatePrecision.Unknown)
        then to_datetime(
          <int64>value['date']['year'],
          <int64>json_get(value, 'date', 'month') ?? 1,
          <int64>json_get(value, 'date', 'day') ?? 1,
          0, 0, 0, 'UTC'
        ) else to_datetime(0)
      ),
      precision := <DatePrecision>value['precision']
    ),
    message := "Failed to parse date with precision from JSON: " ++ to_str(value)
  ));
}
