package taxonomy

import (
	"context"
	"darco/proto/models/people"
	_ "embed"
	"encoding/json"

	"github.com/edgedb/edgedb-go"
)

type TaxonInner struct {
	Name   string      `edgedb:"name" json:"name" example:"Asellus aquaticus" binding:"required,alpha"`
	Status TaxonStatus `edgedb:"status" json:"status" example:"Accepted" binding:"required"`
	Rank   TaxonRank   `edgedb:"rank" json:"rank" example:"Species" binding:"required"`
} // @name Taxon

type TaxonInput struct {
	TaxonInner `edgedb:"$inline"`
	Parent     string  `json:"parent" binding:"required,exist=taxonomy::Taxon.code"`                // Parent taxon code
	Code       *string `json:"code,omitempty" example:"ASEaquaticus" binding:"omitnil,alpha,min=4"` // Autogenerated if not provided
	Authorship *string `json:"authorship,omitempty" example:"(Linnaeus, 1758)" binding:"omitnil"`
	Comment    *string `json:"comment,omitempty" edgedb:"comment" binding:"omitnil"`
} // @name TaxonInput

type Taxon struct {
	ID         edgedb.UUID          `edgedb:"id" json:"id" format:"uuid" binding:"required"`
	GBIF_ID    edgedb.OptionalInt32 `edgedb:"GBIF_ID" json:"GBIF_ID" example:"2206247" binding:"numeric"`
	Code       string               `edgedb:"code" json:"code" example:"ASEaquaticus" binding:"required"`
	TaxonInner `edgedb:"$inline"`
	Authorship edgedb.OptionalStr `edgedb:"authorship" json:"authorship" example:"(Linnaeus, 1758)"`
	Anchor     bool               `edgedb:"anchor" json:"anchor"`
	Comment    edgedb.OptionalStr `json:"comment" edgedb:"comment"`
	Meta       people.Meta        `edgedb:"meta" json:"meta" binding:"required"`
} // @name TaxonDB

type TaxonWithRelatives struct {
	Taxon  `edgedb:"$inline"`
	Parent struct {
		edgedb.Optional
		Taxon `edgedb:"$inline"`
	} `edgedb:"parent" json:"parent"`
	Children []Taxon `edgedb:"children" json:"children,omitempty"`
} // @name TaxonWithRelatives

type ListFilters struct {
	Pattern  string              `json:"pattern,omitempty" query:"pattern"`
	Rank     TaxonRank           `json:"rank,omitempty" query:"rank"`
	Status   TaxonStatus         `json:"status,omitempty" query:"status"`
	IsAnchor edgedb.OptionalBool `json:"anchors_only,omitempty" query:"anchor"`
}

func ListTaxa(db edgedb.Executor, filters ListFilters) ([]Taxon, error) {
	var taxa = make([]Taxon, 0)
	query := `with module taxonomy,
				pattern := <str>$0,
				rank := <Rank>(<str>$1 if len(<str>$1) > 0 else <str>{}),
				status := <TaxonStatus>(<str>$2 if len(<str>$2) > 0 else <str>{}),
				is_anchor := <optional bool>$3
			select Taxon { *, meta: {**}}
			filter (.name ilike ("%" ++ pattern ++ "%") if len(pattern) > 0 else true)
			and (.rank = rank if exists rank else true)
			and (.status = status if exists status else true)
			and (.anchor = is_anchor if exists is_anchor else true);`
	err := db.Query(context.Background(), query, &taxa,
		filters.Pattern, filters.Rank, filters.Status, filters.IsAnchor)
	return taxa, err
}

func FindByID(db edgedb.Executor, id edgedb.UUID) (taxon TaxonWithRelatives, err error) {
	query := `
		select taxonomy::Taxon { *,
			parent : { * , meta: { ** }},
			children : { * , meta: { ** }}
		}
		filter .id = <uuid>$0;
	`
	err = db.QuerySingle(context.Background(), query, &taxon, id)
	return taxon, err
}

func FindByCode(db edgedb.Executor, code string) (taxon TaxonWithRelatives, err error) {
	query := `
		select taxonomy::Taxon { *,
			parent : { * , meta: { ** }},
			children : { * , meta: { ** }}
		}
		filter .code = <str>$0;
	`
	err = db.QuerySingle(context.Background(), query, &taxon, code)
	return taxon, err
}

func Delete(db edgedb.Executor, code string) (taxon Taxon, err error) {
	query := `select (
		delete taxonomy::Taxon filter .code = <str>$0
	) { *, meta: {**}};`
	err = db.QuerySingle(context.Background(), query, &taxon, code)
	return
}

//go:embed queries/create_taxon.edgeql
var createTaxonCmd string

func (taxon TaxonInput) Create(db edgedb.Executor) (created TaxonWithRelatives, err error) {
	args, _ := json.Marshal(taxon)
	err = db.QuerySingle(context.Background(), createTaxonCmd, &created, args)
	return created, err
}

type TaxonUpdate struct {
	GBIF_ID    *int32       `json:"GBIF_ID,omitempty" binding:"omitnil,numeric"`
	Name       *string      `json:"name,omitempty" binding:"omitnil,alpha"`
	Code       *string      `json:"code,omitempty" binding:"omitnil,alpha"`
	Status     *TaxonStatus `json:"status,omitempty" binding:"omitnil"`
	Authorship *string      `json:"authorship,omitempty" binding:"omitnil,alphanumunicode"`
	Rank       *TaxonRank   `json:"rank,omitempty" binding:"omitnil"`
	Parent     *string      `json:"parent,omitempty" binding:"omitnil"` // parent code
} // @name TaxonUpdate

//go:embed queries/update_taxon.edgeql
var updateTaxonCmd string

func (taxon TaxonUpdate) Update(db edgedb.Executor, code string) (uuid edgedb.UUID, err error) {
	args, _ := json.Marshal(taxon)
	err = db.QuerySingle(context.Background(), updateTaxonCmd, &uuid, code, args)
	return uuid, err
}
