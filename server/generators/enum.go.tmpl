// This file is auto-generated *DO NOT EDIT*

package {{ .Pkg }}


import (
	"reflect"

	"github.com/danielgtaylor/huma/v2"
  "github.com/brianvoe/gofakeit/v7"
)

{{- range .Enums }}

{{$enumSlice := printf "%s%s" .EnumType "Values"}}

var {{ $enumSlice }} = []{{ .EnumType }}{
{{- range .EnumValues }}
	{{ . }},
{{- end }}
}

{{- if .Ordered }}
var {{.EnumType}}Hierarchy = map[{{.EnumType}}]int{
{{- range $index, $value := .EnumValues }}
  "{{$value}}": {{$index}},
{{- end }}
}

func (u {{.EnumType}}) IsGreater(v {{.EnumType}}) bool {
  return {{.EnumType}}Hierarchy[u] > {{.EnumType}}Hierarchy[u]
}

func (u {{.EnumType}}) IsGreaterEqual(v {{.EnumType}}) bool {
  return {{.EnumType}}Hierarchy[u] >= {{.EnumType}}Hierarchy[u]
}
{{- end}}

// Register enum in OpenAPI specification
func (u {{ .EnumType }}) Schema(r huma.Registry) *huma.Schema {
  if r.Map()["{{.EnumType}}"] == nil {
    schemaRef := r.Schema(reflect.TypeOf(""), true, "{{.EnumType}}")
    schemaRef.Title = "{{.EnumType}}"
    for _, v := range {{$enumSlice}} {
      schemaRef.Enum = append(schemaRef.Enum, string(v))
    }
    r.Map()["{{.EnumType}}"] = schemaRef
  }

	return &huma.Schema{Ref: "#/components/schemas/{{.EnumType}}"}
}

func (m *{{.EnumType}}) Fake(f *gofakeit.Faker) (any, error) {
	return string({{$enumSlice}}[f.IntN(len({{$enumSlice}}) - 1)]), nil
}

// Gel Marshalling
func (m {{.EnumType}}) MarshalEdgeDBStr() ([]byte, error) {
	return []byte(m), nil
}

func (m *{{.EnumType}}) UnmarshalEdgeDBStr(data []byte) error {
	*m = {{.EnumType}}(string(data))
	return nil
}

{{- end }}