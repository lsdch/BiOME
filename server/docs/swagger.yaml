basePath: /api/v1
definitions:
  Country:
    properties:
      code:
        example: DE
        type: string
      id:
        example: <UUID>
        type: string
      name:
        example: Germany
        type: string
      nbLocalities:
        example: 9
        type: integer
    required:
    - code
    - name
    type: object
  EmailConfirmationError:
    enum:
    - AlreadyVerified
    - InvalidToken
    type: string
    x-enum-varnames:
    - AlreadyVerified
    - InvalidToken
  EmailInput:
    properties:
      email:
        format: email
        type: string
    required:
    - email
    type: object
  FieldErrors:
    additionalProperties:
      items:
        $ref: '#/definitions/InputValidationError'
      type: array
    type: object
  InputValidationError:
    description: A validation error to be fixed in the input
    properties:
      error:
        example: 'Key: ''Person.age'' Error:Field validation for ''age'' failed on
          the ''min'' tag'
        type: string
      field:
        example: age
        type: string
      message:
        example: Must be a positive number
        type: string
      param:
        example: "0"
        type: string
      tag:
        example: min
        type: string
      value: {}
    required:
    - field
    - message
    - value
    type: object
  Institution:
    properties:
      code:
        example: LEHNA
        maxLength: 12
        minLength: 2
        type: string
      description:
        example: Where this database was born.
        type: string
      id:
        example: <UUID>
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/InstitutionKind'
        example: Lab
      meta:
        $ref: '#/definitions/Meta'
      name:
        example: Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés
        maxLength: 128
        minLength: 10
        type: string
      people:
        items:
          $ref: '#/definitions/Person'
        type: array
    required:
    - code
    - id
    - kind
    - name
    type: object
  InstitutionInput:
    properties:
      code:
        example: LEHNA
        maxLength: 12
        minLength: 2
        type: string
      description:
        example: Where this database was born.
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/InstitutionKind'
        example: Lab
      name:
        example: Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés
        maxLength: 128
        minLength: 10
        type: string
    required:
    - code
    - kind
    - name
    type: object
  InstitutionKind:
    enum:
    - Lab
    - FundingAgency
    - SequencingPlatform
    - Other
    type: string
    x-enum-varnames:
    - Lab
    - FoundingAgency
    - SequencingPlatform
    - Other
  InstitutionUpdate:
    properties:
      code:
        example: LEHNA
        maxLength: 12
        minLength: 2
        type: string
      description:
        example: Where this database was born.
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/InstitutionKind'
        example: Lab
      name:
        example: Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés
        maxLength: 128
        minLength: 3
        type: string
    type: object
  LoginFailedError:
    properties:
      reason:
        $ref: '#/definitions/LoginFailedReason'
    required:
    - reason
    type: object
  LoginFailedReason:
    enum:
    - Inactive
    - InvalidCredentials
    - ServerError
    type: string
    x-enum-varnames:
    - AccountInactive
    - InvalidCredentials
    - ServerError
  Meta:
    properties:
      created:
        example: "2023-09-01T16:41:10.921097+00:00"
        type: string
      created_by:
        $ref: '#/definitions/people.UserShortIdentity'
      created_by_user:
        $ref: '#/definitions/people.OptionalUser'
      last_updated:
        example: "2023-09-02T20:39:10.218057+00:00"
        type: string
      modified:
        example: "2023-09-02T20:39:10.218057+00:00"
        type: string
      updated_by:
        $ref: '#/definitions/people.UserShortIdentity'
      updated_by_user:
        $ref: '#/definitions/people.OptionalUser'
    required:
    - created
    type: object
  OptionalPerson:
    properties:
      alias:
        type: string
      comment:
        type: string
      contact:
        type: string
      first_name:
        maxLength: 32
        minLength: 2
        type: string
      full_name:
        type: string
      id:
        type: string
      last_name:
        maxLength: 32
        minLength: 2
        type: string
      role:
        $ref: '#/definitions/UserRole'
    required:
    - alias
    - first_name
    - full_name
    - id
    - last_name
    type: object
  PasswordInput:
    properties:
      password:
        type: string
      password_confirmation:
        type: string
    required:
    - password
    - password_confirmation
    type: object
  PendingUserRequestInput:
    properties:
      identity:
        properties:
          first_name:
            maxLength: 32
            minLength: 2
            type: string
          institution:
            type: string
          last_name:
            maxLength: 32
            minLength: 2
            type: string
        required:
        - first_name
        - last_name
        type: object
      motive:
        type: string
      user:
        $ref: '#/definitions/UserInput'
    type: object
  Person:
    properties:
      alias:
        type: string
      comment:
        type: string
      contact:
        type: string
      first_name:
        maxLength: 32
        minLength: 2
        type: string
      full_name:
        type: string
      id:
        type: string
      institutions:
        items:
          $ref: '#/definitions/people.InstitutionInner'
        type: array
      last_name:
        maxLength: 32
        minLength: 2
        type: string
      meta:
        $ref: '#/definitions/Meta'
      role:
        $ref: '#/definitions/UserRole'
    required:
    - alias
    - first_name
    - full_name
    - id
    - last_name
    type: object
  PersonInput:
    properties:
      alias:
        type: string
      comment:
        type: string
      contact:
        type: string
      first_name:
        maxLength: 32
        minLength: 2
        type: string
      institutions:
        items:
          type: string
        type: array
      last_name:
        maxLength: 32
        minLength: 2
        type: string
    required:
    - first_name
    - last_name
    type: object
  PersonUpdate:
    properties:
      alias:
        minLength: 3
        type: string
      comment:
        type: string
      contact:
        type: string
      first_name:
        maxLength: 32
        minLength: 2
        type: string
      institutions:
        description: Institution codes
        items:
          type: string
        type: array
      last_name:
        maxLength: 32
        minLength: 2
        type: string
    type: object
  ResendConfirmationError:
    enum:
    - InvalidCredentials
    - AlreadyVerified
    type: string
    x-enum-varnames:
    - ResendInvalidCredentials
    - ResendAlreadyVerified
  TaxonDB:
    properties:
      GBIF_ID:
        example: 2206247
        type: integer
      anchor:
        type: boolean
      authorship:
        example: (Linnaeus, 1758)
        type: string
      code:
        example: ASEaquaticus
        type: string
      comment:
        type: string
      id:
        example: <UUID>
        type: string
      meta:
        $ref: '#/definitions/Meta'
      name:
        example: Asellus aquaticus
        type: string
      rank:
        allOf:
        - $ref: '#/definitions/TaxonRank'
        example: Species
      status:
        allOf:
        - $ref: '#/definitions/TaxonStatus'
        example: Accepted
    required:
    - code
    - id
    - meta
    - name
    - rank
    - status
    type: object
  TaxonInput:
    properties:
      authorship:
        example: (Linnaeus, 1758)
        type: string
      code:
        description: Autogenerated if not provided
        example: ASEaquaticus
        minLength: 4
        type: string
      comment:
        type: string
      name:
        example: Asellus aquaticus
        type: string
      parent:
        description: Parent taxon code
        type: string
      rank:
        allOf:
        - $ref: '#/definitions/TaxonRank'
        example: Species
      status:
        allOf:
        - $ref: '#/definitions/TaxonStatus'
        example: Accepted
    required:
    - name
    - parent
    - rank
    - status
    type: object
  TaxonRank:
    enum:
    - Kingdom
    - Phylum
    - Class
    - Family
    - Genus
    - Species
    - Subspecies
    type: string
    x-enum-varnames:
    - Kingdom
    - Phylum
    - Class
    - Family
    - Genus
    - Species
    - Subspecies
  TaxonStatus:
    enum:
    - Accepted
    - Synonym
    - Unclassified
    type: string
    x-enum-varnames:
    - Accepted
    - Synonym
    - Unclassified
  TaxonUpdate:
    properties:
      GBIF_ID:
        type: integer
      authorship:
        type: string
      code:
        type: string
      name:
        type: string
      parent:
        description: parent code
        type: string
      rank:
        $ref: '#/definitions/TaxonRank'
      status:
        $ref: '#/definitions/TaxonStatus'
    type: object
  TaxonWithRelatives:
    properties:
      GBIF_ID:
        example: 2206247
        type: integer
      anchor:
        type: boolean
      authorship:
        example: (Linnaeus, 1758)
        type: string
      children:
        items:
          $ref: '#/definitions/TaxonDB'
        type: array
      code:
        example: ASEaquaticus
        type: string
      comment:
        type: string
      id:
        example: <UUID>
        type: string
      meta:
        $ref: '#/definitions/Meta'
      name:
        example: Asellus aquaticus
        type: string
      parent:
        properties:
          GBIF_ID:
            example: 2206247
            type: integer
          anchor:
            type: boolean
          authorship:
            example: (Linnaeus, 1758)
            type: string
          code:
            example: ASEaquaticus
            type: string
          comment:
            type: string
          id:
            example: <UUID>
            type: string
          meta:
            $ref: '#/definitions/Meta'
          name:
            example: Asellus aquaticus
            type: string
          rank:
            allOf:
            - $ref: '#/definitions/TaxonRank'
            example: Species
          status:
            allOf:
            - $ref: '#/definitions/TaxonStatus'
            example: Accepted
        required:
        - code
        - id
        - meta
        - name
        - rank
        - status
        type: object
      rank:
        allOf:
        - $ref: '#/definitions/TaxonRank'
        example: Species
      status:
        allOf:
        - $ref: '#/definitions/TaxonStatus'
        example: Accepted
    required:
    - code
    - id
    - meta
    - name
    - rank
    - status
    type: object
  User:
    properties:
      email:
        type: string
      email_confirmed:
        type: boolean
      id:
        type: string
      identity:
        $ref: '#/definitions/OptionalPerson'
      is_active:
        type: boolean
      login:
        type: string
      role:
        $ref: '#/definitions/UserRole'
    required:
    - email
    - email_confirmed
    - id
    - identity
    - is_active
    - login
    - role
    type: object
  UserCredentials:
    properties:
      identifier:
        type: string
      password:
        description: Unhashed, password hash comparison is done within EdgeDB
        type: string
    required:
    - identifier
    - password
    type: object
  UserInput:
    properties:
      email:
        format: email
        type: string
      login:
        type: string
      password:
        type: string
      password_confirmation:
        type: string
    required:
    - email
    - login
    - password
    - password_confirmation
    type: object
  UserRole:
    enum:
    - Visitor
    - Contributor
    - Maintainer
    - Admin
    type: string
    x-enum-varnames:
    - Visitor
    - Contributor
    - Maintainer
    - Admin
  accounts.PasswordUpdateRequest:
    properties:
      credentials:
        $ref: '#/definitions/UserCredentials'
      password:
        $ref: '#/definitions/PasswordInput'
    required:
    - credentials
    - password
    type: object
  accounts.TokenResponse:
    properties:
      token:
        type: string
    type: object
  edgedb.OptionalBool:
    type: object
  gbif.ImportRequestGBIF:
    properties:
      children:
        type: boolean
      key:
        description: target GBIF taxon key
        type: integer
    type: object
  people.InstitutionInner:
    properties:
      code:
        example: LEHNA
        maxLength: 12
        minLength: 2
        type: string
      description:
        example: Where this database was born.
        type: string
      id:
        example: <UUID>
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/InstitutionKind'
        example: Lab
      name:
        example: Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés
        maxLength: 128
        minLength: 10
        type: string
    required:
    - code
    - id
    - kind
    - name
    type: object
  people.OptionalUser:
    properties:
      email:
        type: string
      email_confirmed:
        type: boolean
      id:
        type: string
      identity:
        $ref: '#/definitions/OptionalPerson'
      is_active:
        type: boolean
      login:
        type: string
      role:
        $ref: '#/definitions/UserRole'
    required:
    - email
    - email_confirmed
    - id
    - identity
    - is_active
    - login
    - role
    type: object
  people.UserShortIdentity:
    properties:
      alias:
        type: string
      name:
        type: string
    type: object
  taxonomy.ListFilters:
    properties:
      anchors_only:
        $ref: '#/definitions/edgedb.OptionalBool'
      pattern:
        type: string
      rank:
        $ref: '#/definitions/TaxonRank'
      status:
        $ref: '#/definitions/TaxonStatus'
    type: object
info:
  contact:
    email: louis.duchemin@univ-lyon1.fr
    name: Louis Duchemin
    url: http://www.swagger.io/support
  description: Testing Swagger APIs.
  termsOfService: http://swagger.io/terms/
  title: Proto API
  version: "1.0"
paths:
  /account:
    get:
      consumes:
      - application/json
      description: Get details of currently authenticated user
      operationId: CurrentUser
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated user details
          schema:
            $ref: '#/definitions/User'
        "400":
          description: User is not authenticated
      summary: Authenticated user details
      tags:
      - People
  /account/password:
    post:
      description: Sets a new password for the currently authenticated user
      operationId: SetPassword
      parameters:
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/PasswordInput'
      responses:
        "202":
          description: New password was set
        "400":
          description: Invalid password inputs
        "403":
          description: Not authenticated
        "500":
          description: Database or server error
      summary: Set account password
      tags:
      - Auth
  /countries/:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Country'
            type: array
      summary: List Countries
      tags:
      - Location
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with their credentials and set a JWT.
      operationId: Login
      parameters:
      - description: User credentials
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: Returns a token and stores it as a session cookie
          schema:
            $ref: '#/definitions/accounts.TokenResponse'
        "400":
          description: Authentication failure
          schema:
            $ref: '#/definitions/LoginFailedError'
        "500":
          description: Internal Server Error
      summary: Authenticate user
      tags:
      - Auth
  /logout:
    post:
      consumes:
      - application/json
      description: Log out currently authenticated user by revoking authentication
        token in cookies
      operationId: Logout
      produces:
      - application/json
      responses:
        "200":
          description: User logged out
      summary: Logout user
      tags:
      - Auth
  /people/institutions:
    get:
      operationId: List Institutions
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Institution'
            type: array
      summary: List Institutions
      tags:
      - People
    post:
      description: Register a new institution that people work in.
      operationId: CreateInstitution
      parameters:
      - description: Institution informations
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/InstitutionInput'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Institution'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/FieldErrors'
      summary: Create institution
      tags:
      - People
  /people/institutions/{code}:
    delete:
      operationId: DeleteInstitution
      parameters:
      - description: Institution short name
        in: path
        name: code
        required: true
        type: string
      responses:
        "200":
          description: Deleted item
          schema:
            $ref: '#/definitions/Institution'
        "404":
          description: Institution does not exist
      summary: Delete institution
      tags:
      - People
    patch:
      operationId: UpdateInstitution
      parameters:
      - description: Institution code
        in: path
        name: code
        required: true
        type: string
      - description: Institution informations
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/InstitutionUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Institution'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/FieldErrors'
      summary: Update institution
      tags:
      - People
  /people/persons:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Person'
            type: array
      summary: List persons
      tags:
      - People
    post:
      description: Register a new person
      operationId: Createperson
      parameters:
      - description: Created person
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/PersonInput'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Person'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/FieldErrors'
      summary: Create person
      tags:
      - People
  /people/persons/{id}:
    delete:
      operationId: DeletePerson
      parameters:
      - description: Item UUID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Person'
        "404":
          description: person does not exist
      summary: Delete person
      tags:
      - People
    patch:
      operationId: UpdatePerson
      parameters:
      - description: Item UUID
        in: path
        name: id
        required: true
        type: string
      - description: Update infos
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/PersonUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Person'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/FieldErrors'
      summary: Update person
      tags:
      - People
  /taxonomy/:
    get:
      description: Lists taxa, optionally filtered by name, rank and status
      operationId: TaxonomyList
      parameters:
      - description: Query filters
        in: body
        name: filter
        schema:
          $ref: '#/definitions/taxonomy.ListFilters'
      responses:
        "200":
          description: Get taxon success
          schema:
            items:
              $ref: '#/definitions/TaxonWithRelatives'
            type: array
      summary: List taxa
      tags:
      - Taxonomy
    post:
      description: |-
        This provides a way to register new unclassified taxa,
        that have not yet been published to GBIF.
        Importing taxa directly from GBIF should be preferred otherwise.
      operationId: CreateTaxon
      parameters:
      - description: New taxon
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/TaxonInput'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/TaxonWithRelatives'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/FieldErrors'
      summary: Create taxon
      tags:
      - Taxonomy
  /taxonomy/{code}:
    delete:
      operationId: DeleteTaxon
      parameters:
      - description: Taxon code
        in: path
        minLength: 3
        name: code
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TaxonWithRelatives'
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete a taxon by its code
      tags:
      - Taxonomy
    get:
      operationId: GetTaxon
      parameters:
      - description: Taxon code
        in: path
        minLength: 3
        name: code
        required: true
        type: string
      responses:
        "200":
          description: Get taxon success
          schema:
            $ref: '#/definitions/TaxonWithRelatives'
        "404":
          description: Not Found
      summary: Get a taxon by its code
      tags:
      - Taxonomy
    patch:
      operationId: UpdateTaxon
      parameters:
      - description: Taxon code
        in: path
        minLength: 3
        name: code
        required: true
        type: string
      - description: Taxon
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/TaxonUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TaxonWithRelatives'
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update a taxon by its code
      tags:
      - Taxonomy
  /taxonomy/import:
    put:
      consumes:
      - application/json
      description: Imports a clade from the GBIF taxonomy, using a its GBIF ID
      operationId: ImportGBIF
      parameters:
      - description: Import parameters
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/gbif.ImportRequestGBIF'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      summary: Import GBIF clade
      tags:
      - Taxonomy
  /users/confirm:
    get:
      consumes:
      - application/json
      description: Confirms a user email using a token
      operationId: EmailConfirmation
      parameters:
      - description: Confirmation token
        in: query
        name: token
        required: true
        type: string
      - description: Path to redirect to on success
        in: query
        name: redirect
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email was confirmed and account activated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/EmailConfirmationError'
        "500":
          description: Server error
      summary: Email confirmation
      tags:
      - Auth
  /users/confirm/resend:
    post:
      consumes:
      - application/json
      description: Send again the confirmation email
      operationId: ResendConfirmationEmail
      parameters:
      - description: User informations
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      - description: Redirect to path on confirmation
        in: query
        name: redirect
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Email was sent
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResendConfirmationError'
      summary: Resend confirmation email
      tags:
      - Auth
  /users/forgotten-password:
    post:
      description: A token to reset the password associated to the provided email
        address is sent, unless the address is not known in the DB.
      operationId: RequestPasswordReset
      parameters:
      - description: The email address the account was registered with
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/EmailInput'
      responses:
        "202":
          description: Email address is valid and a password reset token was sent
        "400":
          description: Invalid email address
      summary: Request a password reset token
      tags:
      - Auth
  /users/password-reset/{token}:
    get:
      operationId: ValidatePasswordToken
      parameters:
      - description: Password reset token
        in: path
        name: token
        required: true
        type: string
      responses:
        "200":
          description: Password token is valid
        "400":
          description: Invalid or expired password reset token
      summary: Verify that a password token is valid
      tags:
      - Auth
    post:
      description: Resets a user's password using a token sent to their email address.
      operationId: ResetPassword
      parameters:
      - description: Password reset token
        in: path
        name: token
        required: true
        type: string
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/PasswordInput'
      responses:
        "202":
          description: Password was reset successfully
        "400":
          description: Invalid or expired confirmation token, or invalid input password
        "500":
          description: Database error
      summary: Reset account password
      tags:
      - Auth
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user account, that is inactive (until email is verified
        or admin intervention), and has role 'Guest'
      operationId: RegisterUser
      parameters:
      - description: User informations
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/PendingUserRequestInput'
      - description: Path to redirect to when email is successfully confirmed
        in: query
        name: redirect
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: User created and waiting for email verification
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/FieldErrors'
      summary: Register user
      tags:
      - Auth
securityDefinitions:
  JWT:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
