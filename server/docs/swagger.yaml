basePath: /api/v1
definitions:
  Country:
    properties:
      code:
        example: DE
        type: string
      id:
        example: <UUID>
        type: string
      name:
        example: Germany
        type: string
      nbLocalities:
        example: 9
        type: integer
    type: object
  Meta:
    properties:
      created:
        example: "2023-09-01T16:41:10.921097+00:00"
        type: string
      modified:
        example: "2023-09-02T20:39:10.218057+00:00"
        type: string
    type: object
  PasswordInput:
    properties:
      password:
        minLength: 8
        type: string
      password_confirmation:
        type: string
    required:
    - password
    - password_confirmation
    type: object
  Person:
    properties:
      contact:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
  PersonInput:
    properties:
      contact:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
  Taxon:
    properties:
      authorship:
        example: (Linnaeus, 1758)
        type: string
      code:
        example: ASEaquaticus
        type: string
      gbif_ID:
        example: 2206247
        type: integer
      name:
        example: Asellus aquaticus
        type: string
      rank:
        allOf:
        - $ref: '#/definitions/TaxonRank'
        example: Species
      status:
        allOf:
        - $ref: '#/definitions/TaxonStatus'
        example: Accepted
    required:
    - name
    - rank
    - status
    type: object
  TaxonDB:
    properties:
      anchor:
        type: boolean
      authorship:
        example: (Linnaeus, 1758)
        type: string
      code:
        example: ASEaquaticus
        type: string
      gbif_ID:
        example: 2206247
        type: integer
      id:
        example: <UUID>
        type: string
      meta:
        $ref: '#/definitions/Meta'
      name:
        example: Asellus aquaticus
        type: string
      rank:
        allOf:
        - $ref: '#/definitions/TaxonRank'
        example: Species
      status:
        allOf:
        - $ref: '#/definitions/TaxonStatus'
        example: Accepted
    required:
    - name
    - rank
    - status
    type: object
  TaxonInput:
    properties:
      authorship:
        example: (Linnaeus, 1758)
        type: string
      code:
        example: ASEaquaticus
        type: string
      gbif_ID:
        example: 2206247
        type: integer
      name:
        example: Asellus aquaticus
        type: string
      parent:
        type: string
      rank:
        allOf:
        - $ref: '#/definitions/TaxonRank'
        example: Species
      status:
        allOf:
        - $ref: '#/definitions/TaxonStatus'
        example: Accepted
    required:
    - name
    - rank
    - status
    type: object
  TaxonRank:
    enum:
    - Kingdom
    - Phylum
    - Class
    - Family
    - Genus
    - Species
    - Subspecies
    type: string
    x-enum-varnames:
    - Kingdom
    - Phylum
    - Class
    - Family
    - Genus
    - Species
    - Subspecies
  TaxonStatus:
    enum:
    - Accepted
    - Synonym
    - Unclassified
    type: string
    x-enum-varnames:
    - Accepted
    - Synonym
    - Unclassified
  TaxonWithRelatives:
    properties:
      anchor:
        type: boolean
      authorship:
        example: (Linnaeus, 1758)
        type: string
      children:
        items:
          $ref: '#/definitions/TaxonDB'
        type: array
      code:
        example: ASEaquaticus
        type: string
      gbif_ID:
        example: 2206247
        type: integer
      id:
        example: <UUID>
        type: string
      meta:
        $ref: '#/definitions/Meta'
      name:
        example: Asellus aquaticus
        type: string
      parent:
        properties:
          anchor:
            type: boolean
          authorship:
            example: (Linnaeus, 1758)
            type: string
          code:
            example: ASEaquaticus
            type: string
          gbif_ID:
            example: 2206247
            type: integer
          id:
            example: <UUID>
            type: string
          meta:
            $ref: '#/definitions/Meta'
          name:
            example: Asellus aquaticus
            type: string
          rank:
            allOf:
            - $ref: '#/definitions/TaxonRank'
            example: Species
          status:
            allOf:
            - $ref: '#/definitions/TaxonStatus'
            example: Accepted
        required:
        - name
        - rank
        - status
        type: object
      rank:
        allOf:
        - $ref: '#/definitions/TaxonRank'
        example: Species
      status:
        allOf:
        - $ref: '#/definitions/TaxonStatus'
        example: Accepted
    required:
    - name
    - rank
    - status
    type: object
  TokenResponse:
    properties:
      token:
        example: some-generated-jwt
        type: string
    type: object
  User:
    properties:
      email:
        type: string
      identity:
        $ref: '#/definitions/Person'
      login:
        type: string
      role:
        $ref: '#/definitions/UserRole'
      verified:
        type: boolean
    type: object
  UserCredentials:
    properties:
      identifier:
        type: string
      password:
        type: string
      remember:
        type: boolean
    required:
    - identifier
    - password
    - remember
    type: object
  UserInput:
    properties:
      email:
        format: email
        type: string
      email_public:
        type: boolean
      identity:
        $ref: '#/definitions/PersonInput'
      login:
        type: string
      password:
        minLength: 8
        type: string
      password_confirmation:
        type: string
    required:
    - password
    - password_confirmation
    type: object
  UserRole:
    enum:
    - Guest
    - Contributor
    - ProjectMember
    - Admin
    type: string
    x-enum-varnames:
    - Guest
    - Contributor
    - ProjectMember
    - Admin
  accounts.PasswordUpdateRequest:
    properties:
      credentials:
        $ref: '#/definitions/UserCredentials'
      password:
        $ref: '#/definitions/PasswordInput'
    required:
    - credentials
    - password
    type: object
info:
  contact:
    email: louis.duchemin@univ-lyon1.fr
    name: Louis Duchemin
    url: http://www.swagger.io/support
  description: Testing Swagger APIs.
  termsOfService: http://swagger.io/terms/
  title: Proto API
  version: "1.0"
paths:
  /account:
    get:
      consumes:
      - application/json
      description: Get details of currently authenticated user
      operationId: CurrentUser
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated user details
          schema:
            $ref: '#/definitions/User'
        "400":
          description: User is not authenticated
      summary: Authenticated user details
      tags:
      - People
  /countries/:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Country'
            type: array
      summary: List Countries
      tags:
      - Location
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with their credentials and set a JWT.
      operationId: Login
      parameters:
      - description: User credentials
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: Returns a token and stores it as a session cookie
          schema:
            $ref: '#/definitions/TokenResponse'
        "400":
          description: Invalid credentials
      summary: Authenticate user
      tags:
      - People
  /taxonomy/:
    get:
      consumes:
      - application/json
      description: Lists taxa, optionally filtered by name, rank and status
      operationId: TaxonomyList
      parameters:
      - description: Name search pattern
        in: query
        minLength: 2
        name: pattern
        type: string
      - description: Taxonomic rank
        enum:
        - Kingdom
        - Phylum
        - Class
        - Family
        - Genus
        - Species
        - Subspecies
        in: query
        name: rank
        type: string
      - description: Taxonomic status
        enum:
        - Accepted
        - Synonym
        - Unclassified
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get taxon success
          schema:
            items:
              $ref: '#/definitions/TaxonWithRelatives'
            type: array
      summary: List taxa
      tags:
      - Taxonomy
  /taxonomy/{code}:
    delete:
      consumes:
      - application/json
      operationId: DeleteTaxon
      parameters:
      - description: Taxon code
        in: path
        minLength: 3
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete a taxon by its code
      tags:
      - Taxonomy
    get:
      consumes:
      - application/json
      operationId: GetTaxon
      parameters:
      - description: Taxon code
        in: path
        minLength: 3
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get taxon success
          schema:
            $ref: '#/definitions/TaxonWithRelatives'
        "404":
          description: Not Found
      summary: Get a taxon by its code
      tags:
      - Taxonomy
    patch:
      consumes:
      - application/json
      operationId: UpdateTaxon
      parameters:
      - description: Taxon code
        in: path
        minLength: 3
        name: code
        required: true
        type: string
      - description: Taxon
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/TaxonInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TaxonWithRelatives'
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update a taxon by its code
      tags:
      - Taxonomy
  /taxonomy/anchors:
    get:
      consumes:
      - application/json
      description: Anchors are taxa that were imported as the root of a subtree in
        the taxonomy.
      operationId: TaxonAnchors
      produces:
      - application/json
      responses:
        "200":
          description: Get anchor taxa list success
          schema:
            items:
              $ref: '#/definitions/Taxon'
            type: array
      summary: List anchor taxa
      tags:
      - Taxonomy
  /taxonomy/import:
    put:
      consumes:
      - application/json
      description: Imports a clade from the GBIF taxonomy, using a its GBIF ID
      operationId: ImportGBIF
      parameters:
      - description: GBIF taxon code
        in: query
        name: code
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TaxonWithRelatives'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      summary: Import GBIF clade
      tags:
      - Taxonomy
  /users/{uuid}:
    delete:
      consumes:
      - application/json
      description: Deletes a user
      produces:
      - application/json
      responses:
        "200":
          description: User was deleted successfully
        "401":
          description: Admin privileges required
        "404":
          description: User does not exist
      summary: Delete a user
      tags:
      - People
  /users/confirm:
    get:
      consumes:
      - application/json
      description: Confirms a user email using a token
      operationId: EmailConfirmation
      parameters:
      - description: Confirmation token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Email was confirmed and account activated
        "400":
          description: Invalid or expired confirmation token
        "500":
          description: Token parse error
      summary: Email confirmation
      tags:
      - People
  /users/confirm/resend:
    post:
      consumes:
      - application/json
      description: Send again the confirmation email
      operationId: ResendConfirmationEmail
      parameters:
      - description: User informations
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      produces:
      - application/json
      responses:
        "202":
          description: Email was sent
        "400":
          description: Invalid parameters
      summary: Resend confirmation email
      tags:
      - People
  /users/password-reset/{token}:
    get:
      consumes:
      - application/json
      operationId: ValidatePasswordToken
      parameters:
      - description: Password reset token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Password token is valid
        "400":
          description: Invalid or expired confirmation token, or invalid input password
      summary: Verify a password token is valid
      tags:
      - People
    post:
      consumes:
      - application/json
      description: Resets a user's password using a token sent to their email address.
      operationId: ResetPassword
      parameters:
      - description: Password reset token
        in: path
        name: token
        required: true
        type: string
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/PasswordInput'
      produces:
      - application/json
      responses:
        "202":
          description: Password was reset successfully
        "400":
          description: Invalid or expired confirmation token, or invalid input password
        "500":
          description: Database error
      summary: Reset account password
      tags:
      - People
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user account, that is inactive (until email is verified
        or admin intervention), and has role 'Guest'
      operationId: RegisterUser
      parameters:
      - description: User informations
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/UserInput'
      produces:
      - application/json
      responses:
        "202":
          description: User created and waiting for email verification
        "400":
          description: Invalid parameters
      summary: Register user
      tags:
      - People
securityDefinitions:
  JWT:
    in: header
    name: token// @license.name Apache 2.0
    type: apiKey
swagger: "2.0"
