// NOT generated by openapi-ts

import { DateTime } from "luxon"
import { BioMaterialType as TBioMaterialType, CompositeDate as CompositeDateType, DatePrecision, DateWithPrecisionInput, DateWithPrecision as DateWithPrecisionType } from "./types.gen"

export type CompositeDate = CompositeDateType
export namespace CompositeDate {
  export function fromDateWithPrecision({ precision, date }: DateWithPrecision): CompositeDate {
    if (precision === 'Unknown' || !date) return {}
    switch (precision) {
      case 'Year':
        return { year: date.getFullYear() }
      case 'Month':
        // JS months start at 0, because ✨ JS ✨
        return { month: date.getMonth() + 1, year: date.getFullYear() }
      case 'Day':
        return { day: date.getDate(), month: date.getMonth() + 1, year: date?.getFullYear() }
    }
  }
}


export type DateWithPrecision = DateWithPrecisionType
export namespace DateWithPrecision {
  const formats: Record<DatePrecision, string> = {
    Day: 'dd LLL yyyy',
    Month: 'LLL yyyy',
    Year: 'yyyy',
    Unknown: "'Unknown'"
  }
  export function compare(a: DateWithPrecision, b: DateWithPrecision) {
    return (DateWithPrecision.toDateTime(b) ?? 0) > (DateWithPrecision.toDateTime(a) ?? 0)
      ? -1
      : 1
  }

  export function toInput({ date, precision }: DateWithPrecision): DateWithPrecisionInput {
    return { date: CompositeDate.fromDateWithPrecision({ date, precision }), precision }
  }
  export function toDateTime({ date, precision }: DateWithPrecision): DateTime | null {
    if (precision === 'Unknown' || !date) return null
    return DateTime.fromJSDate(date)
  }

  export function format({ date, precision }: DateWithPrecision, format?: string) {
    if (precision === 'Unknown' || !date) return "Unknown"
    return DateTime.fromJSDate(date)
      .setLocale('en-gb')
      .toFormat(format ?? formats[precision])
  }
}

export type BioMaterialType = TBioMaterialType
export namespace BioMaterialType {

  export const props: Record<BioMaterialType, { icon: string, color: string, prependIcon: string }> = {
    Internal: {
      icon: 'mdi-cube-scan',
      prependIcon: 'mdi-cube-scan',
      color: 'primary'
    },
    External: {
      icon: 'mdi-arrow-collapse-all',
      prependIcon: 'mdi-arrow-collapse-all',
      color: 'warning'
    }
  }

  export function icon(t: BioMaterialType) {
    return props[t].icon
  }
}