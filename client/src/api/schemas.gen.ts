// This file is auto-generated by @hey-api/openapi-ts

export const $AuthenticationResponse = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/AuthenticationResponse.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    messages: {
      items: {
        type: 'string'
      },
      type: 'array'
    },
    token: {
      description: 'JSON Web Token',
      examples: ['xxxxx.yyyyy.zzzzz'],
      type: 'string'
    }
  },
  required: ['messages', 'token'],
  type: 'object'
} as const

export const $Country = {
  additionalProperties: false,
  properties: {
    code: {
      examples: ['DE'],
      type: 'string'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    name: {
      examples: ['Germany'],
      type: 'string'
    },
    nbLocalities: {
      format: 'int64',
      minimum: 0,
      type: 'integer'
    }
  },
  required: ['id', 'name', 'code', 'nbLocalities'],
  type: 'object'
} as const

export const $CurrentUserResponse = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/CurrentUserResponse.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    token: {
      description: 'JSON Web Token',
      examples: ['xxxxx.yyyyy.zzzzz'],
      type: 'string'
    },
    user: {
      $ref: '#/components/schemas/User'
    }
  },
  required: ['user', 'token'],
  type: 'object'
} as const

export const $ErrorDetail = {
  additionalProperties: false,
  properties: {
    location: {
      description: "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
      type: 'string'
    },
    message: {
      description: 'Error message text',
      type: 'string'
    },
    value: {
      description: 'The value at the given location'
    }
  },
  type: 'object'
} as const

export const $ErrorModel = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/ErrorModel.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    detail: {
      description: 'A human-readable explanation specific to this occurrence of the problem.',
      examples: ['Property foo is required but is missing.'],
      type: 'string'
    },
    errors: {
      description: 'Optional list of individual error details',
      items: {
        $ref: '#/components/schemas/ErrorDetail'
      },
      type: 'array'
    },
    instance: {
      description: 'A URI reference that identifies the specific occurrence of the problem.',
      examples: ['https://example.com/error-log/abc123'],
      format: 'uri',
      type: 'string'
    },
    status: {
      description: 'HTTP status code',
      examples: [400],
      format: 'int64',
      type: 'integer'
    },
    title: {
      description:
        'A short, human-readable summary of the problem type. This value should not change between occurrences of the error.',
      examples: ['Bad Request'],
      type: 'string'
    },
    type: {
      default: 'about:blank',
      description: 'A URI reference to human-readable documentation for the error.',
      examples: ['https://example.com/errors/example'],
      format: 'uri',
      type: 'string'
    }
  },
  type: 'object'
} as const

export const $ImportProcess = {
  additionalProperties: false,
  properties: {
    GBIF_ID: {
      format: 'int64',
      type: 'integer'
    },
    done: {
      type: 'boolean'
    },
    error: {},
    expected: {
      format: 'int64',
      type: 'integer'
    },
    imported: {
      format: 'int64',
      type: 'integer'
    },
    name: {
      type: 'string'
    },
    rank: {
      $ref: '#/components/schemas/TaxonRank',
      type: 'string'
    },
    started: {
      format: 'date-time',
      type: 'string'
    }
  },
  required: ['name', 'GBIF_ID', 'expected', 'imported', 'rank', 'started', 'done', 'error'],
  type: 'object'
} as const

export const $ImportRequestGBIF = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/ImportRequestGBIF.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    children: {
      description: 'Import whole clade, including the taxon descendants',
      type: 'boolean'
    },
    key: {
      description: 'Target GBIF taxon key',
      format: 'int64',
      type: 'integer'
    }
  },
  required: ['key', 'children'],
  type: 'object'
} as const

export const $Institution = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/Institution.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    code: {
      examples: ['LEHNA'],
      type: 'string'
    },
    description: {
      examples: ['Where this database was born.'],
      type: 'string'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    kind: {
      $ref: '#/components/schemas/InstitutionKind',
      examples: ['Lab'],
      type: 'string'
    },
    meta: {
      $ref: '#/components/schemas/Meta'
    },
    name: {
      examples: ["Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"],
      type: 'string'
    },
    people: {
      description: 'Known members of this institution',
      items: {
        $ref: '#/components/schemas/PersonInner'
      },
      type: 'array'
    }
  },
  required: ['meta', 'id', 'name', 'code', 'kind'],
  type: 'object'
} as const

export const $InstitutionInner = {
  additionalProperties: false,
  properties: {
    code: {
      examples: ['LEHNA'],
      type: 'string'
    },
    description: {
      examples: ['Where this database was born.'],
      type: 'string'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    kind: {
      $ref: '#/components/schemas/InstitutionKind',
      examples: ['Lab'],
      type: 'string'
    },
    name: {
      examples: ["Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"],
      type: 'string'
    }
  },
  required: ['id', 'name', 'code', 'kind'],
  type: 'object'
} as const

export const $InstitutionInput = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/InstitutionInput.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    code: {
      examples: ['LEHNA'],
      type: 'string'
    },
    description: {
      examples: ['Where this database was born.'],
      type: 'string'
    },
    kind: {
      $ref: '#/components/schemas/InstitutionKind',
      examples: ['Lab'],
      type: 'string'
    },
    name: {
      examples: ["Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"],
      type: 'string'
    }
  },
  required: ['name', 'code', 'kind'],
  type: 'object'
} as const

export const $InstitutionKind = {
  enum: ['Lab', 'FundingAgency', 'SequencingPlatform', 'Other'],
  title: 'InstitutionKind',
  type: 'string'
} as const

export const $InstitutionUpdate = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/InstitutionUpdate.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    code: {
      examples: ['LEHNA'],
      type: 'string'
    },
    description: {
      examples: ['Where this database was born.'],
      type: 'string'
    },
    kind: {
      $ref: '#/components/schemas/InstitutionKind',
      examples: ['Lab'],
      type: 'string'
    },
    name: {
      examples: ["Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"],
      type: 'string'
    }
  },
  type: 'object'
} as const

export const $Meta = {
  additionalProperties: false,
  properties: {
    created: {
      format: 'date-time',
      type: 'string'
    },
    created_by: {
      $ref: '#/components/schemas/UserShortIdentity'
    },
    created_by_user: {
      $ref: '#/components/schemas/OptionalUser'
    },
    last_updated: {
      format: 'date-time',
      type: 'string'
    },
    modified: {
      format: 'date-time',
      type: 'string'
    },
    updated_by: {
      $ref: '#/components/schemas/UserShortIdentity'
    },
    updated_by_user: {
      $ref: '#/components/schemas/OptionalUser'
    }
  },
  required: [
    'created',
    'modified',
    'last_updated',
    'created_by_user',
    'updated_by_user',
    'created_by',
    'updated_by'
  ],
  type: 'object'
} as const

export const $OptionalPerson = {
  additionalProperties: false,
  properties: {
    alias: {
      type: 'string'
    },
    comment: {
      type: 'string'
    },
    contact: {
      type: 'string'
    },
    first_name: {
      type: 'string'
    },
    full_name: {
      type: 'string'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    last_name: {
      type: 'string'
    },
    role: {
      $ref: '#/components/schemas/UserRole',
      type: 'string'
    }
  },
  required: ['id', 'full_name', 'alias', 'role', 'contact', 'comment', 'first_name', 'last_name'],
  type: 'object'
} as const

export const $OptionalUser = {
  additionalProperties: false,
  properties: {
    email: {
      format: 'email',
      type: 'string'
    },
    email_confirmed: {
      type: 'boolean'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    identity: {
      $ref: '#/components/schemas/OptionalPerson'
    },
    is_active: {
      type: 'boolean'
    },
    login: {
      type: 'string'
    },
    role: {
      $ref: '#/components/schemas/UserRole',
      type: 'string'
    }
  },
  required: ['id', 'email', 'login', 'role', 'email_confirmed', 'identity', 'is_active'],
  type: 'object'
} as const

export const $PasswordInput = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/PasswordInput.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    password: {
      type: 'string'
    },
    password_confirmation: {
      type: 'string'
    }
  },
  required: ['password', 'password_confirmation'],
  type: 'object'
} as const

export const $Person = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/Person.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    alias: {
      type: 'string'
    },
    comment: {
      type: 'string'
    },
    contact: {
      type: 'string'
    },
    first_name: {
      type: 'string'
    },
    full_name: {
      type: 'string'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    institutions: {
      items: {
        $ref: '#/components/schemas/InstitutionInner'
      },
      type: 'array'
    },
    last_name: {
      type: 'string'
    },
    meta: {
      $ref: '#/components/schemas/Meta'
    },
    role: {
      $ref: '#/components/schemas/UserRole',
      type: 'string'
    }
  },
  required: [
    'institutions',
    'meta',
    'id',
    'full_name',
    'alias',
    'role',
    'contact',
    'comment',
    'first_name',
    'last_name'
  ],
  type: 'object'
} as const

export const $PersonInner = {
  additionalProperties: false,
  properties: {
    alias: {
      type: 'string'
    },
    comment: {
      type: 'string'
    },
    contact: {
      type: 'string'
    },
    first_name: {
      type: 'string'
    },
    full_name: {
      type: 'string'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    last_name: {
      type: 'string'
    },
    role: {
      $ref: '#/components/schemas/UserRole',
      type: 'string'
    }
  },
  required: ['id', 'full_name', 'alias', 'role', 'contact', 'comment', 'first_name', 'last_name'],
  type: 'object'
} as const

export const $PersonInput = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/PersonInput.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    alias: {
      type: 'string'
    },
    comment: {
      type: 'string'
    },
    contact: {
      type: 'string'
    },
    first_name: {
      type: 'string'
    },
    institutions: {
      items: {
        type: 'string'
      },
      type: 'array'
    },
    last_name: {
      type: 'string'
    }
  },
  required: ['institutions', 'first_name', 'last_name'],
  type: 'object'
} as const

export const $PersonStruct = {
  additionalProperties: false,
  properties: {
    first_name: {
      type: 'string'
    },
    institution: {
      type: 'string'
    },
    last_name: {
      type: 'string'
    }
  },
  required: ['first_name', 'last_name'],
  type: 'object'
} as const

export const $PersonUpdate = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/PersonUpdate.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    alias: {
      type: 'string'
    },
    comment: {
      type: 'string'
    },
    contact: {
      type: 'string'
    },
    first_name: {
      type: 'string'
    },
    institutions: {
      items: {
        type: 'string'
      },
      type: 'array'
    },
    last_name: {
      type: 'string'
    }
  },
  type: 'object'
} as const

export const $RegisterInputBody = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/RegisterInputBody.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    handler: {
      $ref: '#/components/schemas/URL',
      description:
        'A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.'
    },
    identity: {
      $ref: '#/components/schemas/PersonStruct'
    },
    motive: {
      type: 'string'
    },
    user: {
      $ref: '#/components/schemas/UserInput'
    }
  },
  required: ['user', 'identity', 'motive'],
  type: 'object'
} as const

export const $RequestPasswordResetInputBody = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/RequestPasswordResetInputBody.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    email: {
      format: 'email',
      type: 'string'
    },
    handler: {
      $ref: '#/components/schemas/URL',
      description: 'A URL where a form to set the new password is available'
    }
  },
  required: ['email'],
  type: 'object'
} as const

export const $ResendEmailConfirmationInputBody = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/ResendEmailConfirmationInputBody.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    email: {
      format: 'email',
      type: 'string'
    },
    handler: {
      $ref: '#/components/schemas/URL',
      description:
        'A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.'
    }
  },
  required: ['email'],
  type: 'object'
} as const

export const $Taxon = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/Taxon.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    GBIF_ID: {
      examples: [2206247],
      format: 'int64',
      type: 'integer'
    },
    anchor: {
      type: 'boolean'
    },
    authorship: {
      examples: ['(Linnaeus, 1758)'],
      type: 'string'
    },
    code: {
      examples: ['ASEaquaticus'],
      type: 'string'
    },
    comment: {
      type: 'string'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    meta: {
      $ref: '#/components/schemas/Meta'
    },
    name: {
      examples: ['Asellus aquaticus'],
      type: 'string'
    },
    rank: {
      $ref: '#/components/schemas/TaxonRank',
      examples: ['Species'],
      type: 'string'
    },
    status: {
      $ref: '#/components/schemas/TaxonStatus',
      examples: ['Accepted'],
      type: 'string'
    }
  },
  required: [
    'id',
    'GBIF_ID',
    'code',
    'authorship',
    'anchor',
    'comment',
    'meta',
    'name',
    'status',
    'rank'
  ],
  type: 'object'
} as const

export const $TaxonInput = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/TaxonInput.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    authorship: {
      examples: ['(Linnaeus, 1758)'],
      type: 'string'
    },
    code: {
      examples: ['ASEaquaticus'],
      type: 'string'
    },
    comment: {
      type: 'string'
    },
    name: {
      examples: ['Asellus aquaticus'],
      type: 'string'
    },
    parent: {
      type: 'string'
    },
    rank: {
      $ref: '#/components/schemas/TaxonRank',
      examples: ['Species'],
      type: 'string'
    },
    status: {
      $ref: '#/components/schemas/TaxonStatus',
      examples: ['Accepted'],
      type: 'string'
    }
  },
  required: ['parent', 'name', 'status', 'rank'],
  type: 'object'
} as const

export const $TaxonRank = {
  enum: ['Kingdom', 'Phylum', 'Class', 'Family', 'Genus', 'Species', 'Subspecies'],
  title: 'TaxonRank',
  type: 'string'
} as const

export const $TaxonStatus = {
  enum: ['Accepted', 'Synonym', 'Unclassified'],
  title: 'TaxonStatus',
  type: 'string'
} as const

export const $TaxonUpdate = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/TaxonUpdate.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    GBIF_ID: {
      format: 'int32',
      type: 'integer'
    },
    authorship: {
      type: 'string'
    },
    code: {
      type: 'string'
    },
    name: {
      type: 'string'
    },
    parent: {
      type: 'string'
    },
    rank: {
      type: 'string'
    },
    status: {
      type: 'string'
    }
  },
  type: 'object'
} as const

export const $TaxonWithRelatives = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/TaxonWithRelatives.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    GBIF_ID: {
      examples: [2206247],
      format: 'int64',
      type: 'integer'
    },
    anchor: {
      type: 'boolean'
    },
    authorship: {
      examples: ['(Linnaeus, 1758)'],
      type: 'string'
    },
    children: {
      items: {
        $ref: '#/components/schemas/Taxon'
      },
      type: 'array'
    },
    code: {
      examples: ['ASEaquaticus'],
      type: 'string'
    },
    comment: {
      type: 'string'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    meta: {
      $ref: '#/components/schemas/Meta'
    },
    name: {
      examples: ['Asellus aquaticus'],
      type: 'string'
    },
    parent: {
      $ref: '#/components/schemas/TaxonWithRelativesParentStruct'
    },
    rank: {
      $ref: '#/components/schemas/TaxonRank',
      examples: ['Species'],
      type: 'string'
    },
    status: {
      $ref: '#/components/schemas/TaxonStatus',
      examples: ['Accepted'],
      type: 'string'
    }
  },
  required: [
    'parent',
    'id',
    'GBIF_ID',
    'code',
    'authorship',
    'anchor',
    'comment',
    'meta',
    'name',
    'status',
    'rank'
  ],
  type: 'object'
} as const

export const $TaxonWithRelativesParentStruct = {
  additionalProperties: false,
  properties: {
    GBIF_ID: {
      examples: [2206247],
      format: 'int64',
      type: 'integer'
    },
    anchor: {
      type: 'boolean'
    },
    authorship: {
      examples: ['(Linnaeus, 1758)'],
      type: 'string'
    },
    code: {
      examples: ['ASEaquaticus'],
      type: 'string'
    },
    comment: {
      type: 'string'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    meta: {
      $ref: '#/components/schemas/Meta'
    },
    name: {
      examples: ['Asellus aquaticus'],
      type: 'string'
    },
    rank: {
      $ref: '#/components/schemas/TaxonRank',
      examples: ['Species'],
      type: 'string'
    },
    status: {
      $ref: '#/components/schemas/TaxonStatus',
      examples: ['Accepted'],
      type: 'string'
    }
  },
  required: [
    'id',
    'GBIF_ID',
    'code',
    'authorship',
    'anchor',
    'comment',
    'meta',
    'name',
    'status',
    'rank'
  ],
  type: 'object'
} as const

export const $URL = {
  format: 'uri',
  type: ['string', 'null']
} as const

export const $UpdatePasswordInput = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/UpdatePasswordInput.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    new_password: {
      $ref: '#/components/schemas/PasswordInput'
    },
    password: {
      type: 'string'
    }
  },
  required: ['password', 'new_password'],
  type: 'object'
} as const

export const $User = {
  additionalProperties: false,
  properties: {
    email: {
      format: 'email',
      type: 'string'
    },
    email_confirmed: {
      type: 'boolean'
    },
    id: {
      contentEncoding: 'base64',
      format: 'uuid',
      type: 'string'
    },
    identity: {
      $ref: '#/components/schemas/OptionalPerson'
    },
    is_active: {
      type: 'boolean'
    },
    login: {
      type: 'string'
    },
    role: {
      $ref: '#/components/schemas/UserRole',
      type: 'string'
    }
  },
  required: ['id', 'email', 'login', 'role', 'email_confirmed', 'identity', 'is_active'],
  type: 'object'
} as const

export const $UserCredentials = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/UserCredentials.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    identifier: {
      type: 'string'
    },
    password: {
      type: 'string'
    }
  },
  required: ['identifier', 'password'],
  type: 'object'
} as const

export const $UserInput = {
  additionalProperties: false,
  properties: {
    $schema: {
      description: 'A URL to the JSON Schema for this object.',
      examples: ['/api/v1/schemas/UserInput.json'],
      format: 'uri',
      readOnly: true,
      type: 'string'
    },
    email: {
      format: 'email',
      type: 'string'
    },
    login: {
      type: 'string'
    },
    password: {
      type: 'string'
    },
    password_confirmation: {
      type: 'string'
    }
  },
  required: ['login', 'email', 'password', 'password_confirmation'],
  type: 'object'
} as const

export const $UserRole = {
  enum: ['Visitor', 'Contributor', 'Maintainer', 'Admin'],
  title: 'UserRole',
  type: 'string'
} as const

export const $UserShortIdentity = {
  additionalProperties: false,
  properties: {
    alias: {
      type: 'string'
    },
    name: {
      type: 'string'
    }
  },
  required: ['name', 'alias'],
  type: 'object'
} as const
