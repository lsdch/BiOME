// This file is auto-generated by @hey-api/openapi-ts

export const $AuthenticationResponse = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/AuthenticationResponse.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        auth_token: {
            description: 'JSON Web Token',
            examples: ['xxxxx.yyyyy.zzzzz'],
            type: 'string'
        },
        auth_token_expiration: {
            description: 'Time at which auth token expires',
            format: 'date-time',
            type: 'string'
        },
        messages: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        refresh_token: {
            description: 'Session refresh token',
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/User'
        }
    },
    required: ['messages', 'user', 'auth_token', 'refresh_token', 'auth_token_expiration'],
    type: 'object'
} as const;

export const $Coordinates = {
    additionalProperties: false,
    properties: {
        latitude: {
            examples: [39.1137],
            format: 'float',
            maximum: 90,
            minimum: -90,
            type: 'number'
        },
        longitude: {
            examples: [9.5064],
            format: 'float',
            maximum: 180,
            minimum: -180,
            type: 'number'
        },
        precision: {
            '$ref': '#/components/schemas/CoordinatesPrecision',
            description: 'Where the coordinates point to'
        }
    },
    required: ['precision', 'latitude', 'longitude'],
    type: 'object'
} as const;

export const $CoordinatesPrecision = {
    enum: ['<100m', '<1km', '<10km', '10-100km', 'Unknown'],
    title: 'CoordinatesPrecision',
    type: 'string'
} as const;

export const $Country = {
    additionalProperties: false,
    properties: {
        code: {
            examples: ['DE'],
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        name: {
            examples: ['Germany'],
            type: 'string'
        }
    },
    required: ['id', 'name', 'code'],
    type: 'object'
} as const;

export const $CurrentUserResponse = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/CurrentUserResponse.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        auth_token: {
            description: 'JSON Web Token',
            examples: ['xxxxx.yyyyy.zzzzz'],
            type: 'string'
        },
        auth_token_expiration: {
            description: 'Time at which auth token expires',
            format: 'date-time',
            type: 'string'
        },
        refresh_token: {
            description: 'Session refresh token',
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/User'
        }
    },
    required: ['user', 'auth_token', 'refresh_token', 'auth_token_expiration'],
    type: 'object'
} as const;

export const $EmailSettings = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/EmailSettings.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        from_address: {
            format: 'email',
            type: 'string'
        },
        from_name: {
            type: 'string'
        },
        host: {
            description: 'SMTP domain that handles email sending',
            format: 'hostname',
            type: 'string'
        },
        password: {
            description: 'SMTP password',
            type: 'string'
        },
        port: {
            description: 'SMTP port',
            format: 'int32',
            minimum: 1,
            type: 'integer'
        },
        user: {
            description: 'SMTP login',
            format: 'uri',
            type: 'string'
        }
    },
    required: ['from_name', 'from_address', 'host', 'port', 'user', 'password'],
    type: 'object'
} as const;

export const $EmailSettingsInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/EmailSettingsInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        from_address: {
            format: 'email',
            type: 'string'
        },
        from_name: {
            type: 'string'
        },
        host: {
            description: 'SMTP domain that handles email sending',
            format: 'hostname',
            type: 'string'
        },
        password: {
            description: 'SMTP password',
            type: 'string'
        },
        port: {
            description: 'SMTP port',
            format: 'int32',
            minimum: 1,
            type: 'integer'
        },
        user: {
            description: 'SMTP login',
            format: 'uri',
            type: 'string'
        }
    },
    required: ['from_name', 'from_address', 'host', 'port', 'user', 'password'],
    type: 'object'
} as const;

export const $ErrorDetail = {
    additionalProperties: false,
    properties: {
        location: {
            description: "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
            type: 'string'
        },
        message: {
            description: 'Error message text',
            type: 'string'
        },
        value: {
            description: 'The value at the given location'
        }
    },
    type: 'object'
} as const;

export const $ErrorModel = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/ErrorModel.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        detail: {
            description: 'A human-readable explanation specific to this occurrence of the problem.',
            examples: ['Property foo is required but is missing.'],
            type: 'string'
        },
        errors: {
            description: 'Optional list of individual error details',
            items: {
                '$ref': '#/components/schemas/ErrorDetail'
            },
            type: 'array'
        },
        instance: {
            description: 'A URI reference that identifies the specific occurrence of the problem.',
            examples: ['https://example.com/error-log/abc123'],
            format: 'uri',
            type: 'string'
        },
        status: {
            description: 'HTTP status code',
            examples: [400],
            format: 'int64',
            type: 'integer'
        },
        title: {
            description: 'A short, human-readable summary of the problem type. This value should not change between occurrences of the error.',
            examples: ['Bad Request'],
            type: 'string'
        },
        type: {
            default: 'about:blank',
            description: 'A URI reference to human-readable documentation for the error.',
            examples: ['https://example.com/errors/example'],
            format: 'uri',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $HabitatGroup = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/HabitatGroup.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        depends: {
            '$ref': '#/components/schemas/OptionalHabitatRecord'
        },
        elements: {
            items: {
                '$ref': '#/components/schemas/HabitatRecord'
            },
            type: 'array'
        },
        exclusive_elements: {
            type: 'boolean'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        label: {
            description: 'Name for the group of habitat tags',
            examples: ['Water flow'],
            type: 'string'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        }
    },
    required: ['id', 'label', 'exclusive_elements', 'depends', 'elements', 'meta'],
    type: 'object'
} as const;

export const $HabitatGroupInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/HabitatGroupInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        depends: {
            description: 'Habitat tag that this group is a refinement of',
            examples: ['Aquatic, Surface'],
            type: 'string'
        },
        elements: {
            items: {
                '$ref': '#/components/schemas/HabitatInput'
            },
            type: 'array'
        },
        exclusive_elements: {
            type: 'boolean'
        },
        label: {
            description: 'Name for the group of habitat tags',
            examples: ['Water flow'],
            maxLength: 32,
            minLength: 3,
            type: 'string'
        }
    },
    required: ['label'],
    type: 'object'
} as const;

export const $HabitatGroupUpdate = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/HabitatGroupUpdate.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        depends: {
            type: ['string', 'null']
        },
        exclusive_elements: {
            type: 'boolean'
        },
        label: {
            type: 'string'
        }
    },
    required: ['depends'],
    type: 'object'
} as const;

export const $HabitatInput = {
    additionalProperties: false,
    properties: {
        description: {
            description: 'Optional habitat description',
            type: 'string'
        },
        incompatible: {
            description: 'List of habitat labels this habitat is incompatible with.',
            examples: [['Lentic']],
            items: {
                type: 'string'
            },
            type: 'array'
        },
        label: {
            description: 'A short label for the habitat.',
            examples: ['Lotic'],
            maxLength: 32,
            minLength: 3,
            type: 'string'
        }
    },
    required: ['label'],
    type: 'object'
} as const;

export const $HabitatRecord = {
    additionalProperties: false,
    properties: {
        description: {
            description: 'Optional habitat description',
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        incompatible: {
            items: {
                '$ref': '#/components/schemas/HabitatRecord'
            },
            type: 'array'
        },
        label: {
            description: 'A short label for the habitat.',
            examples: ['Lotic'],
            maxLength: 32,
            minLength: 3,
            type: 'string'
        }
    },
    required: ['id', 'label'],
    type: 'object'
} as const;

export const $ImportProcess = {
    additionalProperties: false,
    properties: {
        GBIF_ID: {
            format: 'int64',
            type: 'integer'
        },
        done: {
            type: 'boolean'
        },
        error: {},
        expected: {
            format: 'int64',
            type: 'integer'
        },
        imported: {
            format: 'int64',
            type: 'integer'
        },
        name: {
            type: 'string'
        },
        rank: {
            '$ref': '#/components/schemas/TaxonRank'
        },
        started: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['name', 'GBIF_ID', 'expected', 'imported', 'rank', 'started', 'done', 'error'],
    type: 'object'
} as const;

export const $ImportRequestGBIF = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/ImportRequestGBIF.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        children: {
            description: 'Import whole clade, including the taxon descendants',
            type: 'boolean'
        },
        key: {
            description: 'Target GBIF taxon key',
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['key', 'children'],
    type: 'object'
} as const;

export const $InstanceSettings = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/InstanceSettings.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        allow_contributor_signup: {
            description: 'Whether requests to contribute to the database can be made.',
            type: 'boolean'
        },
        description: {
            type: 'string'
        },
        name: {
            description: 'The name of this database platform',
            type: 'string'
        },
        public: {
            description: 'Whether the platform is accessible to unauthenticated users',
            type: 'boolean'
        }
    },
    required: ['description', 'name', 'public', 'allow_contributor_signup'],
    type: 'object'
} as const;

export const $InstanceSettingsInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/InstanceSettingsInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        allow_contributor_signup: {
            description: 'Whether requests to contribute to the database can be made.',
            type: 'boolean'
        },
        description: {
            type: ['string', 'null']
        },
        name: {
            description: 'The name of this database platform',
            type: 'string'
        },
        public: {
            description: 'Whether the platform is accessible to unauthenticated users',
            type: 'boolean'
        }
    },
    required: ['name', 'public', 'allow_contributor_signup'],
    type: 'object'
} as const;

export const $Institution = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/Institution.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        code: {
            examples: ['LEHNA'],
            maxLength: 12,
            minLength: 2,
            type: 'string'
        },
        description: {
            examples: ['Where this database was born.'],
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        kind: {
            '$ref': '#/components/schemas/InstitutionKind',
            examples: ['Lab']
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        name: {
            examples: ["Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"],
            maxLength: 128,
            minLength: 10,
            type: 'string'
        },
        people: {
            description: 'Known members of this institution',
            items: {
                '$ref': '#/components/schemas/PersonUser'
            },
            type: 'array'
        }
    },
    required: ['meta', 'id', 'name', 'code', 'kind'],
    type: 'object'
} as const;

export const $InstitutionInner = {
    additionalProperties: false,
    properties: {
        code: {
            examples: ['LEHNA'],
            maxLength: 12,
            minLength: 2,
            type: 'string'
        },
        description: {
            examples: ['Where this database was born.'],
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        kind: {
            '$ref': '#/components/schemas/InstitutionKind',
            examples: ['Lab']
        },
        name: {
            examples: ["Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"],
            maxLength: 128,
            minLength: 10,
            type: 'string'
        }
    },
    required: ['id', 'name', 'code', 'kind'],
    type: 'object'
} as const;

export const $InstitutionInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/InstitutionInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        code: {
            examples: ['LEHNA'],
            maxLength: 12,
            minLength: 2,
            type: 'string'
        },
        description: {
            examples: ['Where this database was born.'],
            type: 'string'
        },
        kind: {
            '$ref': '#/components/schemas/InstitutionKind',
            examples: ['Lab']
        },
        name: {
            examples: ["Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"],
            maxLength: 128,
            minLength: 10,
            type: 'string'
        }
    },
    required: ['name', 'code', 'kind'],
    type: 'object'
} as const;

export const $InstitutionKind = {
    enum: ['Lab', 'FundingAgency', 'SequencingPlatform', 'Other'],
    title: 'InstitutionKind',
    type: 'string'
} as const;

export const $InstitutionUpdate = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/InstitutionUpdate.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        code: {
            examples: ['LEHNA'],
            type: 'string'
        },
        description: {
            examples: ['Where this database was born.'],
            type: ['string', 'null']
        },
        kind: {
            '$ref': '#/components/schemas/InstitutionKind',
            examples: ['Lab'],
            type: ['', 'null']
        },
        name: {
            examples: ["Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $InvitationInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/InvitationInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        email: {
            description: 'E-mail address of the recipient of the invitation',
            format: 'email',
            type: 'string'
        },
        handler: {
            '$ref': '#/components/schemas/URL',
            description: 'A URL template with a {token} parameter, which implements the UI to validate the invitation token and fill a registration form.',
            examples: ['http://example.com/register/{token}'],
            format: 'uri-template'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        }
    },
    required: ['email', 'role'],
    type: 'object'
} as const;

export const $InvitationLink = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/InvitationLink.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        invitation_link: {
            '$ref': '#/components/schemas/URL',
            description: 'The generated URL containing a registration token that can be shared to the invitee.'
        }
    },
    required: ['invitation_link'],
    type: 'object'
} as const;

export const $Lineage = {
    additionalProperties: false,
    properties: {
        class: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        family: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        genus: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        kingdom: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        order: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        phylum: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        species: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        subspecies: {
            '$ref': '#/components/schemas/OptionalTaxon'
        }
    },
    type: 'object'
} as const;

export const $LogoutInputBody = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/LogoutInputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        refresh_token: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $Meta = {
    additionalProperties: false,
    properties: {
        created: {
            format: 'date-time',
            type: 'string'
        },
        created_by: {
            '$ref': '#/components/schemas/UserShortIdentity'
        },
        last_updated: {
            format: 'date-time',
            type: 'string'
        },
        modified: {
            format: 'date-time',
            type: 'string'
        },
        updated_by: {
            '$ref': '#/components/schemas/UserShortIdentity'
        }
    },
    required: ['created', 'last_updated'],
    type: 'object'
} as const;

export const $OptionalHabitatRecord = {
    additionalProperties: false,
    properties: {
        description: {
            description: 'Optional habitat description',
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        incompatible: {
            items: {
                '$ref': '#/components/schemas/HabitatRecord'
            },
            type: 'array'
        },
        label: {
            description: 'A short label for the habitat.',
            examples: ['Lotic'],
            maxLength: 32,
            minLength: 3,
            type: 'string'
        }
    },
    required: ['id', 'label'],
    type: ['object', 'null']
} as const;

export const $OptionalPerson = {
    additionalProperties: false,
    properties: {
        alias: {
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        contact: {
            format: 'email',
            type: 'string'
        },
        first_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        full_name: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        last_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        }
    },
    required: ['id', 'full_name', 'alias', 'contact', 'comment', 'first_name', 'last_name'],
    type: 'object'
} as const;

export const $OptionalTaxon = {
    additionalProperties: false,
    properties: {
        GBIF_ID: {
            examples: [2206247],
            format: 'int64',
            type: 'integer'
        },
        anchor: {
            type: 'boolean'
        },
        authorship: {
            examples: ['(Linnaeus, 1758)'],
            type: 'string'
        },
        children_count: {
            format: 'int64',
            type: 'integer'
        },
        code: {
            examples: ['ASEaquaticus'],
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        name: {
            examples: ['Asellus aquaticus'],
            type: 'string'
        },
        rank: {
            '$ref': '#/components/schemas/TaxonRank',
            examples: ['Species']
        },
        status: {
            '$ref': '#/components/schemas/TaxonStatus',
            examples: ['Accepted']
        }
    },
    required: ['id', 'code', 'anchor', 'children_count', 'meta', 'name', 'status', 'rank'],
    type: ['object', 'null']
} as const;

export const $OptionalUserInner = {
    additionalProperties: false,
    properties: {
        email: {
            format: 'email',
            type: 'string'
        },
        email_confirmed: {
            type: 'boolean'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        login: {
            type: 'string'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        }
    },
    required: ['id', 'email', 'login', 'role', 'email_confirmed'],
    type: ['object', 'null']
} as const;

export const $PasswordInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/PasswordInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        password: {
            description: 'Your new password',
            type: 'string'
        },
        password_confirmation: {
            description: 'New password confirmation',
            type: 'string'
        }
    },
    required: ['password', 'password_confirmation'],
    type: 'object'
} as const;

export const $PasswordResetRequest = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/PasswordResetRequest.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        email: {
            format: 'email',
            type: 'string'
        },
        handler: {
            description: 'A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.',
            format: 'uri',
            type: 'string'
        }
    },
    required: ['email'],
    type: 'object'
} as const;

export const $PendingUserRequest = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/PendingUserRequest.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        ID: {
            type: 'string'
        },
        created_on: {
            format: 'date-time',
            type: 'string'
        },
        email: {
            format: 'email',
            type: 'string'
        },
        email_verified: {
            type: 'boolean'
        },
        identity: {
            '$ref': '#/components/schemas/PendingUserRequestPersonStruct'
        },
        institution: {
            type: 'string'
        },
        motive: {
            type: 'string'
        }
    },
    required: ['ID', 'identity', 'created_on', 'email_verified', 'email'],
    type: 'object'
} as const;

export const $PendingUserRequestInput = {
    additionalProperties: false,
    properties: {
        email: {
            format: 'email',
            type: 'string'
        },
        identity: {
            '$ref': '#/components/schemas/PersonIdentity'
        },
        institution: {
            type: 'string'
        },
        motive: {
            type: 'string'
        }
    },
    required: ['identity', 'email'],
    type: 'object'
} as const;

export const $PendingUserRequestPersonStruct = {
    additionalProperties: false,
    properties: {
        first_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        last_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        }
    },
    required: ['first_name', 'last_name'],
    type: 'object'
} as const;

export const $Person = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/Person.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        contact: {
            format: 'email',
            type: 'string'
        },
        first_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        full_name: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        institutions: {
            items: {
                '$ref': '#/components/schemas/InstitutionInner'
            },
            type: 'array'
        },
        last_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        },
        user: {
            '$ref': '#/components/schemas/OptionalUserInner'
        }
    },
    required: ['institutions', 'meta', 'user', 'id', 'full_name', 'alias', 'contact', 'comment', 'first_name', 'last_name'],
    type: 'object'
} as const;

export const $PersonIdentity = {
    additionalProperties: false,
    properties: {
        first_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        last_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        }
    },
    required: ['first_name', 'last_name'],
    type: 'object'
} as const;

export const $PersonInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/PersonInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        contact: {
            format: 'email',
            type: 'string'
        },
        first_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        institutions: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        last_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        }
    },
    required: ['institutions', 'first_name', 'last_name'],
    type: 'object'
} as const;

export const $PersonUpdate = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/PersonUpdate.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        comment: {
            type: ['string', 'null']
        },
        contact: {
            type: ['string', 'null']
        },
        first_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        institutions: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        last_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $PersonUser = {
    additionalProperties: false,
    properties: {
        alias: {
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        contact: {
            format: 'email',
            type: 'string'
        },
        first_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        full_name: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        last_name: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        },
        user: {
            '$ref': '#/components/schemas/OptionalUserInner'
        }
    },
    required: ['user', 'id', 'full_name', 'alias', 'contact', 'comment', 'first_name', 'last_name'],
    type: 'object'
} as const;

export const $RefreshTokenBody = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/RefreshTokenBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        refresh_token: {
            type: 'string'
        }
    },
    required: ['refresh_token'],
    type: 'object'
} as const;

export const $RegisterInputBody = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/RegisterInputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/PendingUserRequestInput'
        },
        verification_url: {
            description: 'A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.',
            format: 'uri',
            type: 'string'
        }
    },
    required: ['data', 'verification_url'],
    type: 'object'
} as const;

export const $ResendEmailConfirmationInputBody = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/ResendEmailConfirmationInputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        email: {
            format: 'email',
            type: 'string'
        },
        verification_url: {
            description: 'A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.',
            format: 'uri',
            type: 'string'
        }
    },
    required: ['email', 'verification_url'],
    type: 'object'
} as const;

export const $SecuritySettings = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/SecuritySettings.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        invitation_token_lifetime: {
            description: 'Invitation token lifetime in days',
            format: 'int32',
            minimum: 1,
            type: 'integer'
        },
        min_password_strength: {
            description: 'The level of complexity required for account passwords.',
            format: 'int32',
            maximum: 5,
            minimum: 3,
            type: 'integer'
        },
        refresh_token_lifetime: {
            description: 'User session lifetime in hours',
            format: 'int32',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['min_password_strength', 'refresh_token_lifetime', 'invitation_token_lifetime'],
    type: 'object'
} as const;

export const $SecuritySettingsInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/SecuritySettingsInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        invitation_token_lifetime: {
            description: 'Invitation token lifetime in days',
            format: 'int32',
            minimum: 1,
            type: 'integer'
        },
        min_password_strength: {
            description: 'The level of complexity required for account passwords.',
            format: 'int32',
            maximum: 5,
            minimum: 3,
            type: 'integer'
        },
        refresh_token_lifetime: {
            description: 'User session lifetime in hours',
            format: 'int32',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['min_password_strength', 'refresh_token_lifetime', 'invitation_token_lifetime'],
    type: 'object'
} as const;

export const $Site = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/Site.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        access_point: {
            type: 'string'
        },
        altitude: {
            format: 'int64',
            type: 'integer'
        },
        code: {
            maxLength: 8,
            minLength: 4,
            type: 'string'
        },
        coordinates: {
            '$ref': '#/components/schemas/Coordinates'
        },
        country: {
            '$ref': '#/components/schemas/Country'
        },
        datasets: {
            items: {
                '$ref': '#/components/schemas/SiteDatasetInner'
            },
            type: 'array'
        },
        description: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        locality: {
            type: 'string'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        name: {
            minLength: 4,
            type: 'string'
        }
    },
    required: ['datasets', 'meta', 'id', 'name', 'code', 'description', 'coordinates', 'country'],
    type: 'object'
} as const;

export const $SiteDataset = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/SiteDataset.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        label: {
            type: 'string'
        },
        maintainers: {
            items: {
                '$ref': '#/components/schemas/PersonUser'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        sites: {
            items: {
                '$ref': '#/components/schemas/SiteItem'
            },
            type: 'array'
        },
        slug: {
            type: 'string'
        }
    },
    required: ['sites', 'maintainers', 'meta', 'id', 'label', 'slug', 'description'],
    type: 'object'
} as const;

export const $SiteDatasetInner = {
    additionalProperties: false,
    properties: {
        description: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        label: {
            type: 'string'
        },
        slug: {
            type: 'string'
        }
    },
    required: ['id', 'label', 'slug', 'description'],
    type: 'object'
} as const;

export const $SiteDatasetInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/SiteDatasetInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        description: {
            type: 'string'
        },
        label: {
            maxLength: 32,
            minLength: 4,
            type: 'string'
        },
        maintainers: {
            description: 'Dataset maintainers identified by their person alias. Dataset creator is always a maintainer by default.',
            items: {
                type: 'string'
            },
            type: 'array'
        },
        new_sites: {
            description: 'New sites to include in the dataset',
            items: {
                '$ref': '#/components/schemas/SiteInput'
            },
            type: 'array'
        },
        sites: {
            description: 'Existing site codes to include in the dataset',
            items: {
                type: 'string'
            },
            type: 'array'
        }
    },
    required: ['label', 'maintainers'],
    type: 'object'
} as const;

export const $SiteDatasetUpdate = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/SiteDatasetUpdate.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        description: {
            type: ['string', 'null']
        },
        label: {
            maxLength: 32,
            minLength: 4,
            type: 'string'
        },
        maintainers: {
            description: 'Dataset maintainers identified by their person alias. Dataset creator is always a maintainer by default.',
            items: {
                type: 'string'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $SiteInput = {
    additionalProperties: false,
    properties: {
        access_point: {
            type: 'string'
        },
        altitude: {
            description: 'Site altitude in meters',
            format: 'int32',
            type: 'integer'
        },
        code: {
            description: 'A short unique uppercase alphanumeric identifier',
            examples: ['SITE89'],
            maxLength: 10,
            minLength: 4,
            pattern: '[A-Z0-9]+',
            patternDescription: 'alphanum',
            type: 'string'
        },
        coordinates: {
            '$ref': '#/components/schemas/Coordinates',
            description: 'Site coordinates in decimal degrees'
        },
        country_code: {
            examples: ['FR'],
            format: 'country-code',
            pattern: '[A-Z]{2}',
            type: 'string'
        },
        description: {
            type: 'string'
        },
        locality: {
            description: 'Nearest populated place',
            type: 'string'
        },
        name: {
            minLength: 4,
            type: 'string'
        }
    },
    required: ['name', 'code', 'coordinates', 'country_code'],
    type: 'object'
} as const;

export const $SiteItem = {
    additionalProperties: false,
    properties: {
        access_point: {
            type: 'string'
        },
        altitude: {
            format: 'int64',
            type: 'integer'
        },
        code: {
            maxLength: 8,
            minLength: 4,
            type: 'string'
        },
        coordinates: {
            '$ref': '#/components/schemas/Coordinates'
        },
        country: {
            '$ref': '#/components/schemas/Country'
        },
        description: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        locality: {
            type: 'string'
        },
        name: {
            minLength: 4,
            type: 'string'
        }
    },
    required: ['id', 'name', 'code', 'description', 'coordinates', 'country'],
    type: 'object'
} as const;

export const $SiteUpdate = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/SiteUpdate.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        access_point: {
            type: ['string', 'null']
        },
        altitude: {
            description: 'Site altitude in meters',
            format: 'int32',
            type: ['integer', 'null']
        },
        code: {
            description: 'A short unique uppercase alphanumeric identifier',
            examples: ['SITE89'],
            maxLength: 10,
            minLength: 4,
            pattern: '[A-Z0-9]+',
            patternDescription: 'alphanum',
            type: 'string'
        },
        coordinates: {
            '$ref': '#/components/schemas/Coordinates',
            description: 'Site coordinates in decimal degrees'
        },
        country_code: {
            examples: ['FR'],
            format: 'country-code',
            pattern: '[A-Z]{2}',
            type: 'string'
        },
        description: {
            type: ['string', 'null']
        },
        locality: {
            description: 'Nearest populated place',
            type: ['string', 'null']
        },
        name: {
            minLength: 4,
            type: 'string'
        }
    },
    required: ['name', 'code', 'coordinates', 'country_code'],
    type: 'object'
} as const;

export const $Taxon = {
    additionalProperties: false,
    properties: {
        GBIF_ID: {
            examples: [2206247],
            format: 'int64',
            type: 'integer'
        },
        anchor: {
            type: 'boolean'
        },
        authorship: {
            examples: ['(Linnaeus, 1758)'],
            type: 'string'
        },
        children_count: {
            format: 'int64',
            type: 'integer'
        },
        code: {
            examples: ['ASEaquaticus'],
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        name: {
            examples: ['Asellus aquaticus'],
            type: 'string'
        },
        rank: {
            '$ref': '#/components/schemas/TaxonRank',
            examples: ['Species']
        },
        status: {
            '$ref': '#/components/schemas/TaxonStatus',
            examples: ['Accepted']
        }
    },
    required: ['id', 'code', 'anchor', 'children_count', 'meta', 'name', 'status', 'rank'],
    type: 'object'
} as const;

export const $TaxonInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/TaxonInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        authorship: {
            examples: ['(Linnaeus, 1758)'],
            type: 'string'
        },
        code: {
            examples: ['Asellus_aquaticus'],
            minLength: 4,
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        name: {
            examples: ['Asellus aquaticus'],
            type: 'string'
        },
        parent: {
            type: 'string'
        },
        rank: {
            '$ref': '#/components/schemas/TaxonRank',
            examples: ['Species']
        },
        status: {
            '$ref': '#/components/schemas/TaxonStatus',
            examples: ['Accepted']
        }
    },
    required: ['parent', 'name', 'status', 'rank'],
    type: 'object'
} as const;

export const $TaxonRank = {
    enum: ['Kingdom', 'Phylum', 'Class', 'Order', 'Family', 'Genus', 'Species', 'Subspecies'],
    title: 'TaxonRank',
    type: 'string'
} as const;

export const $TaxonStatus = {
    enum: ['Accepted', 'Unreferenced', 'Unclassified'],
    title: 'TaxonStatus',
    type: 'string'
} as const;

export const $TaxonUpdate = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/TaxonUpdate.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        authorship: {
            type: ['string', 'null']
        },
        code: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            type: 'string'
        },
        rank: {
            '$ref': '#/components/schemas/TaxonRank'
        },
        status: {
            '$ref': '#/components/schemas/TaxonStatus'
        }
    },
    type: 'object'
} as const;

export const $TaxonWithLineage = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/TaxonWithLineage.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        GBIF_ID: {
            examples: [2206247],
            format: 'int64',
            type: 'integer'
        },
        anchor: {
            type: 'boolean'
        },
        authorship: {
            examples: ['(Linnaeus, 1758)'],
            type: 'string'
        },
        children: {
            items: {
                '$ref': '#/components/schemas/Taxon'
            },
            type: 'array'
        },
        children_count: {
            format: 'int64',
            type: 'integer'
        },
        code: {
            examples: ['ASEaquaticus'],
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        lineage: {
            '$ref': '#/components/schemas/Lineage'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        name: {
            examples: ['Asellus aquaticus'],
            type: 'string'
        },
        parent: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        rank: {
            '$ref': '#/components/schemas/TaxonRank',
            examples: ['Species']
        },
        status: {
            '$ref': '#/components/schemas/TaxonStatus',
            examples: ['Accepted']
        }
    },
    required: ['lineage', 'id', 'code', 'anchor', 'children_count', 'meta', 'name', 'status', 'rank'],
    type: 'object'
} as const;

export const $TaxonWithParentRef = {
    additionalProperties: false,
    properties: {
        GBIF_ID: {
            examples: [2206247],
            format: 'int64',
            type: 'integer'
        },
        anchor: {
            type: 'boolean'
        },
        authorship: {
            examples: ['(Linnaeus, 1758)'],
            type: 'string'
        },
        children_count: {
            format: 'int64',
            type: 'integer'
        },
        code: {
            examples: ['ASEaquaticus'],
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        name: {
            examples: ['Asellus aquaticus'],
            type: 'string'
        },
        parent: {
            type: 'string'
        },
        rank: {
            '$ref': '#/components/schemas/TaxonRank',
            examples: ['Species']
        },
        status: {
            '$ref': '#/components/schemas/TaxonStatus',
            examples: ['Accepted']
        }
    },
    required: ['parent', 'id', 'code', 'anchor', 'children_count', 'meta', 'name', 'status', 'rank'],
    type: 'object'
} as const;

export const $TaxonWithRelatives = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/TaxonWithRelatives.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        GBIF_ID: {
            examples: [2206247],
            format: 'int64',
            type: 'integer'
        },
        anchor: {
            type: 'boolean'
        },
        authorship: {
            examples: ['(Linnaeus, 1758)'],
            type: 'string'
        },
        children: {
            items: {
                '$ref': '#/components/schemas/Taxon'
            },
            type: 'array'
        },
        children_count: {
            format: 'int64',
            type: 'integer'
        },
        code: {
            examples: ['ASEaquaticus'],
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        name: {
            examples: ['Asellus aquaticus'],
            type: 'string'
        },
        parent: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        rank: {
            '$ref': '#/components/schemas/TaxonRank',
            examples: ['Species']
        },
        status: {
            '$ref': '#/components/schemas/TaxonStatus',
            examples: ['Accepted']
        }
    },
    required: ['id', 'code', 'anchor', 'children_count', 'meta', 'name', 'status', 'rank'],
    type: 'object'
} as const;

export const $Taxonomy = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/Taxonomy.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        GBIF_ID: {
            examples: [2206247],
            format: 'int64',
            type: 'integer'
        },
        anchor: {
            type: 'boolean'
        },
        authorship: {
            examples: ['(Linnaeus, 1758)'],
            type: 'string'
        },
        children: {
            items: {
                '$ref': '#/components/schemas/Taxonomy'
            },
            type: 'array'
        },
        children_count: {
            format: 'int64',
            type: 'integer'
        },
        code: {
            examples: ['ASEaquaticus'],
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        meta: {
            '$ref': '#/components/schemas/Meta'
        },
        name: {
            examples: ['Asellus aquaticus'],
            type: 'string'
        },
        parent: {
            '$ref': '#/components/schemas/OptionalTaxon'
        },
        rank: {
            '$ref': '#/components/schemas/TaxonRank',
            examples: ['Species']
        },
        status: {
            '$ref': '#/components/schemas/TaxonStatus',
            examples: ['Accepted']
        }
    },
    required: ['id', 'code', 'anchor', 'children_count', 'meta', 'name', 'status', 'rank'],
    type: 'object'
} as const;

export const $URL = {
    description: 'A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.',
    format: 'uri',
    type: 'string'
} as const;

export const $UpdatePasswordInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/UpdatePasswordInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        new_password: {
            '$ref': '#/components/schemas/PasswordInput'
        },
        password: {
            description: 'Your current password',
            type: 'string'
        }
    },
    required: ['password', 'new_password'],
    type: 'object'
} as const;

export const $User = {
    additionalProperties: false,
    properties: {
        email: {
            format: 'email',
            type: 'string'
        },
        email_confirmed: {
            type: 'boolean'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        identity: {
            '$ref': '#/components/schemas/OptionalPerson'
        },
        login: {
            type: 'string'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        }
    },
    required: ['identity', 'id', 'email', 'login', 'role', 'email_confirmed'],
    type: 'object'
} as const;

export const $UserCredentials = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/UserCredentials.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        identifier: {
            type: 'string'
        },
        password: {
            type: 'string'
        }
    },
    required: ['identifier', 'password'],
    type: 'object'
} as const;

export const $UserInner = {
    additionalProperties: false,
    properties: {
        email: {
            format: 'email',
            type: 'string'
        },
        email_confirmed: {
            type: 'boolean'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        login: {
            type: 'string'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        }
    },
    required: ['id', 'email', 'login', 'role', 'email_confirmed'],
    type: 'object'
} as const;

export const $UserInput = {
    additionalProperties: false,
    properties: {
        '$schema': {
            description: 'A URL to the JSON Schema for this object.',
            examples: ['/api/v1/schemas/UserInput.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        email: {
            format: 'email',
            type: 'string'
        },
        login: {
            type: 'string'
        },
        password: {
            description: 'Your new password',
            type: 'string'
        },
        password_confirmation: {
            description: 'New password confirmation',
            type: 'string'
        }
    },
    required: ['login', 'email', 'password', 'password_confirmation'],
    type: 'object'
} as const;

export const $UserRole = {
    enum: ['Visitor', 'Contributor', 'Maintainer', 'Admin'],
    title: 'UserRole',
    type: 'string'
} as const;

export const $UserShortIdentity = {
    additionalProperties: false,
    properties: {
        alias: {
            type: 'string'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        login: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    required: ['id', 'login', 'name', 'alias'],
    type: 'object'
} as const;