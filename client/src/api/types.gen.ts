// This file is auto-generated by @hey-api/openapi-ts

export type AuthenticationResponse = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    User: User;
    messages: Array<(string)> | null;
    /**
     * JSON Web Token
     */
    token: string;
};

export type Coordinates = {
    latitude: number;
    longitude: number;
    /**
     * Where the coordinates point to
     */
    precision: CoordinatesPrecision;
};

export type CoordinatesPrecision = '<100m' | '<1km' | '<10km' | '10-100km' | 'Unknown';

export type Country = {
    code: string;
    id: string;
    name: string;
};

export type CurrentUserResponse = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * JSON Web Token
     */
    token: string;
    user: User;
};

export type EmailSettings = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * SMTP domain that handles email sending
     */
    host: string;
    /**
     * SMTP password
     */
    password: string;
    /**
     * SMTP port
     */
    port: number;
    /**
     * SMTP login
     */
    user: string;
};

export type EmailSettingsInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * SMTP domain that handles email sending
     */
    host: string;
    /**
     * SMTP password
     */
    password: string;
    /**
     * SMTP port
     */
    port: number;
    /**
     * SMTP login
     */
    user: string;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type HabitatGroup = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    depends: OptionalHabitatRecord;
    elements: Array<HabitatRecord> | null;
    exclusive_elements: boolean;
    id: string;
    /**
     * Name for the group of habitat tags
     */
    label: string;
    meta: Meta;
};

export type HabitatGroupInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Habitat tag that this group is a refinement of
     */
    depends?: string;
    elements?: Array<HabitatInput> | null;
    exclusive_elements?: boolean;
    /**
     * Name for the group of habitat tags
     */
    label: string;
};

export type HabitatGroupUpdate = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    depends: string | null;
    exclusive_elements?: boolean;
    label?: string;
};

export type HabitatInput = {
    /**
     * Optional habitat description
     */
    description?: string;
    /**
     * List of habitat labels this habitat is incompatible with.
     */
    incompatible?: Array<(string)> | null;
    /**
     * A short label for the habitat.
     */
    label: string;
};

export type HabitatRecord = {
    /**
     * Optional habitat description
     */
    description?: string;
    id: string;
    incompatible?: Array<HabitatRecord> | null;
    /**
     * A short label for the habitat.
     */
    label: string;
};

export type ImportProcess = {
    GBIF_ID: number;
    done: boolean;
    error: unknown;
    expected: number;
    imported: number;
    name: string;
    rank: TaxonRank;
    started: Date;
};

export type ImportRequestGbif = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Import whole clade, including the taxon descendants
     */
    children: boolean;
    /**
     * Target GBIF taxon key
     */
    key: number;
};

export type InstanceSettings = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Whether requests to contribute to the database can be made.
     */
    allow_contributor_signup: boolean;
    description: string;
    /**
     * The name of this database platform
     */
    name: string;
    /**
     * Whether the platform is accessible to unauthenticated users
     */
    public: boolean;
};

export type InstanceSettingsInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Whether requests to contribute to the database can be made.
     */
    allow_contributor_signup: boolean;
    description: string | null;
    /**
     * The name of this database platform
     */
    name: string;
    /**
     * Whether the platform is accessible to unauthenticated users
     */
    public: boolean;
};

export type Institution = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    code: string;
    description?: string;
    id: string;
    kind: InstitutionKind;
    meta: Meta;
    name: string;
    /**
     * Known members of this institution
     */
    people?: Array<PersonUser> | null;
};

export type InstitutionInner = {
    code: string;
    description?: string;
    id: string;
    kind: InstitutionKind;
    name: string;
};

export type InstitutionInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    code: string;
    description?: string;
    kind: InstitutionKind;
    name: string;
};

export type InstitutionKind = 'Lab' | 'FundingAgency' | 'SequencingPlatform' | 'Other';

export type InstitutionUpdate = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    code?: string;
    description?: string | null;
    kind?: InstitutionKind | null;
    name?: string;
};

export type InvitationInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    dest: string;
    /**
     * A URL template with a {token} parameter, which implements the UI to validate the invitation token and fill a registration form.
     */
    handler?: Url;
    role: UserRole;
};

export type InvitationLink = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * The generated URL containing a registration token that can be shared to the invitee.
     */
    invitation_link: Url;
};

export type Lineage = {
    class?: OptionalTaxon;
    family?: OptionalTaxon;
    genus?: OptionalTaxon;
    kingdom?: OptionalTaxon;
    order?: OptionalTaxon;
    phylum?: OptionalTaxon;
    species?: OptionalTaxon;
    subspecies?: OptionalTaxon;
};

export type Meta = {
    created: Date;
    created_by?: UserShortIdentity;
    last_updated: Date;
    modified?: Date;
    updated_by?: UserShortIdentity;
};

export type OptionalHabitatRecord = {
    /**
     * Optional habitat description
     */
    description?: string;
    id: string;
    incompatible?: Array<HabitatRecord> | null;
    /**
     * A short label for the habitat.
     */
    label: string;
} | null;

export type OptionalPerson = {
    alias: string;
    comment: string;
    contact: string;
    first_name: string;
    full_name: string;
    id: string;
    last_name: string;
    role?: UserRole;
};

export type OptionalTaxon = {
    GBIF_ID?: number;
    anchor: boolean;
    authorship?: string;
    children_count: number;
    code: string;
    comment?: string;
    id: string;
    meta: Meta;
    name: string;
    rank: TaxonRank;
    status: TaxonStatus;
} | null;

export type OptionalUserInner = {
    email: string;
    email_confirmed: boolean;
    id: string;
    is_active: boolean;
    login: string;
    role: UserRole;
};

export type PasswordInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    password: string;
    password_confirmation: string;
};

export type Person = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    alias: string;
    comment: string;
    contact: string;
    first_name: string;
    full_name: string;
    id: string;
    institutions: Array<InstitutionInner> | null;
    last_name: string;
    meta: Meta;
    role?: UserRole;
    user?: OptionalUserInner;
};

export type PersonInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    alias?: string;
    comment?: string;
    contact?: string;
    first_name: string;
    institutions: Array<(string)> | null;
    last_name: string;
};

export type PersonStruct = {
    first_name: string;
    institution?: string;
    last_name: string;
};

export type PersonUpdate = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    alias?: string;
    comment?: string | null;
    contact?: string | null;
    first_name?: string;
    institutions?: Array<(string)> | null;
    last_name?: string;
};

export type PersonUser = {
    alias: string;
    comment: string;
    contact: string;
    first_name: string;
    full_name: string;
    id: string;
    last_name: string;
    role?: UserRole;
    user?: OptionalUserInner;
};

export type RegisterInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.
     */
    handler?: Url;
    identity: PersonStruct;
    motive: string;
    user: UserInput;
};

export type RequestPasswordResetInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    email: string;
    /**
     * A URL where a form to set the new password is available
     */
    handler?: Url;
};

export type ResendEmailConfirmationInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    email: string;
    /**
     * A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.
     */
    handler?: Url;
};

export type SecuritySettings = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Account manipulation token lifetime in hours
     */
    account_token_lifetime: number;
    /**
     * User session lifetime in minutes
     */
    auth_token_lifetime: number;
    /**
     * Used to verify session tokens. Changing it will revoke all currently active user sessions.
     */
    jwt_secret_key: string;
    /**
     * The level of complexity required for account passwords.
     */
    min_password_strength: number;
};

export type SecuritySettingsInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Account manipulation token lifetime in hours
     */
    account_token_lifetime: number;
    /**
     * User session lifetime in minutes
     */
    auth_token_lifetime: number;
    /**
     * Used to verify session tokens. Changing it will revoke all currently active user sessions.
     */
    jwt_secret_key: string;
    /**
     * The level of complexity required for account passwords.
     */
    min_password_strength: number;
};

export type Site = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    access_point?: string;
    altitude?: number;
    code: string;
    coordinates: Coordinates;
    country: Country;
    datasets: Array<SiteDatasetInner> | null;
    description: string;
    id: string;
    locality?: string;
    meta: Meta;
    name: string;
};

export type SiteDataset = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    description: string;
    id: string;
    label: string;
    maintainers: Array<PersonUser> | null;
    meta: Meta;
    sites: Array<SiteItem> | null;
    slug: string;
};

export type SiteDatasetInner = {
    description: string;
    id: string;
    label: string;
    slug: string;
};

export type SiteDatasetInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    description?: string;
    label: string;
    /**
     * Dataset maintainers identified by their person alias. Dataset creator is always a maintainer by default.
     */
    maintainers: Array<(string)> | null;
    /**
     * New sites to include in the dataset
     */
    new_sites?: Array<SiteInput> | null;
    /**
     * Existing site codes to include in the dataset
     */
    sites?: Array<(string)> | null;
};

export type SiteInput = {
    access_point?: string;
    /**
     * Site altitude in meters
     */
    altitude?: number;
    /**
     * A short unique uppercase alphanumeric identifier
     */
    code: string;
    /**
     * Site coordinates in decimal degrees
     */
    coordinates: Coordinates;
    country_code: string;
    description?: string;
    /**
     * Nearest populated place
     */
    locality?: string;
    name: string;
};

export type SiteItem = {
    access_point?: string;
    altitude?: number;
    code: string;
    coordinates: Coordinates;
    country: Country;
    description: string;
    id: string;
    locality?: string;
    name: string;
};

export type Taxon = {
    GBIF_ID?: number;
    anchor: boolean;
    authorship?: string;
    children_count: number;
    code: string;
    comment?: string;
    id: string;
    meta: Meta;
    name: string;
    rank: TaxonRank;
    status: TaxonStatus;
};

export type TaxonInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    authorship?: string;
    code?: string;
    comment?: string;
    name: string;
    parent: string;
    rank: TaxonRank;
    status: TaxonStatus;
};

export type TaxonRank = 'Kingdom' | 'Phylum' | 'Class' | 'Order' | 'Family' | 'Genus' | 'Species' | 'Subspecies';

export type TaxonStatus = 'Accepted' | 'Unreferenced' | 'Unclassified';

export type TaxonUpdate = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    authorship?: string | null;
    code?: string;
    name?: string;
    parent?: string;
    rank?: TaxonRank;
    status?: TaxonStatus;
};

export type TaxonWithLineage = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    GBIF_ID?: number;
    anchor: boolean;
    authorship?: string;
    children?: Array<Taxon> | null;
    children_count: number;
    code: string;
    comment?: string;
    id: string;
    lineage: Lineage;
    meta: Meta;
    name: string;
    parent?: OptionalTaxon;
    rank: TaxonRank;
    status: TaxonStatus;
};

export type TaxonWithParentRef = {
    GBIF_ID?: number;
    anchor: boolean;
    authorship?: string;
    children_count: number;
    code: string;
    comment?: string;
    id: string;
    meta: Meta;
    name: string;
    parent: string;
    rank: TaxonRank;
    status: TaxonStatus;
};

export type TaxonWithRelatives = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    GBIF_ID?: number;
    anchor: boolean;
    authorship?: string;
    children?: Array<Taxon> | null;
    children_count: number;
    code: string;
    comment?: string;
    id: string;
    meta: Meta;
    name: string;
    parent?: OptionalTaxon;
    rank: TaxonRank;
    status: TaxonStatus;
};

export type Taxonomy = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    GBIF_ID?: number;
    anchor: boolean;
    authorship?: string;
    children?: Array<Taxonomy> | null;
    children_count: number;
    code: string;
    comment?: string;
    id: string;
    meta: Meta;
    name: string;
    parent?: OptionalTaxon;
    rank: TaxonRank;
    status: TaxonStatus;
};

export type Url = string | null;

export type UpdatePasswordInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    new_password: PasswordInput;
    password: string;
};

export type User = {
    email: string;
    email_confirmed: boolean;
    id: string;
    identity: OptionalPerson;
    is_active: boolean;
    login: string;
    role: UserRole;
};

export type UserCredentials = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    identifier: string;
    password: string;
};

export type UserInput = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    email: string;
    login: string;
    password: string;
    password_confirmation: string;
};

export type UserRole = 'Visitor' | 'Contributor' | 'Maintainer' | 'Admin';

export type UserShortIdentity = {
    alias: string;
    id: string;
    login: string;
    name: string;
};

export type GetAccessPointsData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type GetAccessPointsResponse = Array<(string)> | null;

export type GetAccessPointsError = unknown;

export type ListSiteDatasetsData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type ListSiteDatasetsResponse = Array<SiteDataset> | null;

export type ListSiteDatasetsError = ErrorModel;

export type CreateSiteDatasetData = {
    body: SiteDatasetInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type CreateSiteDatasetResponse = SiteDataset;

export type CreateSiteDatasetError = ErrorModel;

export type ListHabitatGroupsData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type ListHabitatGroupsResponse = Array<HabitatGroup> | null;

export type ListHabitatGroupsError = ErrorModel;

export type CreateHabitatGroupData = {
    body: HabitatGroupInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type CreateHabitatGroupResponse = HabitatGroup;

export type CreateHabitatGroupError = ErrorModel;

export type DeleteHabitatGroupData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        code: string;
    };
};

export type DeleteHabitatGroupResponse = HabitatGroup;

export type DeleteHabitatGroupError = ErrorModel;

export type UpdateHabitatGroupData = {
    body: HabitatGroupUpdate;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        code: string;
    };
};

export type UpdateHabitatGroupResponse = HabitatGroup;

export type UpdateHabitatGroupError = ErrorModel;

export type ListCountriesData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type ListCountriesResponse = Array<Country> | null;

export type ListCountriesError = ErrorModel;

export type ListSitesData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type ListSitesResponse = Array<Site> | null;

export type ListSitesError = ErrorModel;

export type GetSiteData = {
    body: Site;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        code: string;
    };
};

export type GetSiteResponse = Site;

export type GetSiteError = ErrorModel;

export type CurrentUserData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type CurrentUserResponse2 = CurrentUserResponse | void;

export type CurrentUserError = ErrorModel;

export type ConfirmEmailData = {
    query?: {
        token?: string;
    };
};

export type ConfirmEmailResponse = AuthenticationResponse;

export type ConfirmEmailError = ErrorModel;

export type ResendEmailConfirmationData = {
    body: ResendEmailConfirmationInputBody;
};

export type ResendEmailConfirmationResponse = void;

export type ResendEmailConfirmationError = ErrorModel;

export type RequestPasswordResetData = {
    body: RequestPasswordResetInputBody;
};

export type RequestPasswordResetResponse = void;

export type RequestPasswordResetError = ErrorModel;

export type LoginData = {
    body: UserCredentials;
};

export type LoginResponse = AuthenticationResponse;

export type LoginError = ErrorModel;

export type LogoutResponse = string;

export type LogoutError = ErrorModel;

export type UpdatePasswordData = {
    body: UpdatePasswordInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type UpdatePasswordResponse = void;

export type UpdatePasswordError = ErrorModel;

export type ValidatePasswordTokenData = {
    path: {
        token: string;
    };
};

export type ValidatePasswordTokenResponse = void;

export type ValidatePasswordTokenError = ErrorModel;

export type ResetPasswordData = {
    body: PasswordInput;
    path: {
        token: string;
    };
};

export type ResetPasswordResponse = void;

export type ResetPasswordError = ErrorModel;

export type RegisterData = {
    body: RegisterInputBody;
};

export type RegisterResponse = unknown;

export type RegisterError = ErrorModel;

export type ClaimInvitationData = {
    body: UserInput;
    path: {
        token: string;
    };
};

export type ClaimInvitationResponse = AuthenticationResponse;

export type ClaimInvitationError = ErrorModel;

export type ListAnchorsData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type ListAnchorsResponse = Array<TaxonWithParentRef> | null;

export type ListAnchorsError = ErrorModel;

export type ImportGbifData = {
    body: ImportRequestGbif;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type ImportGbifResponse = void;

export type ImportGbifError = unknown;

export type MonitorGbifResponse = Array<({
    data: {
        [key: string]: ImportProcess;
    };
    /**
     * The event name.
     */
    event: "state";
    /**
     * The event ID.
     */
    id?: number;
    /**
     * The retry time in milliseconds.
     */
    retry?: number;
})>;

export type MonitorGbifError = unknown;

export type ListInstitutionsData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type ListInstitutionsResponse = Array<Institution> | null;

export type ListInstitutionsError = ErrorModel;

export type CreateInstitutionData = {
    body: InstitutionInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type CreateInstitutionResponse = Institution;

export type CreateInstitutionError = ErrorModel;

export type DeleteInstitutionData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        code: string;
    };
};

export type DeleteInstitutionResponse = Institution;

export type DeleteInstitutionError = ErrorModel;

export type UpdateInstitutionData = {
    body: InstitutionUpdate;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        code: string;
    };
};

export type UpdateInstitutionResponse = Institution;

export type UpdateInstitutionError = ErrorModel;

export type ListPersonsData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type ListPersonsResponse = Array<Person> | null;

export type ListPersonsError = ErrorModel;

export type CreatePersonData = {
    body: PersonInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type CreatePersonResponse = Person;

export type CreatePersonError = ErrorModel;

export type DeletePersonData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        id: string;
    };
};

export type DeletePersonResponse = Person;

export type DeletePersonError = ErrorModel;

export type UpdatePersonData = {
    body: PersonUpdate;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        id: string;
    };
};

export type UpdatePersonResponse = Person;

export type UpdatePersonError = ErrorModel;

export type InvitePersonData = {
    body: InvitationInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        id: string;
    };
};

export type InvitePersonResponse = InvitationLink;

export type InvitePersonError = ErrorModel;

export type EmailSettingsData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type EmailSettingsResponse = EmailSettings;

export type EmailSettingsError = ErrorModel;

export type UpdateEmailSettingsData = {
    body: EmailSettingsInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type UpdateEmailSettingsResponse = EmailSettings;

export type UpdateEmailSettingsError = ErrorModel;

export type TestSmtpData = {
    body: EmailSettingsInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type TestSmtpResponse = boolean;

export type TestSmtpError = ErrorModel;

export type SetAppIconData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type SetAppIconResponse = string;

export type SetAppIconError = ErrorModel;

export type InstanceSettingsResponse = InstanceSettings;

export type InstanceSettingsError = ErrorModel;

export type UpdateInstanceSettingsData = {
    body: InstanceSettingsInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type UpdateInstanceSettingsResponse = InstanceSettings;

export type UpdateInstanceSettingsError = ErrorModel;

export type SecuritySettingsData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type SecuritySettingsResponse = SecuritySettings;

export type SecuritySettingsError = ErrorModel;

export type UpdateSecuritySettingsData = {
    body: SecuritySettingsInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type UpdateSecuritySettingsResponse = SecuritySettings;

export type UpdateSecuritySettingsError = ErrorModel;

export type GetTaxonomyData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    query?: {
        /**
         * Taxon code or UUID
         */
        identifier?: string;
        'max-depth'?: TaxonRank;
    };
};

export type GetTaxonomyResponse = Taxonomy;

export type GetTaxonomyError = ErrorModel;

export type ListTaxaData = {
    query?: {
        anchor?: boolean;
        limit?: number;
        parent?: string;
        pattern?: string;
        rank?: TaxonRank;
        status?: TaxonStatus;
    };
};

export type ListTaxaResponse = Array<TaxonWithParentRef> | null;

export type ListTaxaError = ErrorModel;

export type CreateTaxonData = {
    body: TaxonInput;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
};

export type CreateTaxonResponse = TaxonWithRelatives;

export type CreateTaxonError = ErrorModel;

export type DeleteTaxonData = {
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        code: string;
    };
};

export type DeleteTaxonResponse = TaxonWithRelatives;

export type DeleteTaxonError = ErrorModel;

export type GetTaxonData = {
    path: {
        code: string;
    };
};

export type GetTaxonResponse = TaxonWithLineage;

export type GetTaxonError = ErrorModel;

export type UpdateTaxonData = {
    body: TaxonUpdate;
    headers?: {
        /**
         * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
         */
        Authorization?: string;
    };
    path: {
        code: string;
    };
};

export type UpdateTaxonResponse = TaxonWithLineage;

export type UpdateTaxonError = ErrorModel;

export type $OpenApiTs = {
    '/access-points': {
        get: {
            req: GetAccessPointsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<(string)> | null;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
    };
    '/datasets': {
        get: {
            req: ListSiteDatasetsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<SiteDataset> | null;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        post: {
            req: CreateSiteDatasetData;
            res: {
                /**
                 * OK
                 */
                '200': SiteDataset;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/habitats': {
        get: {
            req: ListHabitatGroupsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<HabitatGroup> | null;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        post: {
            req: CreateHabitatGroupData;
            res: {
                /**
                 * OK
                 */
                '200': HabitatGroup;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/habitats/{code}': {
        delete: {
            req: DeleteHabitatGroupData;
            res: {
                /**
                 * OK
                 */
                '200': HabitatGroup;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        patch: {
            req: UpdateHabitatGroupData;
            res: {
                /**
                 * OK
                 */
                '200': HabitatGroup;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/locations/countries': {
        get: {
            req: ListCountriesData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Country> | null;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/sites': {
        get: {
            req: ListSitesData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Site> | null;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/sites/{code}': {
        get: {
            req: GetSiteData;
            res: {
                /**
                 * OK
                 */
                '200': Site;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account': {
        get: {
            req: CurrentUserData;
            res: {
                /**
                 * The currently authenticated user
                 */
                '200': CurrentUserResponse;
                /**
                 * No active user session
                 */
                '204': void;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account/email-confirmation': {
        get: {
            req: ConfirmEmailData;
            res: {
                /**
                 * OK
                 */
                '200': AuthenticationResponse;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account/email-confirmation/resend': {
        post: {
            req: ResendEmailConfirmationData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account/forgotten-password': {
        post: {
            req: RequestPasswordResetData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account/login': {
        post: {
            req: LoginData;
            res: {
                /**
                 * OK
                 */
                '200': AuthenticationResponse;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account/logout': {
        post: {
            res: {
                /**
                 * No Content
                 */
                '204': string;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account/password': {
        post: {
            req: UpdatePasswordData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
                /**
                 * Unauthorized
                 */
                '401': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account/password-reset/{token}': {
        get: {
            req: ValidatePasswordTokenData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        post: {
            req: ResetPasswordData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account/register': {
        post: {
            req: RegisterData;
            res: {
                /**
                 * Created
                 */
                '201': unknown;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/account/register/{token}': {
        post: {
            req: ClaimInvitationData;
            res: {
                /**
                 * OK
                 */
                '200': AuthenticationResponse;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/anchors/': {
        get: {
            req: ListAnchorsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<TaxonWithParentRef> | null;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/import/taxonomy': {
        put: {
            req: ImportGbifData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
    };
    '/import/taxonomy/monitor': {
        get: {
            res: {
                /**
                 * OK
                 */
                '200': Array<({
    data: {
        [key: string]: ImportProcess;
    };
    /**
     * The event name.
     */
    event: "state";
    /**
     * The event ID.
     */
    id?: number;
    /**
     * The retry time in milliseconds.
     */
    retry?: number;
})>;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
    };
    '/institutions': {
        get: {
            req: ListInstitutionsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Institution> | null;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        post: {
            req: CreateInstitutionData;
            res: {
                /**
                 * OK
                 */
                '200': Institution;
                /**
                 * Bad Request
                 */
                '400': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/institutions/{code}': {
        delete: {
            req: DeleteInstitutionData;
            res: {
                /**
                 * OK
                 */
                '200': Institution;
                /**
                 * Bad Request
                 */
                '400': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        patch: {
            req: UpdateInstitutionData;
            res: {
                /**
                 * OK
                 */
                '200': Institution;
                /**
                 * Bad Request
                 */
                '400': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/persons': {
        get: {
            req: ListPersonsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Person> | null;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        post: {
            req: CreatePersonData;
            res: {
                /**
                 * OK
                 */
                '200': Person;
                /**
                 * Bad Request
                 */
                '400': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/persons/{id}': {
        delete: {
            req: DeletePersonData;
            res: {
                /**
                 * OK
                 */
                '200': Person;
                /**
                 * Bad Request
                 */
                '400': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        patch: {
            req: UpdatePersonData;
            res: {
                /**
                 * OK
                 */
                '200': Person;
                /**
                 * Bad Request
                 */
                '400': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/persons/{id}/invite': {
        post: {
            req: InvitePersonData;
            res: {
                /**
                 * OK
                 */
                '200': InvitationLink;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/settings/emailing': {
        get: {
            req: EmailSettingsData;
            res: {
                /**
                 * OK
                 */
                '200': EmailSettings;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        post: {
            req: UpdateEmailSettingsData;
            res: {
                /**
                 * OK
                 */
                '200': EmailSettings;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/settings/emailing/test-dial': {
        post: {
            req: TestSmtpData;
            res: {
                /**
                 * OK
                 */
                '200': boolean;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/settings/icon': {
        post: {
            req: SetAppIconData;
            res: {
                /**
                 * No Content
                 */
                '204': string;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/settings/instance': {
        get: {
            res: {
                /**
                 * OK
                 */
                '200': InstanceSettings;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        post: {
            req: UpdateInstanceSettingsData;
            res: {
                /**
                 * OK
                 */
                '200': InstanceSettings;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/settings/security': {
        get: {
            req: SecuritySettingsData;
            res: {
                /**
                 * OK
                 */
                '200': SecuritySettings;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        post: {
            req: UpdateSecuritySettingsData;
            res: {
                /**
                 * OK
                 */
                '200': SecuritySettings;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/taxonomy': {
        get: {
            req: GetTaxonomyData;
            res: {
                /**
                 * OK
                 */
                '200': Taxonomy;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/taxonomy/taxa': {
        get: {
            req: ListTaxaData;
            res: {
                /**
                 * OK
                 */
                '200': Array<TaxonWithParentRef> | null;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        post: {
            req: CreateTaxonData;
            res: {
                /**
                 * OK
                 */
                '200': TaxonWithRelatives;
                /**
                 * Bad Request
                 */
                '400': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
    '/taxonomy/taxa/{code}': {
        delete: {
            req: DeleteTaxonData;
            res: {
                /**
                 * OK
                 */
                '200': TaxonWithRelatives;
                /**
                 * Unauthorized
                 */
                '401': ErrorModel;
                /**
                 * Not Found
                 */
                '404': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        get: {
            req: GetTaxonData;
            res: {
                /**
                 * OK
                 */
                '200': TaxonWithLineage;
                /**
                 * Not Found
                 */
                '404': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
        patch: {
            req: UpdateTaxonData;
            res: {
                /**
                 * OK
                 */
                '200': TaxonWithLineage;
                /**
                 * Bad Request
                 */
                '400': ErrorModel;
                /**
                 * Unauthorized
                 */
                '401': ErrorModel;
                /**
                 * Not Found
                 */
                '404': ErrorModel;
                /**
                 * Unprocessable Entity
                 */
                '422': ErrorModel;
                /**
                 * Internal Server Error
                 */
                '500': ErrorModel;
            };
        };
    };
};