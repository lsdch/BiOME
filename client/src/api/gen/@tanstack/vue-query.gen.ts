// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  SamplingService,
  AccountService,
  TaxonomyGbifService,
  SamplesService,
  ReferencesService,
  DataSourcesService,
  DatasetsService,
  EventsService,
  SequencesService,
  ServicesService,
  HabitatsService,
  LocationService,
  OccurrencesService,
  PeopleService,
  SettingsService,
  TaxonomyService
} from '../sdk.gen'
import { queryOptions, type UseMutationOptions } from '@tanstack/vue-query'
import type {
  ListAbioticParametersData,
  CreateAbioticParameterData,
  CreateAbioticParameterError,
  CreateAbioticParameterResponse,
  DeleteAbioticParameterData,
  DeleteAbioticParameterError,
  DeleteAbioticParameterResponse,
  UpdateAbioticParameterData,
  UpdateAbioticParameterError,
  UpdateAbioticParameterResponse,
  GetAccessPointsData,
  CurrentUserData,
  ConfirmEmailData,
  ResendEmailVerificationData,
  ResendEmailVerificationError,
  ResendEmailVerificationResponse,
  RequestPasswordResetData,
  RequestPasswordResetError,
  RequestPasswordResetResponse,
  LoginData,
  LoginError,
  LoginResponse,
  LogoutData,
  LogoutError,
  LogoutResponse,
  UpdatePasswordData,
  UpdatePasswordError,
  UpdatePasswordResponse,
  ValidatePasswordTokenData,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  ListPendingUserRequestsData,
  DeletePendingUserRequestData,
  DeletePendingUserRequestError,
  DeletePendingUserRequestResponse,
  GetPendingUserRequestData,
  RefreshSessionData,
  RefreshSessionError,
  RefreshSessionResponse,
  RegisterData,
  RegisterError,
  RegisterResponse,
  ClaimInvitationData,
  ClaimInvitationError,
  ClaimInvitationResponse,
  ListAnchorsData,
  ListBioMaterialData,
  UpdateExternalBioMatData,
  UpdateExternalBioMatError,
  UpdateExternalBioMatResponse,
  CreateExternalBioMatData,
  CreateExternalBioMatError,
  CreateExternalBioMatResponse,
  DeleteBioMaterialData,
  DeleteBioMaterialError,
  DeleteBioMaterialResponse,
  GetBioMaterialData,
  CrossRefData,
  CrossRefBibSearchData,
  CrossRefBibSearchError,
  CrossRefBibSearchResponse,
  ListDataSourcesData,
  CreateDataSourceData,
  CreateDataSourceError,
  CreateDataSourceResponse,
  DeleteDataSourceData,
  DeleteDataSourceError,
  DeleteDataSourceResponse,
  UpdateDataSourceData,
  UpdateDataSourceError,
  UpdateDataSourceResponse,
  ListDatasetsData,
  UpdateDatasetData,
  UpdateDatasetError,
  UpdateDatasetResponse,
  ListOccurrenceDatasetsData,
  GetOccurrenceDatasetData,
  TogglePinDatasetData,
  TogglePinDatasetError,
  TogglePinDatasetResponse,
  ListSequenceDatasetsData,
  GetSequenceDatasetData,
  ListSiteDatasetsData,
  CreateSiteDatasetData,
  CreateSiteDatasetError,
  CreateSiteDatasetResponse,
  GetSiteDatasetData,
  DeleteEventData,
  DeleteEventError,
  DeleteEventResponse,
  UpdateEventData,
  UpdateEventError,
  UpdateEventResponse,
  UpdateSpottingData,
  UpdateSpottingError,
  UpdateSpottingResponse,
  ListFixativesData,
  CreateFixativeData,
  CreateFixativeError,
  CreateFixativeResponse,
  DeleteFixativeData,
  DeleteFixativeError,
  DeleteFixativeResponse,
  UpdateFixativeData,
  UpdateFixativeError,
  UpdateFixativeResponse,
  ListGenesData,
  CreateGeneData,
  CreateGeneError,
  CreateGeneResponse,
  DeleteGeneData,
  DeleteGeneError,
  DeleteGeneResponse,
  UpdateGeneData,
  UpdateGeneError,
  UpdateGeneResponse,
  ListGeoapifyUsageData,
  ListHabitatGroupsData,
  CreateHabitatGroupData,
  CreateHabitatGroupError,
  CreateHabitatGroupResponse,
  DeleteHabitatGroupData,
  DeleteHabitatGroupError,
  DeleteHabitatGroupResponse,
  UpdateHabitatGroupData,
  UpdateHabitatGroupError,
  UpdateHabitatGroupResponse,
  ImportGbifData,
  ImportGbifError,
  ImportGbifResponse,
  MonitorGbifData,
  CoordinatesToCountryData,
  CoordinatesToCountryError,
  CoordinatesToCountryResponse,
  ListCountriesData,
  GetSitesCountByCountryData,
  OccurrenceOverviewData,
  ListOrganisationsData,
  CreateOrganisationData,
  CreateOrganisationError,
  CreateOrganisationResponse,
  DeleteOrganisationData,
  DeleteOrganisationError,
  DeleteOrganisationResponse,
  UpdateOrganisationData,
  UpdateOrganisationError,
  UpdateOrganisationResponse,
  ListPersonsData,
  CreatePersonData,
  CreatePersonError,
  CreatePersonResponse,
  DeletePersonData,
  DeletePersonError,
  DeletePersonResponse,
  UpdatePersonData,
  UpdatePersonError,
  UpdatePersonResponse,
  InvitePersonData,
  InvitePersonError,
  InvitePersonResponse,
  ListProgramsData,
  CreateProgramData,
  CreateProgramError,
  CreateProgramResponse,
  DeleteProgramData,
  DeleteProgramError,
  DeleteProgramResponse,
  UpdateProgramData,
  UpdateProgramError,
  UpdateProgramResponse,
  ListArticlesData,
  CreateArticleData,
  CreateArticleError,
  CreateArticleResponse,
  DeleteArticleData,
  DeleteArticleError,
  DeleteArticleResponse,
  UpdateArticleData,
  UpdateArticleError,
  UpdateArticleResponse,
  ListSamplingMethodsData,
  CreateSamplingMethodData,
  CreateSamplingMethodError,
  CreateSamplingMethodResponse,
  DeleteSamplingMethodData,
  DeleteSamplingMethodError,
  DeleteSamplingMethodResponse,
  UpdateSamplingMethodData,
  UpdateSamplingMethodError,
  UpdateSamplingMethodResponse,
  CreateSamplingData,
  CreateSamplingError,
  CreateSamplingResponse,
  DeleteSamplingData,
  DeleteSamplingError,
  DeleteSamplingResponse,
  UpdateSamplingData,
  UpdateSamplingError,
  UpdateSamplingResponse,
  ListSequencesData,
  DeleteSequenceData,
  DeleteSequenceError,
  DeleteSequenceResponse,
  GetSequenceData,
  EmailSettingsData,
  UpdateEmailSettingsData,
  UpdateEmailSettingsError,
  UpdateEmailSettingsResponse,
  TestSmtpData,
  TestSmtpError,
  TestSmtpResponse,
  SetAppIconData,
  SetAppIconError,
  SetAppIconResponse,
  InstanceSettingsData,
  UpdateInstanceSettingsData,
  UpdateInstanceSettingsError,
  UpdateInstanceSettingsResponse,
  SecuritySettingsData,
  UpdateSecuritySettingsData,
  UpdateSecuritySettingsError,
  UpdateSecuritySettingsResponse,
  ServiceSettingsData,
  UpdateServiceSettingsData,
  UpdateServiceSettingsError,
  UpdateServiceSettingsResponse,
  ListSitesData,
  CreateSiteData,
  CreateSiteError,
  CreateSiteResponse,
  GetSiteData,
  UpdateSiteData,
  UpdateSiteError,
  UpdateSiteResponse,
  CreateEventData,
  CreateEventError,
  CreateEventResponse,
  GetTaxonomyData,
  ListTaxaData,
  CreateTaxonData,
  CreateTaxonError,
  CreateTaxonResponse,
  DeleteTaxonData,
  DeleteTaxonError,
  DeleteTaxonResponse,
  GetTaxonData,
  UpdateTaxonData,
  UpdateTaxonError,
  UpdateTaxonResponse
} from '../types.gen'
import { client as _heyApiClient } from '../client.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  }
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const listAbioticParametersQueryKey = (options?: Options<ListAbioticParametersData>) =>
  createQueryKey('listAbioticParameters', options)

export const listAbioticParametersOptions = (options?: Options<ListAbioticParametersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.listAbioticParameters({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listAbioticParametersQueryKey(options)
  })
}

export const createAbioticParameterQueryKey = (options: Options<CreateAbioticParameterData>) =>
  createQueryKey('createAbioticParameter', options)

export const createAbioticParameterOptions = (options: Options<CreateAbioticParameterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.createAbioticParameter({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createAbioticParameterQueryKey(options)
  })
}

export const createAbioticParameterMutation = (
  options?: Partial<Options<CreateAbioticParameterData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateAbioticParameterResponse,
    CreateAbioticParameterError,
    Options<CreateAbioticParameterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.createAbioticParameter({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteAbioticParameterMutation = (
  options?: Partial<Options<DeleteAbioticParameterData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAbioticParameterResponse,
    DeleteAbioticParameterError,
    Options<DeleteAbioticParameterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.deleteAbioticParameter({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateAbioticParameterMutation = (
  options?: Partial<Options<UpdateAbioticParameterData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateAbioticParameterResponse,
    UpdateAbioticParameterError,
    Options<UpdateAbioticParameterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.updateAbioticParameter({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getAccessPointsQueryKey = (options?: Options<GetAccessPointsData>) =>
  createQueryKey('getAccessPoints', options)

export const getAccessPointsOptions = (options?: Options<GetAccessPointsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.getAccessPoints({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getAccessPointsQueryKey(options)
  })
}

export const currentUserQueryKey = (options?: Options<CurrentUserData>) =>
  createQueryKey('currentUser', options)

export const currentUserOptions = (options?: Options<CurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.currentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: currentUserQueryKey(options)
  })
}

export const confirmEmailQueryKey = (options?: Options<ConfirmEmailData>) =>
  createQueryKey('confirmEmail', options)

export const confirmEmailOptions = (options?: Options<ConfirmEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.confirmEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: confirmEmailQueryKey(options)
  })
}

export const resendEmailVerificationQueryKey = (options: Options<ResendEmailVerificationData>) =>
  createQueryKey('resendEmailVerification', options)

export const resendEmailVerificationOptions = (options: Options<ResendEmailVerificationData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.resendEmailVerification({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: resendEmailVerificationQueryKey(options)
  })
}

export const resendEmailVerificationMutation = (
  options?: Partial<Options<ResendEmailVerificationData>>
) => {
  const mutationOptions: UseMutationOptions<
    ResendEmailVerificationResponse,
    ResendEmailVerificationError,
    Options<ResendEmailVerificationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.resendEmailVerification({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const requestPasswordResetQueryKey = (options: Options<RequestPasswordResetData>) =>
  createQueryKey('requestPasswordReset', options)

export const requestPasswordResetOptions = (options: Options<RequestPasswordResetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.requestPasswordReset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: requestPasswordResetQueryKey(options)
  })
}

export const requestPasswordResetMutation = (
  options?: Partial<Options<RequestPasswordResetData>>
) => {
  const mutationOptions: UseMutationOptions<
    RequestPasswordResetResponse,
    RequestPasswordResetError,
    Options<RequestPasswordResetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.requestPasswordReset({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const loginQueryKey = (options: Options<LoginData>) => createQueryKey('login', options)

export const loginOptions = (options: Options<LoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.login({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: loginQueryKey(options)
  })
}

export const loginMutation = (options?: Partial<Options<LoginData>>) => {
  const mutationOptions: UseMutationOptions<LoginResponse, LoginError, Options<LoginData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.login({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const logoutQueryKey = (options: Options<LogoutData>) => createQueryKey('logout', options)

export const logoutOptions = (options: Options<LogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.logout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: logoutQueryKey(options)
  })
}

export const logoutMutation = (options?: Partial<Options<LogoutData>>) => {
  const mutationOptions: UseMutationOptions<LogoutResponse, LogoutError, Options<LogoutData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.logout({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updatePasswordQueryKey = (options: Options<UpdatePasswordData>) =>
  createQueryKey('updatePassword', options)

export const updatePasswordOptions = (options: Options<UpdatePasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.updatePassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: updatePasswordQueryKey(options)
  })
}

export const updatePasswordMutation = (options?: Partial<Options<UpdatePasswordData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdatePasswordResponse,
    UpdatePasswordError,
    Options<UpdatePasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.updatePassword({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const validatePasswordTokenQueryKey = (options: Options<ValidatePasswordTokenData>) =>
  createQueryKey('validatePasswordToken', options)

export const validatePasswordTokenOptions = (options: Options<ValidatePasswordTokenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.validatePasswordToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: validatePasswordTokenQueryKey(options)
  })
}

export const resetPasswordQueryKey = (options: Options<ResetPasswordData>) =>
  createQueryKey('resetPassword', options)

export const resetPasswordOptions = (options: Options<ResetPasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.resetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: resetPasswordQueryKey(options)
  })
}

export const resetPasswordMutation = (options?: Partial<Options<ResetPasswordData>>) => {
  const mutationOptions: UseMutationOptions<
    ResetPasswordResponse,
    ResetPasswordError,
    Options<ResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.resetPassword({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listPendingUserRequestsQueryKey = (options?: Options<ListPendingUserRequestsData>) =>
  createQueryKey('listPendingUserRequests', options)

export const listPendingUserRequestsOptions = (options?: Options<ListPendingUserRequestsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.listPendingUserRequests({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listPendingUserRequestsQueryKey(options)
  })
}

export const deletePendingUserRequestMutation = (
  options?: Partial<Options<DeletePendingUserRequestData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeletePendingUserRequestResponse,
    DeletePendingUserRequestError,
    Options<DeletePendingUserRequestData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.deletePendingUserRequest({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getPendingUserRequestQueryKey = (options?: Options<GetPendingUserRequestData>) =>
  createQueryKey('getPendingUserRequest', options)

export const getPendingUserRequestOptions = (options?: Options<GetPendingUserRequestData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.getPendingUserRequest({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getPendingUserRequestQueryKey(options)
  })
}

export const refreshSessionQueryKey = (options: Options<RefreshSessionData>) =>
  createQueryKey('refreshSession', options)

export const refreshSessionOptions = (options: Options<RefreshSessionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.refreshSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: refreshSessionQueryKey(options)
  })
}

export const refreshSessionMutation = (options?: Partial<Options<RefreshSessionData>>) => {
  const mutationOptions: UseMutationOptions<
    RefreshSessionResponse,
    RefreshSessionError,
    Options<RefreshSessionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.refreshSession({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const registerQueryKey = (options: Options<RegisterData>) =>
  createQueryKey('register', options)

export const registerOptions = (options: Options<RegisterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.register({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: registerQueryKey(options)
  })
}

export const registerMutation = (options?: Partial<Options<RegisterData>>) => {
  const mutationOptions: UseMutationOptions<
    RegisterResponse,
    RegisterError,
    Options<RegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.register({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const claimInvitationQueryKey = (options: Options<ClaimInvitationData>) =>
  createQueryKey('claimInvitation', options)

export const claimInvitationOptions = (options: Options<ClaimInvitationData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.claimInvitation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: claimInvitationQueryKey(options)
  })
}

export const claimInvitationMutation = (options?: Partial<Options<ClaimInvitationData>>) => {
  const mutationOptions: UseMutationOptions<
    ClaimInvitationResponse,
    ClaimInvitationError,
    Options<ClaimInvitationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.claimInvitation({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listAnchorsQueryKey = (options?: Options<ListAnchorsData>) =>
  createQueryKey('listAnchors', options)

export const listAnchorsOptions = (options?: Options<ListAnchorsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyGbifService.listAnchors({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listAnchorsQueryKey(options)
  })
}

export const listBioMaterialQueryKey = (options?: Options<ListBioMaterialData>) =>
  createQueryKey('listBioMaterial', options)

export const listBioMaterialOptions = (options?: Options<ListBioMaterialData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplesService.listBioMaterial({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listBioMaterialQueryKey(options)
  })
}

export const updateExternalBioMatMutation = (
  options?: Partial<Options<UpdateExternalBioMatData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateExternalBioMatResponse,
    UpdateExternalBioMatError,
    Options<UpdateExternalBioMatData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplesService.updateExternalBioMat({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const createExternalBioMatQueryKey = (options: Options<CreateExternalBioMatData>) =>
  createQueryKey('createExternalBioMat', options)

export const createExternalBioMatOptions = (options: Options<CreateExternalBioMatData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplesService.createExternalBioMat({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createExternalBioMatQueryKey(options)
  })
}

export const createExternalBioMatMutation = (
  options?: Partial<Options<CreateExternalBioMatData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateExternalBioMatResponse,
    CreateExternalBioMatError,
    Options<CreateExternalBioMatData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplesService.createExternalBioMat({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteBioMaterialMutation = (options?: Partial<Options<DeleteBioMaterialData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteBioMaterialResponse,
    DeleteBioMaterialError,
    Options<DeleteBioMaterialData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplesService.deleteBioMaterial({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getBioMaterialQueryKey = (options: Options<GetBioMaterialData>) =>
  createQueryKey('getBioMaterial', options)

export const getBioMaterialOptions = (options: Options<GetBioMaterialData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplesService.getBioMaterial({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getBioMaterialQueryKey(options)
  })
}

export const crossRefQueryKey = (options: Options<CrossRefData>) =>
  createQueryKey('crossRef', options)

export const crossRefOptions = (options: Options<CrossRefData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ReferencesService.crossRef({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: crossRefQueryKey(options)
  })
}

export const crossRefBibSearchQueryKey = (options: Options<CrossRefBibSearchData>) =>
  createQueryKey('crossRefBibSearch', options)

export const crossRefBibSearchOptions = (options: Options<CrossRefBibSearchData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ReferencesService.crossRefBibSearch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: crossRefBibSearchQueryKey(options)
  })
}

export const crossRefBibSearchMutation = (options?: Partial<Options<CrossRefBibSearchData>>) => {
  const mutationOptions: UseMutationOptions<
    CrossRefBibSearchResponse,
    CrossRefBibSearchError,
    Options<CrossRefBibSearchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ReferencesService.crossRefBibSearch({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listDataSourcesQueryKey = (options?: Options<ListDataSourcesData>) =>
  createQueryKey('listDataSources', options)

export const listDataSourcesOptions = (options?: Options<ListDataSourcesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DataSourcesService.listDataSources({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listDataSourcesQueryKey(options)
  })
}

export const createDataSourceQueryKey = (options: Options<CreateDataSourceData>) =>
  createQueryKey('createDataSource', options)

export const createDataSourceOptions = (options: Options<CreateDataSourceData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DataSourcesService.createDataSource({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createDataSourceQueryKey(options)
  })
}

export const createDataSourceMutation = (options?: Partial<Options<CreateDataSourceData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateDataSourceResponse,
    CreateDataSourceError,
    Options<CreateDataSourceData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DataSourcesService.createDataSource({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteDataSourceMutation = (options?: Partial<Options<DeleteDataSourceData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteDataSourceResponse,
    DeleteDataSourceError,
    Options<DeleteDataSourceData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DataSourcesService.deleteDataSource({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateDataSourceMutation = (options?: Partial<Options<UpdateDataSourceData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateDataSourceResponse,
    UpdateDataSourceError,
    Options<UpdateDataSourceData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DataSourcesService.updateDataSource({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listDatasetsQueryKey = (options?: Options<ListDatasetsData>) =>
  createQueryKey('listDatasets', options)

export const listDatasetsOptions = (options?: Options<ListDatasetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.listDatasets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listDatasetsQueryKey(options)
  })
}

export const updateDatasetMutation = (options?: Partial<Options<UpdateDatasetData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateDatasetResponse,
    UpdateDatasetError,
    Options<UpdateDatasetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DatasetsService.updateDataset({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listOccurrenceDatasetsQueryKey = (options?: Options<ListOccurrenceDatasetsData>) =>
  createQueryKey('listOccurrenceDatasets', options)

export const listOccurrenceDatasetsOptions = (options?: Options<ListOccurrenceDatasetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.listOccurrenceDatasets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listOccurrenceDatasetsQueryKey(options)
  })
}

export const getOccurrenceDatasetQueryKey = (options: Options<GetOccurrenceDatasetData>) =>
  createQueryKey('getOccurrenceDataset', options)

export const getOccurrenceDatasetOptions = (options: Options<GetOccurrenceDatasetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.getOccurrenceDataset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getOccurrenceDatasetQueryKey(options)
  })
}

export const togglePinDatasetMutation = (options?: Partial<Options<TogglePinDatasetData>>) => {
  const mutationOptions: UseMutationOptions<
    TogglePinDatasetResponse,
    TogglePinDatasetError,
    Options<TogglePinDatasetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DatasetsService.togglePinDataset({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listSequenceDatasetsQueryKey = (options?: Options<ListSequenceDatasetsData>) =>
  createQueryKey('listSequenceDatasets', options)

export const listSequenceDatasetsOptions = (options?: Options<ListSequenceDatasetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.listSequenceDatasets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSequenceDatasetsQueryKey(options)
  })
}

export const getSequenceDatasetQueryKey = (options: Options<GetSequenceDatasetData>) =>
  createQueryKey('getSequenceDataset', options)

export const getSequenceDatasetOptions = (options: Options<GetSequenceDatasetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.getSequenceDataset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getSequenceDatasetQueryKey(options)
  })
}

export const listSiteDatasetsQueryKey = (options?: Options<ListSiteDatasetsData>) =>
  createQueryKey('listSiteDatasets', options)

export const listSiteDatasetsOptions = (options?: Options<ListSiteDatasetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.listSiteDatasets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSiteDatasetsQueryKey(options)
  })
}

export const createSiteDatasetQueryKey = (options: Options<CreateSiteDatasetData>) =>
  createQueryKey('createSiteDataset', options)

export const createSiteDatasetOptions = (options: Options<CreateSiteDatasetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.createSiteDataset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createSiteDatasetQueryKey(options)
  })
}

export const createSiteDatasetMutation = (options?: Partial<Options<CreateSiteDatasetData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateSiteDatasetResponse,
    CreateSiteDatasetError,
    Options<CreateSiteDatasetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DatasetsService.createSiteDataset({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getSiteDatasetQueryKey = (options: Options<GetSiteDatasetData>) =>
  createQueryKey('getSiteDataset', options)

export const getSiteDatasetOptions = (options: Options<GetSiteDatasetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.getSiteDataset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getSiteDatasetQueryKey(options)
  })
}

export const deleteEventMutation = (options?: Partial<Options<DeleteEventData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteEventResponse,
    DeleteEventError,
    Options<DeleteEventData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.deleteEvent({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateEventMutation = (options?: Partial<Options<UpdateEventData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateEventResponse,
    UpdateEventError,
    Options<UpdateEventData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.updateEvent({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateSpottingMutation = (options?: Partial<Options<UpdateSpottingData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateSpottingResponse,
    UpdateSpottingError,
    Options<UpdateSpottingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.updateSpotting({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listFixativesQueryKey = (options?: Options<ListFixativesData>) =>
  createQueryKey('listFixatives', options)

export const listFixativesOptions = (options?: Options<ListFixativesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.listFixatives({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listFixativesQueryKey(options)
  })
}

export const createFixativeQueryKey = (options: Options<CreateFixativeData>) =>
  createQueryKey('createFixative', options)

export const createFixativeOptions = (options: Options<CreateFixativeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.createFixative({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createFixativeQueryKey(options)
  })
}

export const createFixativeMutation = (options?: Partial<Options<CreateFixativeData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateFixativeResponse,
    CreateFixativeError,
    Options<CreateFixativeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.createFixative({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteFixativeMutation = (options?: Partial<Options<DeleteFixativeData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteFixativeResponse,
    DeleteFixativeError,
    Options<DeleteFixativeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.deleteFixative({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateFixativeMutation = (options?: Partial<Options<UpdateFixativeData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateFixativeResponse,
    UpdateFixativeError,
    Options<UpdateFixativeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.updateFixative({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listGenesQueryKey = (options?: Options<ListGenesData>) =>
  createQueryKey('listGenes', options)

export const listGenesOptions = (options?: Options<ListGenesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.listGenes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listGenesQueryKey(options)
  })
}

export const createGeneQueryKey = (options: Options<CreateGeneData>) =>
  createQueryKey('createGene', options)

export const createGeneOptions = (options: Options<CreateGeneData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.createGene({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createGeneQueryKey(options)
  })
}

export const createGeneMutation = (options?: Partial<Options<CreateGeneData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateGeneResponse,
    CreateGeneError,
    Options<CreateGeneData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.createGene({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteGeneMutation = (options?: Partial<Options<DeleteGeneData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteGeneResponse,
    DeleteGeneError,
    Options<DeleteGeneData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.deleteGene({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateGeneMutation = (options?: Partial<Options<UpdateGeneData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateGeneResponse,
    UpdateGeneError,
    Options<UpdateGeneData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.updateGene({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listGeoapifyUsageQueryKey = (options?: Options<ListGeoapifyUsageData>) =>
  createQueryKey('listGeoapifyUsage', options)

export const listGeoapifyUsageOptions = (options?: Options<ListGeoapifyUsageData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ServicesService.listGeoapifyUsage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listGeoapifyUsageQueryKey(options)
  })
}

export const listHabitatGroupsQueryKey = (options?: Options<ListHabitatGroupsData>) =>
  createQueryKey('listHabitatGroups', options)

export const listHabitatGroupsOptions = (options?: Options<ListHabitatGroupsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await HabitatsService.listHabitatGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listHabitatGroupsQueryKey(options)
  })
}

export const createHabitatGroupQueryKey = (options: Options<CreateHabitatGroupData>) =>
  createQueryKey('createHabitatGroup', options)

export const createHabitatGroupOptions = (options: Options<CreateHabitatGroupData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await HabitatsService.createHabitatGroup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createHabitatGroupQueryKey(options)
  })
}

export const createHabitatGroupMutation = (options?: Partial<Options<CreateHabitatGroupData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateHabitatGroupResponse,
    CreateHabitatGroupError,
    Options<CreateHabitatGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await HabitatsService.createHabitatGroup({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteHabitatGroupMutation = (options?: Partial<Options<DeleteHabitatGroupData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteHabitatGroupResponse,
    DeleteHabitatGroupError,
    Options<DeleteHabitatGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await HabitatsService.deleteHabitatGroup({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateHabitatGroupMutation = (options?: Partial<Options<UpdateHabitatGroupData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateHabitatGroupResponse,
    UpdateHabitatGroupError,
    Options<UpdateHabitatGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await HabitatsService.updateHabitatGroup({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const importGbifMutation = (options?: Partial<Options<ImportGbifData>>) => {
  const mutationOptions: UseMutationOptions<
    ImportGbifResponse,
    ImportGbifError,
    Options<ImportGbifData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await TaxonomyGbifService.importGbif({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const monitorGbifQueryKey = (options?: Options<MonitorGbifData>) =>
  createQueryKey('monitorGbif', options)

export const monitorGbifOptions = (options?: Options<MonitorGbifData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyGbifService.monitorGbif({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: monitorGbifQueryKey(options)
  })
}

export const coordinatesToCountryQueryKey = (options: Options<CoordinatesToCountryData>) =>
  createQueryKey('coordinatesToCountry', options)

export const coordinatesToCountryOptions = (options: Options<CoordinatesToCountryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.coordinatesToCountry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: coordinatesToCountryQueryKey(options)
  })
}

export const coordinatesToCountryMutation = (
  options?: Partial<Options<CoordinatesToCountryData>>
) => {
  const mutationOptions: UseMutationOptions<
    CoordinatesToCountryResponse,
    CoordinatesToCountryError,
    Options<CoordinatesToCountryData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LocationService.coordinatesToCountry({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listCountriesQueryKey = (options?: Options<ListCountriesData>) =>
  createQueryKey('listCountries', options)

export const listCountriesOptions = (options?: Options<ListCountriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.listCountries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listCountriesQueryKey(options)
  })
}

export const getSitesCountByCountryQueryKey = (options?: Options<GetSitesCountByCountryData>) =>
  createQueryKey('getSitesCountByCountry', options)

export const getSitesCountByCountryOptions = (options?: Options<GetSitesCountByCountryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.getSitesCountByCountry({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getSitesCountByCountryQueryKey(options)
  })
}

export const occurrenceOverviewQueryKey = (options?: Options<OccurrenceOverviewData>) =>
  createQueryKey('occurrenceOverview', options)

export const occurrenceOverviewOptions = (options?: Options<OccurrenceOverviewData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await OccurrencesService.occurrenceOverview({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: occurrenceOverviewQueryKey(options)
  })
}

export const listOrganisationsQueryKey = (options?: Options<ListOrganisationsData>) =>
  createQueryKey('listOrganisations', options)

export const listOrganisationsOptions = (options?: Options<ListOrganisationsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PeopleService.listOrganisations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listOrganisationsQueryKey(options)
  })
}

export const createOrganisationQueryKey = (options: Options<CreateOrganisationData>) =>
  createQueryKey('createOrganisation', options)

export const createOrganisationOptions = (options: Options<CreateOrganisationData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PeopleService.createOrganisation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createOrganisationQueryKey(options)
  })
}

export const createOrganisationMutation = (options?: Partial<Options<CreateOrganisationData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateOrganisationResponse,
    CreateOrganisationError,
    Options<CreateOrganisationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.createOrganisation({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteOrganisationMutation = (options?: Partial<Options<DeleteOrganisationData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteOrganisationResponse,
    DeleteOrganisationError,
    Options<DeleteOrganisationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.deleteOrganisation({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateOrganisationMutation = (options?: Partial<Options<UpdateOrganisationData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateOrganisationResponse,
    UpdateOrganisationError,
    Options<UpdateOrganisationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.updateOrganisation({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listPersonsQueryKey = (options?: Options<ListPersonsData>) =>
  createQueryKey('listPersons', options)

export const listPersonsOptions = (options?: Options<ListPersonsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PeopleService.listPersons({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listPersonsQueryKey(options)
  })
}

export const createPersonQueryKey = (options: Options<CreatePersonData>) =>
  createQueryKey('createPerson', options)

export const createPersonOptions = (options: Options<CreatePersonData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PeopleService.createPerson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createPersonQueryKey(options)
  })
}

export const createPersonMutation = (options?: Partial<Options<CreatePersonData>>) => {
  const mutationOptions: UseMutationOptions<
    CreatePersonResponse,
    CreatePersonError,
    Options<CreatePersonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.createPerson({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deletePersonMutation = (options?: Partial<Options<DeletePersonData>>) => {
  const mutationOptions: UseMutationOptions<
    DeletePersonResponse,
    DeletePersonError,
    Options<DeletePersonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.deletePerson({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updatePersonMutation = (options?: Partial<Options<UpdatePersonData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdatePersonResponse,
    UpdatePersonError,
    Options<UpdatePersonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.updatePerson({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const invitePersonQueryKey = (options: Options<InvitePersonData>) =>
  createQueryKey('invitePerson', options)

export const invitePersonOptions = (options: Options<InvitePersonData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PeopleService.invitePerson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: invitePersonQueryKey(options)
  })
}

export const invitePersonMutation = (options?: Partial<Options<InvitePersonData>>) => {
  const mutationOptions: UseMutationOptions<
    InvitePersonResponse,
    InvitePersonError,
    Options<InvitePersonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.invitePerson({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listProgramsQueryKey = (options?: Options<ListProgramsData>) =>
  createQueryKey('listPrograms', options)

export const listProgramsOptions = (options?: Options<ListProgramsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await EventsService.listPrograms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listProgramsQueryKey(options)
  })
}

export const createProgramQueryKey = (options: Options<CreateProgramData>) =>
  createQueryKey('createProgram', options)

export const createProgramOptions = (options: Options<CreateProgramData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await EventsService.createProgram({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createProgramQueryKey(options)
  })
}

export const createProgramMutation = (options?: Partial<Options<CreateProgramData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateProgramResponse,
    CreateProgramError,
    Options<CreateProgramData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.createProgram({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteProgramMutation = (options?: Partial<Options<DeleteProgramData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteProgramResponse,
    DeleteProgramError,
    Options<DeleteProgramData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.deleteProgram({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateProgramMutation = (options?: Partial<Options<UpdateProgramData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateProgramResponse,
    UpdateProgramError,
    Options<UpdateProgramData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.updateProgram({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listArticlesQueryKey = (options?: Options<ListArticlesData>) =>
  createQueryKey('listArticles', options)

export const listArticlesOptions = (options?: Options<ListArticlesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ReferencesService.listArticles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listArticlesQueryKey(options)
  })
}

export const createArticleQueryKey = (options: Options<CreateArticleData>) =>
  createQueryKey('createArticle', options)

export const createArticleOptions = (options: Options<CreateArticleData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ReferencesService.createArticle({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createArticleQueryKey(options)
  })
}

export const createArticleMutation = (options?: Partial<Options<CreateArticleData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateArticleResponse,
    CreateArticleError,
    Options<CreateArticleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ReferencesService.createArticle({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteArticleMutation = (options?: Partial<Options<DeleteArticleData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteArticleResponse,
    DeleteArticleError,
    Options<DeleteArticleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ReferencesService.deleteArticle({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateArticleMutation = (options?: Partial<Options<UpdateArticleData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateArticleResponse,
    UpdateArticleError,
    Options<UpdateArticleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ReferencesService.updateArticle({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listSamplingMethodsQueryKey = (options?: Options<ListSamplingMethodsData>) =>
  createQueryKey('listSamplingMethods', options)

export const listSamplingMethodsOptions = (options?: Options<ListSamplingMethodsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.listSamplingMethods({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSamplingMethodsQueryKey(options)
  })
}

export const createSamplingMethodQueryKey = (options: Options<CreateSamplingMethodData>) =>
  createQueryKey('createSamplingMethod', options)

export const createSamplingMethodOptions = (options: Options<CreateSamplingMethodData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.createSamplingMethod({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createSamplingMethodQueryKey(options)
  })
}

export const createSamplingMethodMutation = (
  options?: Partial<Options<CreateSamplingMethodData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateSamplingMethodResponse,
    CreateSamplingMethodError,
    Options<CreateSamplingMethodData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.createSamplingMethod({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteSamplingMethodMutation = (
  options?: Partial<Options<DeleteSamplingMethodData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteSamplingMethodResponse,
    DeleteSamplingMethodError,
    Options<DeleteSamplingMethodData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.deleteSamplingMethod({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateSamplingMethodMutation = (
  options?: Partial<Options<UpdateSamplingMethodData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateSamplingMethodResponse,
    UpdateSamplingMethodError,
    Options<UpdateSamplingMethodData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.updateSamplingMethod({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const createSamplingQueryKey = (options: Options<CreateSamplingData>) =>
  createQueryKey('createSampling', options)

export const createSamplingOptions = (options: Options<CreateSamplingData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.createSampling({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createSamplingQueryKey(options)
  })
}

export const createSamplingMutation = (options?: Partial<Options<CreateSamplingData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateSamplingResponse,
    CreateSamplingError,
    Options<CreateSamplingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.createSampling({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteSamplingMutation = (options?: Partial<Options<DeleteSamplingData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteSamplingResponse,
    DeleteSamplingError,
    Options<DeleteSamplingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.deleteSampling({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateSamplingMutation = (options?: Partial<Options<UpdateSamplingData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateSamplingResponse,
    UpdateSamplingError,
    Options<UpdateSamplingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.updateSampling({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listSequencesQueryKey = (options?: Options<ListSequencesData>) =>
  createQueryKey('listSequences', options)

export const listSequencesOptions = (options?: Options<ListSequencesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.listSequences({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSequencesQueryKey(options)
  })
}

export const deleteSequenceMutation = (options?: Partial<Options<DeleteSequenceData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteSequenceResponse,
    DeleteSequenceError,
    Options<DeleteSequenceData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.deleteSequence({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getSequenceQueryKey = (options: Options<GetSequenceData>) =>
  createQueryKey('getSequence', options)

export const getSequenceOptions = (options: Options<GetSequenceData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.getSequence({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getSequenceQueryKey(options)
  })
}

export const emailSettingsQueryKey = (options?: Options<EmailSettingsData>) =>
  createQueryKey('emailSettings', options)

export const emailSettingsOptions = (options?: Options<EmailSettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.emailSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: emailSettingsQueryKey(options)
  })
}

export const updateEmailSettingsQueryKey = (options: Options<UpdateEmailSettingsData>) =>
  createQueryKey('updateEmailSettings', options)

export const updateEmailSettingsOptions = (options: Options<UpdateEmailSettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.updateEmailSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: updateEmailSettingsQueryKey(options)
  })
}

export const updateEmailSettingsMutation = (
  options?: Partial<Options<UpdateEmailSettingsData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateEmailSettingsResponse,
    UpdateEmailSettingsError,
    Options<UpdateEmailSettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.updateEmailSettings({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const testSmtpQueryKey = (options: Options<TestSmtpData>) =>
  createQueryKey('testSmtp', options)

export const testSmtpOptions = (options: Options<TestSmtpData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.testSmtp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: testSmtpQueryKey(options)
  })
}

export const testSmtpMutation = (options?: Partial<Options<TestSmtpData>>) => {
  const mutationOptions: UseMutationOptions<
    TestSmtpResponse,
    TestSmtpError,
    Options<TestSmtpData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.testSmtp({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const setAppIconQueryKey = (options?: Options<SetAppIconData>) =>
  createQueryKey('setAppIcon', options)

export const setAppIconOptions = (options?: Options<SetAppIconData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.setAppIcon({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: setAppIconQueryKey(options)
  })
}

export const setAppIconMutation = (options?: Partial<Options<SetAppIconData>>) => {
  const mutationOptions: UseMutationOptions<
    SetAppIconResponse,
    SetAppIconError,
    Options<SetAppIconData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.setAppIcon({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const instanceSettingsQueryKey = (options?: Options<InstanceSettingsData>) =>
  createQueryKey('instanceSettings', options)

export const instanceSettingsOptions = (options?: Options<InstanceSettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.instanceSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: instanceSettingsQueryKey(options)
  })
}

export const updateInstanceSettingsQueryKey = (options: Options<UpdateInstanceSettingsData>) =>
  createQueryKey('updateInstanceSettings', options)

export const updateInstanceSettingsOptions = (options: Options<UpdateInstanceSettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.updateInstanceSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: updateInstanceSettingsQueryKey(options)
  })
}

export const updateInstanceSettingsMutation = (
  options?: Partial<Options<UpdateInstanceSettingsData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateInstanceSettingsResponse,
    UpdateInstanceSettingsError,
    Options<UpdateInstanceSettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.updateInstanceSettings({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const securitySettingsQueryKey = (options?: Options<SecuritySettingsData>) =>
  createQueryKey('securitySettings', options)

export const securitySettingsOptions = (options?: Options<SecuritySettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.securitySettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: securitySettingsQueryKey(options)
  })
}

export const updateSecuritySettingsQueryKey = (options: Options<UpdateSecuritySettingsData>) =>
  createQueryKey('updateSecuritySettings', options)

export const updateSecuritySettingsOptions = (options: Options<UpdateSecuritySettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.updateSecuritySettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: updateSecuritySettingsQueryKey(options)
  })
}

export const updateSecuritySettingsMutation = (
  options?: Partial<Options<UpdateSecuritySettingsData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateSecuritySettingsResponse,
    UpdateSecuritySettingsError,
    Options<UpdateSecuritySettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.updateSecuritySettings({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const serviceSettingsQueryKey = (options?: Options<ServiceSettingsData>) =>
  createQueryKey('serviceSettings', options)

export const serviceSettingsOptions = (options?: Options<ServiceSettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.serviceSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: serviceSettingsQueryKey(options)
  })
}

export const updateServiceSettingsMutation = (
  options?: Partial<Options<UpdateServiceSettingsData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateServiceSettingsResponse,
    UpdateServiceSettingsError,
    Options<UpdateServiceSettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.updateServiceSettings({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listSitesQueryKey = (options?: Options<ListSitesData>) =>
  createQueryKey('listSites', options)

export const listSitesOptions = (options?: Options<ListSitesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.listSites({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSitesQueryKey(options)
  })
}

export const createSiteQueryKey = (options: Options<CreateSiteData>) =>
  createQueryKey('createSite', options)

export const createSiteOptions = (options: Options<CreateSiteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.createSite({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createSiteQueryKey(options)
  })
}

export const createSiteMutation = (options?: Partial<Options<CreateSiteData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateSiteResponse,
    CreateSiteError,
    Options<CreateSiteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LocationService.createSite({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getSiteQueryKey = (options: Options<GetSiteData>) => createQueryKey('getSite', options)

export const getSiteOptions = (options: Options<GetSiteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.getSite({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getSiteQueryKey(options)
  })
}

export const updateSiteMutation = (options?: Partial<Options<UpdateSiteData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateSiteResponse,
    UpdateSiteError,
    Options<UpdateSiteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LocationService.updateSite({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const createEventQueryKey = (options: Options<CreateEventData>) =>
  createQueryKey('createEvent', options)

export const createEventOptions = (options: Options<CreateEventData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.createEvent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createEventQueryKey(options)
  })
}

export const createEventMutation = (options?: Partial<Options<CreateEventData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateEventResponse,
    CreateEventError,
    Options<CreateEventData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LocationService.createEvent({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getTaxonomyQueryKey = (options?: Options<GetTaxonomyData>) =>
  createQueryKey('getTaxonomy', options)

export const getTaxonomyOptions = (options?: Options<GetTaxonomyData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyService.getTaxonomy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getTaxonomyQueryKey(options)
  })
}

export const listTaxaQueryKey = (options?: Options<ListTaxaData>) =>
  createQueryKey('listTaxa', options)

export const listTaxaOptions = (options?: Options<ListTaxaData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyService.listTaxa({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listTaxaQueryKey(options)
  })
}

export const createTaxonQueryKey = (options: Options<CreateTaxonData>) =>
  createQueryKey('createTaxon', options)

export const createTaxonOptions = (options: Options<CreateTaxonData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyService.createTaxon({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createTaxonQueryKey(options)
  })
}

export const createTaxonMutation = (options?: Partial<Options<CreateTaxonData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateTaxonResponse,
    CreateTaxonError,
    Options<CreateTaxonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await TaxonomyService.createTaxon({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteTaxonMutation = (options?: Partial<Options<DeleteTaxonData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteTaxonResponse,
    DeleteTaxonError,
    Options<DeleteTaxonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await TaxonomyService.deleteTaxon({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getTaxonQueryKey = (options: Options<GetTaxonData>) =>
  createQueryKey('getTaxon', options)

export const getTaxonOptions = (options: Options<GetTaxonData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyService.getTaxon({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getTaxonQueryKey(options)
  })
}

export const updateTaxonMutation = (options?: Partial<Options<UpdateTaxonData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateTaxonResponse,
    UpdateTaxonError,
    Options<UpdateTaxonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await TaxonomyService.updateTaxon({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}
