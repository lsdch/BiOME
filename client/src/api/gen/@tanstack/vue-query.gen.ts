// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-fetch'
import { queryOptions, type UseMutationOptions } from '@tanstack/vue-query'
import type {
  CurrentUserData,
  ConfirmEmailData,
  ResendEmailVerificationData,
  ResendEmailVerificationError,
  ResendEmailVerificationResponse,
  RequestPasswordResetData,
  RequestPasswordResetError,
  RequestPasswordResetResponse,
  LoginData,
  LoginError,
  LoginResponse,
  LogoutData,
  LogoutError,
  LogoutResponse,
  UpdatePasswordData,
  UpdatePasswordError,
  UpdatePasswordResponse,
  ValidatePasswordTokenData,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  ListPendingUserRequestsData,
  DeletePendingUserRequestData,
  DeletePendingUserRequestError,
  DeletePendingUserRequestResponse,
  GetPendingUserRequestData,
  RefreshSessionData,
  RefreshSessionError,
  RefreshSessionResponse,
  RegisterData,
  RegisterError,
  RegisterResponse,
  ClaimInvitationData,
  ClaimInvitationError,
  ClaimInvitationResponse,
  ListCountriesData,
  ListOccurrenceDatasetsData,
  GetOccurrenceDatasetData,
  ListSequenceDatasetsData,
  GetSequenceDatasetData,
  ListSiteDatasetsData,
  CreateSiteDatasetData,
  CreateSiteDatasetError,
  CreateSiteDatasetResponse,
  GetSiteDatasetData,
  DeleteEventData,
  DeleteEventError,
  DeleteEventResponse,
  UpdateEventData,
  UpdateEventError,
  UpdateEventResponse,
  UpdateSpottingData,
  UpdateSpottingError,
  UpdateSpottingResponse,
  ListProgramsData,
  CreateProgramData,
  CreateProgramError,
  CreateProgramResponse,
  DeleteProgramData,
  DeleteProgramError,
  DeleteProgramResponse,
  UpdateProgramData,
  UpdateProgramError,
  UpdateProgramResponse,
  ListHabitatGroupsData,
  CreateHabitatGroupData,
  CreateHabitatGroupError,
  CreateHabitatGroupResponse,
  DeleteHabitatGroupData,
  DeleteHabitatGroupError,
  DeleteHabitatGroupResponse,
  UpdateHabitatGroupData,
  UpdateHabitatGroupError,
  UpdateHabitatGroupResponse,
  ListInstitutionsData,
  CreateInstitutionData,
  CreateInstitutionError,
  CreateInstitutionResponse,
  DeleteInstitutionData,
  DeleteInstitutionError,
  DeleteInstitutionResponse,
  UpdateInstitutionData,
  UpdateInstitutionError,
  UpdateInstitutionResponse,
  ListSitesData,
  CreateSiteData,
  CreateSiteError,
  CreateSiteResponse,
  GetSiteData,
  UpdateSiteData,
  UpdateSiteError,
  UpdateSiteResponse,
  CreateEventData,
  CreateEventError,
  CreateEventResponse,
  OccurrenceOverviewData,
  ListPersonsData,
  CreatePersonData,
  CreatePersonError,
  CreatePersonResponse,
  DeletePersonData,
  DeletePersonError,
  DeletePersonResponse,
  UpdatePersonData,
  UpdatePersonError,
  UpdatePersonResponse,
  InvitePersonData,
  InvitePersonError,
  InvitePersonResponse,
  CrossRefData,
  CrossRefBibSearchData,
  CrossRefBibSearchError,
  CrossRefBibSearchResponse,
  ListArticlesData,
  CreateArticleData,
  CreateArticleError,
  CreateArticleResponse,
  DeleteArticleData,
  DeleteArticleError,
  DeleteArticleResponse,
  UpdateArticleData,
  UpdateArticleError,
  UpdateArticleResponse,
  ListBioMaterialData,
  UpdateExternalBioMatData,
  UpdateExternalBioMatError,
  UpdateExternalBioMatResponse,
  CreateExternalBioMatData,
  CreateExternalBioMatError,
  CreateExternalBioMatResponse,
  DeleteBioMaterialData,
  DeleteBioMaterialError,
  DeleteBioMaterialResponse,
  GetBioMaterialData,
  ListAbioticParametersData,
  CreateAbioticParameterData,
  CreateAbioticParameterError,
  CreateAbioticParameterResponse,
  DeleteAbioticParameterData,
  DeleteAbioticParameterError,
  DeleteAbioticParameterResponse,
  UpdateAbioticParameterData,
  UpdateAbioticParameterError,
  UpdateAbioticParameterResponse,
  GetAccessPointsData,
  ListFixativesData,
  CreateFixativeData,
  CreateFixativeError,
  CreateFixativeResponse,
  DeleteFixativeData,
  DeleteFixativeError,
  DeleteFixativeResponse,
  UpdateFixativeData,
  UpdateFixativeError,
  UpdateFixativeResponse,
  ListSamplingMethodsData,
  CreateSamplingMethodData,
  CreateSamplingMethodError,
  CreateSamplingMethodResponse,
  DeleteSamplingMethodData,
  DeleteSamplingMethodError,
  DeleteSamplingMethodResponse,
  UpdateSamplingMethodData,
  UpdateSamplingMethodError,
  UpdateSamplingMethodResponse,
  CreateSamplingData,
  CreateSamplingError,
  CreateSamplingResponse,
  DeleteSamplingData,
  DeleteSamplingError,
  DeleteSamplingResponse,
  UpdateSamplingData,
  UpdateSamplingError,
  UpdateSamplingResponse,
  ListGenesData,
  CreateGeneData,
  CreateGeneError,
  CreateGeneResponse,
  DeleteGeneData,
  DeleteGeneError,
  DeleteGeneResponse,
  UpdateGeneData,
  UpdateGeneError,
  UpdateGeneResponse,
  ListSeqDbsData,
  CreateSeqDbData,
  CreateSeqDbError,
  CreateSeqDbResponse,
  DeleteSeqDbData,
  DeleteSeqDbError,
  DeleteSeqDbResponse,
  UpdateSeqDbData,
  UpdateSeqDbError,
  UpdateSeqDbResponse,
  ListSequencesData,
  DeleteSequenceData,
  DeleteSequenceError,
  DeleteSequenceResponse,
  GetSequenceData,
  ListGeoapifyUsageData,
  EmailSettingsData,
  UpdateEmailSettingsData,
  UpdateEmailSettingsError,
  UpdateEmailSettingsResponse,
  TestSmtpData,
  TestSmtpError,
  TestSmtpResponse,
  SetAppIconData,
  SetAppIconError,
  SetAppIconResponse,
  UpdateInstanceSettingsData,
  UpdateInstanceSettingsError,
  UpdateInstanceSettingsResponse,
  SecuritySettingsData,
  UpdateSecuritySettingsData,
  UpdateSecuritySettingsError,
  UpdateSecuritySettingsResponse,
  ServiceSettingsData,
  UpdateServiceSettingsData,
  UpdateServiceSettingsError,
  UpdateServiceSettingsResponse,
  GetTaxonomyData,
  ListTaxaData,
  CreateTaxonData,
  CreateTaxonError,
  CreateTaxonResponse,
  DeleteTaxonData,
  DeleteTaxonError,
  DeleteTaxonResponse,
  GetTaxonData,
  UpdateTaxonData,
  UpdateTaxonError,
  UpdateTaxonResponse,
  ListAnchorsData,
  ImportGbifData,
  ImportGbifError,
  ImportGbifResponse
} from '../types.gen'
import {
  client,
  AccountService,
  CountriesService,
  DatasetsService,
  EventsService,
  HabitatsService,
  InstitutionService,
  LocationService,
  OccurrencesService,
  PeopleService,
  ReferencesService,
  SamplesService,
  SamplingService,
  SequencesService,
  ServicesService,
  SettingsService,
  TaxonomyService,
  TaxonomyGbifService
} from '../sdk.gen'

type QueryKey<TOptions extends OptionsLegacyParser> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  }
]

const createQueryKey = <TOptions extends OptionsLegacyParser>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const currentUserQueryKey = (options?: OptionsLegacyParser<CurrentUserData>) => [
  createQueryKey('currentUser', options)
]

export const currentUserOptions = (options?: OptionsLegacyParser<CurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.currentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: currentUserQueryKey(options)
  })
}

export const confirmEmailQueryKey = (options?: OptionsLegacyParser<ConfirmEmailData>) => [
  createQueryKey('confirmEmail', options)
]

export const confirmEmailOptions = (options?: OptionsLegacyParser<ConfirmEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.confirmEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: confirmEmailQueryKey(options)
  })
}

export const resendEmailVerificationQueryKey = (
  options: OptionsLegacyParser<ResendEmailVerificationData>
) => [createQueryKey('resendEmailVerification', options)]

export const resendEmailVerificationOptions = (
  options: OptionsLegacyParser<ResendEmailVerificationData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.resendEmailVerification({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: resendEmailVerificationQueryKey(options)
  })
}

export const resendEmailVerificationMutation = (
  options?: Partial<OptionsLegacyParser<ResendEmailVerificationData>>
) => {
  const mutationOptions: UseMutationOptions<
    ResendEmailVerificationResponse,
    ResendEmailVerificationError,
    OptionsLegacyParser<ResendEmailVerificationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.resendEmailVerification({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const requestPasswordResetQueryKey = (
  options: OptionsLegacyParser<RequestPasswordResetData>
) => [createQueryKey('requestPasswordReset', options)]

export const requestPasswordResetOptions = (
  options: OptionsLegacyParser<RequestPasswordResetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.requestPasswordReset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: requestPasswordResetQueryKey(options)
  })
}

export const requestPasswordResetMutation = (
  options?: Partial<OptionsLegacyParser<RequestPasswordResetData>>
) => {
  const mutationOptions: UseMutationOptions<
    RequestPasswordResetResponse,
    RequestPasswordResetError,
    OptionsLegacyParser<RequestPasswordResetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.requestPasswordReset({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const loginQueryKey = (options: OptionsLegacyParser<LoginData>) => [
  createQueryKey('login', options)
]

export const loginOptions = (options: OptionsLegacyParser<LoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.login({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: loginQueryKey(options)
  })
}

export const loginMutation = (options?: Partial<OptionsLegacyParser<LoginData>>) => {
  const mutationOptions: UseMutationOptions<
    LoginResponse,
    LoginError,
    OptionsLegacyParser<LoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.login({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const logoutQueryKey = (options: OptionsLegacyParser<LogoutData>) => [
  createQueryKey('logout', options)
]

export const logoutOptions = (options: OptionsLegacyParser<LogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.logout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: logoutQueryKey(options)
  })
}

export const logoutMutation = (options?: Partial<OptionsLegacyParser<LogoutData>>) => {
  const mutationOptions: UseMutationOptions<
    LogoutResponse,
    LogoutError,
    OptionsLegacyParser<LogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.logout({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updatePasswordQueryKey = (options: OptionsLegacyParser<UpdatePasswordData>) => [
  createQueryKey('updatePassword', options)
]

export const updatePasswordOptions = (options: OptionsLegacyParser<UpdatePasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.updatePassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: updatePasswordQueryKey(options)
  })
}

export const updatePasswordMutation = (
  options?: Partial<OptionsLegacyParser<UpdatePasswordData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdatePasswordResponse,
    UpdatePasswordError,
    OptionsLegacyParser<UpdatePasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.updatePassword({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const validatePasswordTokenQueryKey = (
  options: OptionsLegacyParser<ValidatePasswordTokenData>
) => [createQueryKey('validatePasswordToken', options)]

export const validatePasswordTokenOptions = (
  options: OptionsLegacyParser<ValidatePasswordTokenData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.validatePasswordToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: validatePasswordTokenQueryKey(options)
  })
}

export const resetPasswordQueryKey = (options: OptionsLegacyParser<ResetPasswordData>) => [
  createQueryKey('resetPassword', options)
]

export const resetPasswordOptions = (options: OptionsLegacyParser<ResetPasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.resetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: resetPasswordQueryKey(options)
  })
}

export const resetPasswordMutation = (
  options?: Partial<OptionsLegacyParser<ResetPasswordData>>
) => {
  const mutationOptions: UseMutationOptions<
    ResetPasswordResponse,
    ResetPasswordError,
    OptionsLegacyParser<ResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.resetPassword({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listPendingUserRequestsQueryKey = (
  options?: OptionsLegacyParser<ListPendingUserRequestsData>
) => [createQueryKey('listPendingUserRequests', options)]

export const listPendingUserRequestsOptions = (
  options?: OptionsLegacyParser<ListPendingUserRequestsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.listPendingUserRequests({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listPendingUserRequestsQueryKey(options)
  })
}

export const deletePendingUserRequestMutation = (
  options?: Partial<OptionsLegacyParser<DeletePendingUserRequestData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeletePendingUserRequestResponse,
    DeletePendingUserRequestError,
    OptionsLegacyParser<DeletePendingUserRequestData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.deletePendingUserRequest({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getPendingUserRequestQueryKey = (
  options?: OptionsLegacyParser<GetPendingUserRequestData>
) => [createQueryKey('getPendingUserRequest', options)]

export const getPendingUserRequestOptions = (
  options?: OptionsLegacyParser<GetPendingUserRequestData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.getPendingUserRequest({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getPendingUserRequestQueryKey(options)
  })
}

export const refreshSessionQueryKey = (options: OptionsLegacyParser<RefreshSessionData>) => [
  createQueryKey('refreshSession', options)
]

export const refreshSessionOptions = (options: OptionsLegacyParser<RefreshSessionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.refreshSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: refreshSessionQueryKey(options)
  })
}

export const refreshSessionMutation = (
  options?: Partial<OptionsLegacyParser<RefreshSessionData>>
) => {
  const mutationOptions: UseMutationOptions<
    RefreshSessionResponse,
    RefreshSessionError,
    OptionsLegacyParser<RefreshSessionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.refreshSession({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const registerQueryKey = (options: OptionsLegacyParser<RegisterData>) => [
  createQueryKey('register', options)
]

export const registerOptions = (options: OptionsLegacyParser<RegisterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.register({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: registerQueryKey(options)
  })
}

export const registerMutation = (options?: Partial<OptionsLegacyParser<RegisterData>>) => {
  const mutationOptions: UseMutationOptions<
    RegisterResponse,
    RegisterError,
    OptionsLegacyParser<RegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.register({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const claimInvitationQueryKey = (options: OptionsLegacyParser<ClaimInvitationData>) => [
  createQueryKey('claimInvitation', options)
]

export const claimInvitationOptions = (options: OptionsLegacyParser<ClaimInvitationData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await AccountService.claimInvitation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: claimInvitationQueryKey(options)
  })
}

export const claimInvitationMutation = (
  options?: Partial<OptionsLegacyParser<ClaimInvitationData>>
) => {
  const mutationOptions: UseMutationOptions<
    ClaimInvitationResponse,
    ClaimInvitationError,
    OptionsLegacyParser<ClaimInvitationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await AccountService.claimInvitation({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listCountriesQueryKey = (options?: OptionsLegacyParser<ListCountriesData>) => [
  createQueryKey('listCountries', options)
]

export const listCountriesOptions = (options?: OptionsLegacyParser<ListCountriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await CountriesService.listCountries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listCountriesQueryKey(options)
  })
}

export const listOccurrenceDatasetsQueryKey = (
  options?: OptionsLegacyParser<ListOccurrenceDatasetsData>
) => [createQueryKey('listOccurrenceDatasets', options)]

export const listOccurrenceDatasetsOptions = (
  options?: OptionsLegacyParser<ListOccurrenceDatasetsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.listOccurrenceDatasets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listOccurrenceDatasetsQueryKey(options)
  })
}

export const getOccurrenceDatasetQueryKey = (
  options: OptionsLegacyParser<GetOccurrenceDatasetData>
) => [createQueryKey('getOccurrenceDataset', options)]

export const getOccurrenceDatasetOptions = (
  options: OptionsLegacyParser<GetOccurrenceDatasetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.getOccurrenceDataset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getOccurrenceDatasetQueryKey(options)
  })
}

export const listSequenceDatasetsQueryKey = (
  options?: OptionsLegacyParser<ListSequenceDatasetsData>
) => [createQueryKey('listSequenceDatasets', options)]

export const listSequenceDatasetsOptions = (
  options?: OptionsLegacyParser<ListSequenceDatasetsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.listSequenceDatasets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSequenceDatasetsQueryKey(options)
  })
}

export const getSequenceDatasetQueryKey = (
  options: OptionsLegacyParser<GetSequenceDatasetData>
) => [createQueryKey('getSequenceDataset', options)]

export const getSequenceDatasetOptions = (options: OptionsLegacyParser<GetSequenceDatasetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.getSequenceDataset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getSequenceDatasetQueryKey(options)
  })
}

export const listSiteDatasetsQueryKey = (options?: OptionsLegacyParser<ListSiteDatasetsData>) => [
  createQueryKey('listSiteDatasets', options)
]

export const listSiteDatasetsOptions = (options?: OptionsLegacyParser<ListSiteDatasetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.listSiteDatasets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSiteDatasetsQueryKey(options)
  })
}

export const createSiteDatasetQueryKey = (options: OptionsLegacyParser<CreateSiteDatasetData>) => [
  createQueryKey('createSiteDataset', options)
]

export const createSiteDatasetOptions = (options: OptionsLegacyParser<CreateSiteDatasetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.createSiteDataset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createSiteDatasetQueryKey(options)
  })
}

export const createSiteDatasetMutation = (
  options?: Partial<OptionsLegacyParser<CreateSiteDatasetData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateSiteDatasetResponse,
    CreateSiteDatasetError,
    OptionsLegacyParser<CreateSiteDatasetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await DatasetsService.createSiteDataset({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getSiteDatasetQueryKey = (options: OptionsLegacyParser<GetSiteDatasetData>) => [
  createQueryKey('getSiteDataset', options)
]

export const getSiteDatasetOptions = (options: OptionsLegacyParser<GetSiteDatasetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await DatasetsService.getSiteDataset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getSiteDatasetQueryKey(options)
  })
}

export const deleteEventMutation = (options?: Partial<OptionsLegacyParser<DeleteEventData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteEventResponse,
    DeleteEventError,
    OptionsLegacyParser<DeleteEventData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.deleteEvent({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateEventMutation = (options?: Partial<OptionsLegacyParser<UpdateEventData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateEventResponse,
    UpdateEventError,
    OptionsLegacyParser<UpdateEventData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.updateEvent({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateSpottingMutation = (
  options?: Partial<OptionsLegacyParser<UpdateSpottingData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateSpottingResponse,
    UpdateSpottingError,
    OptionsLegacyParser<UpdateSpottingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.updateSpotting({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listProgramsQueryKey = (options?: OptionsLegacyParser<ListProgramsData>) => [
  createQueryKey('listPrograms', options)
]

export const listProgramsOptions = (options?: OptionsLegacyParser<ListProgramsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await EventsService.listPrograms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listProgramsQueryKey(options)
  })
}

export const createProgramQueryKey = (options: OptionsLegacyParser<CreateProgramData>) => [
  createQueryKey('createProgram', options)
]

export const createProgramOptions = (options: OptionsLegacyParser<CreateProgramData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await EventsService.createProgram({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createProgramQueryKey(options)
  })
}

export const createProgramMutation = (
  options?: Partial<OptionsLegacyParser<CreateProgramData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateProgramResponse,
    CreateProgramError,
    OptionsLegacyParser<CreateProgramData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.createProgram({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteProgramMutation = (
  options?: Partial<OptionsLegacyParser<DeleteProgramData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteProgramResponse,
    DeleteProgramError,
    OptionsLegacyParser<DeleteProgramData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.deleteProgram({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateProgramMutation = (
  options?: Partial<OptionsLegacyParser<UpdateProgramData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateProgramResponse,
    UpdateProgramError,
    OptionsLegacyParser<UpdateProgramData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await EventsService.updateProgram({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listHabitatGroupsQueryKey = (options?: OptionsLegacyParser<ListHabitatGroupsData>) => [
  createQueryKey('listHabitatGroups', options)
]

export const listHabitatGroupsOptions = (options?: OptionsLegacyParser<ListHabitatGroupsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await HabitatsService.listHabitatGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listHabitatGroupsQueryKey(options)
  })
}

export const createHabitatGroupQueryKey = (
  options: OptionsLegacyParser<CreateHabitatGroupData>
) => [createQueryKey('createHabitatGroup', options)]

export const createHabitatGroupOptions = (options: OptionsLegacyParser<CreateHabitatGroupData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await HabitatsService.createHabitatGroup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createHabitatGroupQueryKey(options)
  })
}

export const createHabitatGroupMutation = (
  options?: Partial<OptionsLegacyParser<CreateHabitatGroupData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateHabitatGroupResponse,
    CreateHabitatGroupError,
    OptionsLegacyParser<CreateHabitatGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await HabitatsService.createHabitatGroup({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteHabitatGroupMutation = (
  options?: Partial<OptionsLegacyParser<DeleteHabitatGroupData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteHabitatGroupResponse,
    DeleteHabitatGroupError,
    OptionsLegacyParser<DeleteHabitatGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await HabitatsService.deleteHabitatGroup({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateHabitatGroupMutation = (
  options?: Partial<OptionsLegacyParser<UpdateHabitatGroupData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateHabitatGroupResponse,
    UpdateHabitatGroupError,
    OptionsLegacyParser<UpdateHabitatGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await HabitatsService.updateHabitatGroup({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listInstitutionsQueryKey = (options?: OptionsLegacyParser<ListInstitutionsData>) => [
  createQueryKey('listInstitutions', options)
]

export const listInstitutionsOptions = (options?: OptionsLegacyParser<ListInstitutionsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await InstitutionService.listInstitutions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listInstitutionsQueryKey(options)
  })
}

export const createInstitutionQueryKey = (options: OptionsLegacyParser<CreateInstitutionData>) => [
  createQueryKey('createInstitution', options)
]

export const createInstitutionOptions = (options: OptionsLegacyParser<CreateInstitutionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await InstitutionService.createInstitution({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createInstitutionQueryKey(options)
  })
}

export const createInstitutionMutation = (
  options?: Partial<OptionsLegacyParser<CreateInstitutionData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateInstitutionResponse,
    CreateInstitutionError,
    OptionsLegacyParser<CreateInstitutionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await InstitutionService.createInstitution({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteInstitutionMutation = (
  options?: Partial<OptionsLegacyParser<DeleteInstitutionData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteInstitutionResponse,
    DeleteInstitutionError,
    OptionsLegacyParser<DeleteInstitutionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await InstitutionService.deleteInstitution({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateInstitutionMutation = (
  options?: Partial<OptionsLegacyParser<UpdateInstitutionData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateInstitutionResponse,
    UpdateInstitutionError,
    OptionsLegacyParser<UpdateInstitutionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await InstitutionService.updateInstitution({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listSitesQueryKey = (options?: OptionsLegacyParser<ListSitesData>) => [
  createQueryKey('listSites', options)
]

export const listSitesOptions = (options?: OptionsLegacyParser<ListSitesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.listSites({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSitesQueryKey(options)
  })
}

export const createSiteQueryKey = (options: OptionsLegacyParser<CreateSiteData>) => [
  createQueryKey('createSite', options)
]

export const createSiteOptions = (options: OptionsLegacyParser<CreateSiteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.createSite({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createSiteQueryKey(options)
  })
}

export const createSiteMutation = (options?: Partial<OptionsLegacyParser<CreateSiteData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateSiteResponse,
    CreateSiteError,
    OptionsLegacyParser<CreateSiteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LocationService.createSite({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getSiteQueryKey = (options: OptionsLegacyParser<GetSiteData>) => [
  createQueryKey('getSite', options)
]

export const getSiteOptions = (options: OptionsLegacyParser<GetSiteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.getSite({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getSiteQueryKey(options)
  })
}

export const updateSiteMutation = (options?: Partial<OptionsLegacyParser<UpdateSiteData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateSiteResponse,
    UpdateSiteError,
    OptionsLegacyParser<UpdateSiteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LocationService.updateSite({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const createEventQueryKey = (options: OptionsLegacyParser<CreateEventData>) => [
  createQueryKey('createEvent', options)
]

export const createEventOptions = (options: OptionsLegacyParser<CreateEventData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await LocationService.createEvent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createEventQueryKey(options)
  })
}

export const createEventMutation = (options?: Partial<OptionsLegacyParser<CreateEventData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateEventResponse,
    CreateEventError,
    OptionsLegacyParser<CreateEventData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await LocationService.createEvent({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const occurrenceOverviewQueryKey = (
  options?: OptionsLegacyParser<OccurrenceOverviewData>
) => [createQueryKey('occurrenceOverview', options)]

export const occurrenceOverviewOptions = (
  options?: OptionsLegacyParser<OccurrenceOverviewData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await OccurrencesService.occurrenceOverview({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: occurrenceOverviewQueryKey(options)
  })
}

export const listPersonsQueryKey = (options?: OptionsLegacyParser<ListPersonsData>) => [
  createQueryKey('listPersons', options)
]

export const listPersonsOptions = (options?: OptionsLegacyParser<ListPersonsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PeopleService.listPersons({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listPersonsQueryKey(options)
  })
}

export const createPersonQueryKey = (options: OptionsLegacyParser<CreatePersonData>) => [
  createQueryKey('createPerson', options)
]

export const createPersonOptions = (options: OptionsLegacyParser<CreatePersonData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PeopleService.createPerson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createPersonQueryKey(options)
  })
}

export const createPersonMutation = (options?: Partial<OptionsLegacyParser<CreatePersonData>>) => {
  const mutationOptions: UseMutationOptions<
    CreatePersonResponse,
    CreatePersonError,
    OptionsLegacyParser<CreatePersonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.createPerson({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deletePersonMutation = (options?: Partial<OptionsLegacyParser<DeletePersonData>>) => {
  const mutationOptions: UseMutationOptions<
    DeletePersonResponse,
    DeletePersonError,
    OptionsLegacyParser<DeletePersonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.deletePerson({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updatePersonMutation = (options?: Partial<OptionsLegacyParser<UpdatePersonData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdatePersonResponse,
    UpdatePersonError,
    OptionsLegacyParser<UpdatePersonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.updatePerson({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const invitePersonQueryKey = (options: OptionsLegacyParser<InvitePersonData>) => [
  createQueryKey('invitePerson', options)
]

export const invitePersonOptions = (options: OptionsLegacyParser<InvitePersonData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PeopleService.invitePerson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: invitePersonQueryKey(options)
  })
}

export const invitePersonMutation = (options?: Partial<OptionsLegacyParser<InvitePersonData>>) => {
  const mutationOptions: UseMutationOptions<
    InvitePersonResponse,
    InvitePersonError,
    OptionsLegacyParser<InvitePersonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await PeopleService.invitePerson({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const crossRefQueryKey = (options: OptionsLegacyParser<CrossRefData>) => [
  createQueryKey('crossRef', options)
]

export const crossRefOptions = (options: OptionsLegacyParser<CrossRefData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ReferencesService.crossRef({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: crossRefQueryKey(options)
  })
}

export const crossRefBibSearchQueryKey = (options: OptionsLegacyParser<CrossRefBibSearchData>) => [
  createQueryKey('crossRefBibSearch', options)
]

export const crossRefBibSearchOptions = (options: OptionsLegacyParser<CrossRefBibSearchData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ReferencesService.crossRefBibSearch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: crossRefBibSearchQueryKey(options)
  })
}

export const crossRefBibSearchMutation = (
  options?: Partial<OptionsLegacyParser<CrossRefBibSearchData>>
) => {
  const mutationOptions: UseMutationOptions<
    CrossRefBibSearchResponse,
    CrossRefBibSearchError,
    OptionsLegacyParser<CrossRefBibSearchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ReferencesService.crossRefBibSearch({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listArticlesQueryKey = (options?: OptionsLegacyParser<ListArticlesData>) => [
  createQueryKey('listArticles', options)
]

export const listArticlesOptions = (options?: OptionsLegacyParser<ListArticlesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ReferencesService.listArticles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listArticlesQueryKey(options)
  })
}

export const createArticleQueryKey = (options: OptionsLegacyParser<CreateArticleData>) => [
  createQueryKey('createArticle', options)
]

export const createArticleOptions = (options: OptionsLegacyParser<CreateArticleData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ReferencesService.createArticle({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createArticleQueryKey(options)
  })
}

export const createArticleMutation = (
  options?: Partial<OptionsLegacyParser<CreateArticleData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateArticleResponse,
    CreateArticleError,
    OptionsLegacyParser<CreateArticleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ReferencesService.createArticle({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteArticleMutation = (
  options?: Partial<OptionsLegacyParser<DeleteArticleData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteArticleResponse,
    DeleteArticleError,
    OptionsLegacyParser<DeleteArticleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ReferencesService.deleteArticle({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateArticleMutation = (
  options?: Partial<OptionsLegacyParser<UpdateArticleData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateArticleResponse,
    UpdateArticleError,
    OptionsLegacyParser<UpdateArticleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ReferencesService.updateArticle({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listBioMaterialQueryKey = (options?: OptionsLegacyParser<ListBioMaterialData>) => [
  createQueryKey('listBioMaterial', options)
]

export const listBioMaterialOptions = (options?: OptionsLegacyParser<ListBioMaterialData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplesService.listBioMaterial({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listBioMaterialQueryKey(options)
  })
}

export const updateExternalBioMatMutation = (
  options?: Partial<OptionsLegacyParser<UpdateExternalBioMatData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateExternalBioMatResponse,
    UpdateExternalBioMatError,
    OptionsLegacyParser<UpdateExternalBioMatData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplesService.updateExternalBioMat({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const createExternalBioMatQueryKey = (
  options: OptionsLegacyParser<CreateExternalBioMatData>
) => [createQueryKey('createExternalBioMat', options)]

export const createExternalBioMatOptions = (
  options: OptionsLegacyParser<CreateExternalBioMatData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplesService.createExternalBioMat({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createExternalBioMatQueryKey(options)
  })
}

export const createExternalBioMatMutation = (
  options?: Partial<OptionsLegacyParser<CreateExternalBioMatData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateExternalBioMatResponse,
    CreateExternalBioMatError,
    OptionsLegacyParser<CreateExternalBioMatData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplesService.createExternalBioMat({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteBioMaterialMutation = (
  options?: Partial<OptionsLegacyParser<DeleteBioMaterialData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteBioMaterialResponse,
    DeleteBioMaterialError,
    OptionsLegacyParser<DeleteBioMaterialData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplesService.deleteBioMaterial({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getBioMaterialQueryKey = (options: OptionsLegacyParser<GetBioMaterialData>) => [
  createQueryKey('getBioMaterial', options)
]

export const getBioMaterialOptions = (options: OptionsLegacyParser<GetBioMaterialData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplesService.getBioMaterial({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getBioMaterialQueryKey(options)
  })
}

export const listAbioticParametersQueryKey = (
  options?: OptionsLegacyParser<ListAbioticParametersData>
) => [createQueryKey('listAbioticParameters', options)]

export const listAbioticParametersOptions = (
  options?: OptionsLegacyParser<ListAbioticParametersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.listAbioticParameters({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listAbioticParametersQueryKey(options)
  })
}

export const createAbioticParameterQueryKey = (
  options: OptionsLegacyParser<CreateAbioticParameterData>
) => [createQueryKey('createAbioticParameter', options)]

export const createAbioticParameterOptions = (
  options: OptionsLegacyParser<CreateAbioticParameterData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.createAbioticParameter({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createAbioticParameterQueryKey(options)
  })
}

export const createAbioticParameterMutation = (
  options?: Partial<OptionsLegacyParser<CreateAbioticParameterData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateAbioticParameterResponse,
    CreateAbioticParameterError,
    OptionsLegacyParser<CreateAbioticParameterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.createAbioticParameter({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteAbioticParameterMutation = (
  options?: Partial<OptionsLegacyParser<DeleteAbioticParameterData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAbioticParameterResponse,
    DeleteAbioticParameterError,
    OptionsLegacyParser<DeleteAbioticParameterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.deleteAbioticParameter({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateAbioticParameterMutation = (
  options?: Partial<OptionsLegacyParser<UpdateAbioticParameterData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateAbioticParameterResponse,
    UpdateAbioticParameterError,
    OptionsLegacyParser<UpdateAbioticParameterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.updateAbioticParameter({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getAccessPointsQueryKey = (options?: OptionsLegacyParser<GetAccessPointsData>) => [
  createQueryKey('getAccessPoints', options)
]

export const getAccessPointsOptions = (options?: OptionsLegacyParser<GetAccessPointsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.getAccessPoints({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getAccessPointsQueryKey(options)
  })
}

export const listFixativesQueryKey = (options?: OptionsLegacyParser<ListFixativesData>) => [
  createQueryKey('listFixatives', options)
]

export const listFixativesOptions = (options?: OptionsLegacyParser<ListFixativesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.listFixatives({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listFixativesQueryKey(options)
  })
}

export const createFixativeQueryKey = (options: OptionsLegacyParser<CreateFixativeData>) => [
  createQueryKey('createFixative', options)
]

export const createFixativeOptions = (options: OptionsLegacyParser<CreateFixativeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.createFixative({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createFixativeQueryKey(options)
  })
}

export const createFixativeMutation = (
  options?: Partial<OptionsLegacyParser<CreateFixativeData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateFixativeResponse,
    CreateFixativeError,
    OptionsLegacyParser<CreateFixativeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.createFixative({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteFixativeMutation = (
  options?: Partial<OptionsLegacyParser<DeleteFixativeData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteFixativeResponse,
    DeleteFixativeError,
    OptionsLegacyParser<DeleteFixativeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.deleteFixative({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateFixativeMutation = (
  options?: Partial<OptionsLegacyParser<UpdateFixativeData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateFixativeResponse,
    UpdateFixativeError,
    OptionsLegacyParser<UpdateFixativeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.updateFixative({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listSamplingMethodsQueryKey = (
  options?: OptionsLegacyParser<ListSamplingMethodsData>
) => [createQueryKey('listSamplingMethods', options)]

export const listSamplingMethodsOptions = (
  options?: OptionsLegacyParser<ListSamplingMethodsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.listSamplingMethods({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSamplingMethodsQueryKey(options)
  })
}

export const createSamplingMethodQueryKey = (
  options: OptionsLegacyParser<CreateSamplingMethodData>
) => [createQueryKey('createSamplingMethod', options)]

export const createSamplingMethodOptions = (
  options: OptionsLegacyParser<CreateSamplingMethodData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.createSamplingMethod({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createSamplingMethodQueryKey(options)
  })
}

export const createSamplingMethodMutation = (
  options?: Partial<OptionsLegacyParser<CreateSamplingMethodData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateSamplingMethodResponse,
    CreateSamplingMethodError,
    OptionsLegacyParser<CreateSamplingMethodData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.createSamplingMethod({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteSamplingMethodMutation = (
  options?: Partial<OptionsLegacyParser<DeleteSamplingMethodData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteSamplingMethodResponse,
    DeleteSamplingMethodError,
    OptionsLegacyParser<DeleteSamplingMethodData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.deleteSamplingMethod({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateSamplingMethodMutation = (
  options?: Partial<OptionsLegacyParser<UpdateSamplingMethodData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateSamplingMethodResponse,
    UpdateSamplingMethodError,
    OptionsLegacyParser<UpdateSamplingMethodData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.updateSamplingMethod({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const createSamplingQueryKey = (options: OptionsLegacyParser<CreateSamplingData>) => [
  createQueryKey('createSampling', options)
]

export const createSamplingOptions = (options: OptionsLegacyParser<CreateSamplingData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SamplingService.createSampling({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createSamplingQueryKey(options)
  })
}

export const createSamplingMutation = (
  options?: Partial<OptionsLegacyParser<CreateSamplingData>>
) => {
  const mutationOptions: UseMutationOptions<
    CreateSamplingResponse,
    CreateSamplingError,
    OptionsLegacyParser<CreateSamplingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.createSampling({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteSamplingMutation = (
  options?: Partial<OptionsLegacyParser<DeleteSamplingData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteSamplingResponse,
    DeleteSamplingError,
    OptionsLegacyParser<DeleteSamplingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.deleteSampling({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateSamplingMutation = (
  options?: Partial<OptionsLegacyParser<UpdateSamplingData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateSamplingResponse,
    UpdateSamplingError,
    OptionsLegacyParser<UpdateSamplingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SamplingService.updateSampling({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listGenesQueryKey = (options?: OptionsLegacyParser<ListGenesData>) => [
  createQueryKey('listGenes', options)
]

export const listGenesOptions = (options?: OptionsLegacyParser<ListGenesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.listGenes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listGenesQueryKey(options)
  })
}

export const createGeneQueryKey = (options: OptionsLegacyParser<CreateGeneData>) => [
  createQueryKey('createGene', options)
]

export const createGeneOptions = (options: OptionsLegacyParser<CreateGeneData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.createGene({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createGeneQueryKey(options)
  })
}

export const createGeneMutation = (options?: Partial<OptionsLegacyParser<CreateGeneData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateGeneResponse,
    CreateGeneError,
    OptionsLegacyParser<CreateGeneData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.createGene({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteGeneMutation = (options?: Partial<OptionsLegacyParser<DeleteGeneData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteGeneResponse,
    DeleteGeneError,
    OptionsLegacyParser<DeleteGeneData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.deleteGene({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateGeneMutation = (options?: Partial<OptionsLegacyParser<UpdateGeneData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateGeneResponse,
    UpdateGeneError,
    OptionsLegacyParser<UpdateGeneData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.updateGene({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listSeqDbsQueryKey = (options?: OptionsLegacyParser<ListSeqDbsData>) => [
  createQueryKey('listSeqDbs', options)
]

export const listSeqDbsOptions = (options?: OptionsLegacyParser<ListSeqDbsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.listSeqDbs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSeqDbsQueryKey(options)
  })
}

export const createSeqDbQueryKey = (options: OptionsLegacyParser<CreateSeqDbData>) => [
  createQueryKey('createSeqDb', options)
]

export const createSeqDbOptions = (options: OptionsLegacyParser<CreateSeqDbData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.createSeqDb({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createSeqDbQueryKey(options)
  })
}

export const createSeqDbMutation = (options?: Partial<OptionsLegacyParser<CreateSeqDbData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateSeqDbResponse,
    CreateSeqDbError,
    OptionsLegacyParser<CreateSeqDbData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.createSeqDb({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteSeqDbMutation = (options?: Partial<OptionsLegacyParser<DeleteSeqDbData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteSeqDbResponse,
    DeleteSeqDbError,
    OptionsLegacyParser<DeleteSeqDbData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.deleteSeqDb({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const updateSeqDbMutation = (options?: Partial<OptionsLegacyParser<UpdateSeqDbData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateSeqDbResponse,
    UpdateSeqDbError,
    OptionsLegacyParser<UpdateSeqDbData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.updateSeqDb({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listSequencesQueryKey = (options?: OptionsLegacyParser<ListSequencesData>) => [
  createQueryKey('listSequences', options)
]

export const listSequencesOptions = (options?: OptionsLegacyParser<ListSequencesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.listSequences({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listSequencesQueryKey(options)
  })
}

export const deleteSequenceMutation = (
  options?: Partial<OptionsLegacyParser<DeleteSequenceData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteSequenceResponse,
    DeleteSequenceError,
    OptionsLegacyParser<DeleteSequenceData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SequencesService.deleteSequence({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getSequenceQueryKey = (options: OptionsLegacyParser<GetSequenceData>) => [
  createQueryKey('getSequence', options)
]

export const getSequenceOptions = (options: OptionsLegacyParser<GetSequenceData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SequencesService.getSequence({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getSequenceQueryKey(options)
  })
}

export const listGeoapifyUsageQueryKey = (options?: OptionsLegacyParser<ListGeoapifyUsageData>) => [
  createQueryKey('listGeoapifyUsage', options)
]

export const listGeoapifyUsageOptions = (options?: OptionsLegacyParser<ListGeoapifyUsageData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ServicesService.listGeoapifyUsage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listGeoapifyUsageQueryKey(options)
  })
}

export const emailSettingsQueryKey = (options?: OptionsLegacyParser<EmailSettingsData>) => [
  createQueryKey('emailSettings', options)
]

export const emailSettingsOptions = (options?: OptionsLegacyParser<EmailSettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.emailSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: emailSettingsQueryKey(options)
  })
}

export const updateEmailSettingsQueryKey = (
  options: OptionsLegacyParser<UpdateEmailSettingsData>
) => [createQueryKey('updateEmailSettings', options)]

export const updateEmailSettingsOptions = (
  options: OptionsLegacyParser<UpdateEmailSettingsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.updateEmailSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: updateEmailSettingsQueryKey(options)
  })
}

export const updateEmailSettingsMutation = (
  options?: Partial<OptionsLegacyParser<UpdateEmailSettingsData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateEmailSettingsResponse,
    UpdateEmailSettingsError,
    OptionsLegacyParser<UpdateEmailSettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.updateEmailSettings({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const testSmtpQueryKey = (options: OptionsLegacyParser<TestSmtpData>) => [
  createQueryKey('testSmtp', options)
]

export const testSmtpOptions = (options: OptionsLegacyParser<TestSmtpData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.testSmtp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: testSmtpQueryKey(options)
  })
}

export const testSmtpMutation = (options?: Partial<OptionsLegacyParser<TestSmtpData>>) => {
  const mutationOptions: UseMutationOptions<
    TestSmtpResponse,
    TestSmtpError,
    OptionsLegacyParser<TestSmtpData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.testSmtp({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const setAppIconQueryKey = (options?: OptionsLegacyParser<SetAppIconData>) => [
  createQueryKey('setAppIcon', options)
]

export const setAppIconOptions = (options?: OptionsLegacyParser<SetAppIconData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.setAppIcon({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: setAppIconQueryKey(options)
  })
}

export const setAppIconMutation = (options?: Partial<OptionsLegacyParser<SetAppIconData>>) => {
  const mutationOptions: UseMutationOptions<
    SetAppIconResponse,
    SetAppIconError,
    OptionsLegacyParser<SetAppIconData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.setAppIcon({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const instanceSettingsQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey('instanceSettings', options)
]

export const instanceSettingsOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.instanceSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: instanceSettingsQueryKey(options)
  })
}

export const updateInstanceSettingsQueryKey = (
  options: OptionsLegacyParser<UpdateInstanceSettingsData>
) => [createQueryKey('updateInstanceSettings', options)]

export const updateInstanceSettingsOptions = (
  options: OptionsLegacyParser<UpdateInstanceSettingsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.updateInstanceSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: updateInstanceSettingsQueryKey(options)
  })
}

export const updateInstanceSettingsMutation = (
  options?: Partial<OptionsLegacyParser<UpdateInstanceSettingsData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateInstanceSettingsResponse,
    UpdateInstanceSettingsError,
    OptionsLegacyParser<UpdateInstanceSettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.updateInstanceSettings({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const securitySettingsQueryKey = (options?: OptionsLegacyParser<SecuritySettingsData>) => [
  createQueryKey('securitySettings', options)
]

export const securitySettingsOptions = (options?: OptionsLegacyParser<SecuritySettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.securitySettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: securitySettingsQueryKey(options)
  })
}

export const updateSecuritySettingsQueryKey = (
  options: OptionsLegacyParser<UpdateSecuritySettingsData>
) => [createQueryKey('updateSecuritySettings', options)]

export const updateSecuritySettingsOptions = (
  options: OptionsLegacyParser<UpdateSecuritySettingsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.updateSecuritySettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: updateSecuritySettingsQueryKey(options)
  })
}

export const updateSecuritySettingsMutation = (
  options?: Partial<OptionsLegacyParser<UpdateSecuritySettingsData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateSecuritySettingsResponse,
    UpdateSecuritySettingsError,
    OptionsLegacyParser<UpdateSecuritySettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.updateSecuritySettings({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const serviceSettingsQueryKey = (options?: OptionsLegacyParser<ServiceSettingsData>) => [
  createQueryKey('serviceSettings', options)
]

export const serviceSettingsOptions = (options?: OptionsLegacyParser<ServiceSettingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await SettingsService.serviceSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: serviceSettingsQueryKey(options)
  })
}

export const updateServiceSettingsMutation = (
  options?: Partial<OptionsLegacyParser<UpdateServiceSettingsData>>
) => {
  const mutationOptions: UseMutationOptions<
    UpdateServiceSettingsResponse,
    UpdateServiceSettingsError,
    OptionsLegacyParser<UpdateServiceSettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await SettingsService.updateServiceSettings({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getTaxonomyQueryKey = (options?: OptionsLegacyParser<GetTaxonomyData>) => [
  createQueryKey('getTaxonomy', options)
]

export const getTaxonomyOptions = (options?: OptionsLegacyParser<GetTaxonomyData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyService.getTaxonomy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getTaxonomyQueryKey(options)
  })
}

export const listTaxaQueryKey = (options?: OptionsLegacyParser<ListTaxaData>) => [
  createQueryKey('listTaxa', options)
]

export const listTaxaOptions = (options?: OptionsLegacyParser<ListTaxaData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyService.listTaxa({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listTaxaQueryKey(options)
  })
}

export const createTaxonQueryKey = (options: OptionsLegacyParser<CreateTaxonData>) => [
  createQueryKey('createTaxon', options)
]

export const createTaxonOptions = (options: OptionsLegacyParser<CreateTaxonData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyService.createTaxon({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: createTaxonQueryKey(options)
  })
}

export const createTaxonMutation = (options?: Partial<OptionsLegacyParser<CreateTaxonData>>) => {
  const mutationOptions: UseMutationOptions<
    CreateTaxonResponse,
    CreateTaxonError,
    OptionsLegacyParser<CreateTaxonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await TaxonomyService.createTaxon({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const deleteTaxonMutation = (options?: Partial<OptionsLegacyParser<DeleteTaxonData>>) => {
  const mutationOptions: UseMutationOptions<
    DeleteTaxonResponse,
    DeleteTaxonError,
    OptionsLegacyParser<DeleteTaxonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await TaxonomyService.deleteTaxon({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const getTaxonQueryKey = (options: OptionsLegacyParser<GetTaxonData>) => [
  createQueryKey('getTaxon', options)
]

export const getTaxonOptions = (options: OptionsLegacyParser<GetTaxonData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyService.getTaxon({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: getTaxonQueryKey(options)
  })
}

export const updateTaxonMutation = (options?: Partial<OptionsLegacyParser<UpdateTaxonData>>) => {
  const mutationOptions: UseMutationOptions<
    UpdateTaxonResponse,
    UpdateTaxonError,
    OptionsLegacyParser<UpdateTaxonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await TaxonomyService.updateTaxon({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const listAnchorsQueryKey = (options?: OptionsLegacyParser<ListAnchorsData>) => [
  createQueryKey('listAnchors', options)
]

export const listAnchorsOptions = (options?: OptionsLegacyParser<ListAnchorsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyGbifService.listAnchors({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: listAnchorsQueryKey(options)
  })
}

export const importGbifMutation = (options?: Partial<OptionsLegacyParser<ImportGbifData>>) => {
  const mutationOptions: UseMutationOptions<
    ImportGbifResponse,
    ImportGbifError,
    OptionsLegacyParser<ImportGbifData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await TaxonomyGbifService.importGbif({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}

export const monitorGbifQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey('monitorGbif', options)
]

export const monitorGbifOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await TaxonomyGbifService.monitorGbif({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: monitorGbifQueryKey(options)
  })
}
