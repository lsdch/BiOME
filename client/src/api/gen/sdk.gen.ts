// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer
} from '@hey-api/client-fetch'
import type {
  ListAbioticParametersData,
  ListAbioticParametersResponse,
  ListAbioticParametersError,
  CreateAbioticParameterData,
  CreateAbioticParameterResponse,
  CreateAbioticParameterError,
  DeleteAbioticParameterData,
  DeleteAbioticParameterResponse,
  DeleteAbioticParameterError,
  UpdateAbioticParameterData,
  UpdateAbioticParameterResponse,
  UpdateAbioticParameterError,
  GetAccessPointsData,
  GetAccessPointsResponse,
  GetAccessPointsError,
  CurrentUserData,
  CurrentUserResponse2,
  CurrentUserError,
  ConfirmEmailData,
  ConfirmEmailResponse,
  ConfirmEmailError,
  ResendEmailVerificationData,
  ResendEmailVerificationResponse,
  ResendEmailVerificationError,
  RequestPasswordResetData,
  RequestPasswordResetResponse,
  RequestPasswordResetError,
  LoginData,
  LoginResponse,
  LoginError,
  LogoutData,
  LogoutResponse,
  LogoutError,
  UpdatePasswordData,
  UpdatePasswordResponse,
  UpdatePasswordError,
  ValidatePasswordTokenData,
  ValidatePasswordTokenResponse,
  ValidatePasswordTokenError,
  ResetPasswordData,
  ResetPasswordResponse,
  ResetPasswordError,
  ListPendingUserRequestsData,
  ListPendingUserRequestsResponse,
  ListPendingUserRequestsError,
  DeletePendingUserRequestData,
  DeletePendingUserRequestResponse,
  DeletePendingUserRequestError,
  GetPendingUserRequestData,
  GetPendingUserRequestResponse,
  GetPendingUserRequestError,
  RefreshSessionData,
  RefreshSessionResponse,
  RefreshSessionError,
  RegisterData,
  RegisterResponse,
  RegisterError,
  ClaimInvitationData,
  ClaimInvitationResponse,
  ClaimInvitationError,
  ListAnchorsData,
  ListAnchorsResponse,
  ListAnchorsError,
  ListBioMaterialData,
  ListBioMaterialResponse,
  ListBioMaterialError,
  UpdateExternalBioMatData,
  UpdateExternalBioMatResponse,
  UpdateExternalBioMatError,
  CreateExternalBioMatData,
  CreateExternalBioMatResponse,
  CreateExternalBioMatError,
  DeleteBioMaterialData,
  DeleteBioMaterialResponse,
  DeleteBioMaterialError,
  GetBioMaterialData,
  GetBioMaterialResponse,
  GetBioMaterialError,
  CrossRefData,
  CrossRefResponse,
  CrossRefError,
  CrossRefBibSearchData,
  CrossRefBibSearchResponse,
  CrossRefBibSearchError,
  ListDatasetsData,
  ListDatasetsResponse,
  ListDatasetsError,
  ListOccurrenceDatasetsData,
  ListOccurrenceDatasetsResponse,
  ListOccurrenceDatasetsError,
  GetOccurrenceDatasetData,
  GetOccurrenceDatasetResponse,
  GetOccurrenceDatasetError,
  TogglePinDatasetData,
  TogglePinDatasetResponse,
  TogglePinDatasetError,
  ListSequenceDatasetsData,
  ListSequenceDatasetsResponse,
  ListSequenceDatasetsError,
  GetSequenceDatasetData,
  GetSequenceDatasetResponse,
  GetSequenceDatasetError,
  ListSiteDatasetsData,
  ListSiteDatasetsResponse,
  ListSiteDatasetsError,
  CreateSiteDatasetData,
  CreateSiteDatasetResponse,
  CreateSiteDatasetError,
  GetSiteDatasetData,
  GetSiteDatasetResponse,
  GetSiteDatasetError,
  DeleteEventData,
  DeleteEventResponse,
  DeleteEventError,
  UpdateEventData,
  UpdateEventResponse,
  UpdateEventError,
  UpdateSpottingData,
  UpdateSpottingResponse,
  UpdateSpottingError,
  ListFixativesData,
  ListFixativesResponse,
  ListFixativesError,
  CreateFixativeData,
  CreateFixativeResponse,
  CreateFixativeError,
  DeleteFixativeData,
  DeleteFixativeResponse,
  DeleteFixativeError,
  UpdateFixativeData,
  UpdateFixativeResponse,
  UpdateFixativeError,
  ListGenesData,
  ListGenesResponse,
  ListGenesError,
  CreateGeneData,
  CreateGeneResponse,
  CreateGeneError,
  DeleteGeneData,
  DeleteGeneResponse,
  DeleteGeneError,
  UpdateGeneData,
  UpdateGeneResponse,
  UpdateGeneError,
  ListGeoapifyUsageData,
  ListGeoapifyUsageResponse,
  ListGeoapifyUsageError,
  ListHabitatGroupsData,
  ListHabitatGroupsResponse,
  ListHabitatGroupsError,
  CreateHabitatGroupData,
  CreateHabitatGroupResponse,
  CreateHabitatGroupError,
  DeleteHabitatGroupData,
  DeleteHabitatGroupResponse,
  DeleteHabitatGroupError,
  UpdateHabitatGroupData,
  UpdateHabitatGroupResponse,
  UpdateHabitatGroupError,
  ImportGbifData,
  ImportGbifResponse,
  ImportGbifError,
  MonitorGbifData,
  MonitorGbifResponse,
  MonitorGbifError,
  ListCountriesData,
  ListCountriesResponse,
  ListCountriesError,
  GetSitesCountByCountryData,
  GetSitesCountByCountryResponse,
  GetSitesCountByCountryError,
  OccurrenceOverviewData,
  OccurrenceOverviewResponse,
  OccurrenceOverviewError,
  ListOrganisationsData,
  ListOrganisationsResponse,
  ListOrganisationsError,
  CreateOrganisationData,
  CreateOrganisationResponse,
  CreateOrganisationError,
  DeleteOrganisationData,
  DeleteOrganisationResponse,
  DeleteOrganisationError,
  UpdateOrganisationData,
  UpdateOrganisationResponse,
  UpdateOrganisationError,
  ListPersonsData,
  ListPersonsResponse,
  ListPersonsError,
  CreatePersonData,
  CreatePersonResponse,
  CreatePersonError,
  DeletePersonData,
  DeletePersonResponse,
  DeletePersonError,
  UpdatePersonData,
  UpdatePersonResponse,
  UpdatePersonError,
  InvitePersonData,
  InvitePersonResponse,
  InvitePersonError,
  ListProgramsData,
  ListProgramsResponse,
  ListProgramsError,
  CreateProgramData,
  CreateProgramResponse,
  CreateProgramError,
  DeleteProgramData,
  DeleteProgramResponse,
  DeleteProgramError,
  UpdateProgramData,
  UpdateProgramResponse,
  UpdateProgramError,
  ListArticlesData,
  ListArticlesResponse,
  ListArticlesError,
  CreateArticleData,
  CreateArticleResponse,
  CreateArticleError,
  DeleteArticleData,
  DeleteArticleResponse,
  DeleteArticleError,
  UpdateArticleData,
  UpdateArticleResponse,
  UpdateArticleError,
  ListSamplingMethodsData,
  ListSamplingMethodsResponse,
  ListSamplingMethodsError,
  CreateSamplingMethodData,
  CreateSamplingMethodResponse,
  CreateSamplingMethodError,
  DeleteSamplingMethodData,
  DeleteSamplingMethodResponse,
  DeleteSamplingMethodError,
  UpdateSamplingMethodData,
  UpdateSamplingMethodResponse,
  UpdateSamplingMethodError,
  CreateSamplingData,
  CreateSamplingResponse,
  CreateSamplingError,
  DeleteSamplingData,
  DeleteSamplingResponse,
  DeleteSamplingError,
  UpdateSamplingData,
  UpdateSamplingResponse,
  UpdateSamplingError,
  ListDataSourcesData,
  ListDataSourcesResponse,
  ListDataSourcesError,
  CreateDataSourceData,
  CreateDataSourceResponse,
  CreateDataSourceError,
  DeleteDataSourceData,
  DeleteDataSourceResponse,
  DeleteDataSourceError,
  UpdateDataSourceData,
  UpdateDataSourceResponse,
  UpdateDataSourceError,
  ListSequencesData,
  ListSequencesResponse,
  ListSequencesError,
  DeleteSequenceData,
  DeleteSequenceResponse,
  DeleteSequenceError,
  GetSequenceData,
  GetSequenceResponse,
  GetSequenceError,
  EmailSettingsData,
  EmailSettingsResponse,
  EmailSettingsError,
  UpdateEmailSettingsData,
  UpdateEmailSettingsResponse,
  UpdateEmailSettingsError,
  TestSmtpData,
  TestSmtpResponse,
  TestSmtpError,
  SetAppIconData,
  SetAppIconResponse,
  SetAppIconError,
  InstanceSettingsData,
  InstanceSettingsResponse,
  InstanceSettingsError,
  UpdateInstanceSettingsData,
  UpdateInstanceSettingsResponse,
  UpdateInstanceSettingsError,
  SecuritySettingsData,
  SecuritySettingsResponse,
  SecuritySettingsError,
  UpdateSecuritySettingsData,
  UpdateSecuritySettingsResponse,
  UpdateSecuritySettingsError,
  ServiceSettingsData,
  ServiceSettingsResponse,
  ServiceSettingsError,
  UpdateServiceSettingsData,
  UpdateServiceSettingsResponse,
  UpdateServiceSettingsError,
  ListSitesData,
  ListSitesResponse,
  ListSitesError,
  CreateSiteData,
  CreateSiteResponse,
  CreateSiteError,
  GetSiteData,
  GetSiteResponse,
  GetSiteError,
  UpdateSiteData,
  UpdateSiteResponse,
  UpdateSiteError,
  CreateEventData,
  CreateEventResponse,
  CreateEventError,
  GetTaxonomyData,
  GetTaxonomyResponse,
  GetTaxonomyError,
  ListTaxaData,
  ListTaxaResponse,
  ListTaxaError,
  CreateTaxonData,
  CreateTaxonResponse,
  CreateTaxonError,
  DeleteTaxonData,
  DeleteTaxonResponse,
  DeleteTaxonError,
  GetTaxonData,
  GetTaxonResponse,
  GetTaxonError,
  UpdateTaxonData,
  UpdateTaxonResponse,
  UpdateTaxonError
} from './types.gen'
import {
  listAbioticParametersResponseTransformer,
  createAbioticParameterResponseTransformer,
  deleteAbioticParameterResponseTransformer,
  updateAbioticParameterResponseTransformer,
  loginResponseTransformer,
  listPendingUserRequestsResponseTransformer,
  deletePendingUserRequestResponseTransformer,
  getPendingUserRequestResponseTransformer,
  refreshSessionResponseTransformer,
  claimInvitationResponseTransformer,
  listAnchorsResponseTransformer,
  listBioMaterialResponseTransformer,
  updateExternalBioMatResponseTransformer,
  createExternalBioMatResponseTransformer,
  deleteBioMaterialResponseTransformer,
  getBioMaterialResponseTransformer,
  listDatasetsResponseTransformer,
  listOccurrenceDatasetsResponseTransformer,
  getOccurrenceDatasetResponseTransformer,
  togglePinDatasetResponseTransformer,
  listSequenceDatasetsResponseTransformer,
  getSequenceDatasetResponseTransformer,
  listSiteDatasetsResponseTransformer,
  createSiteDatasetResponseTransformer,
  getSiteDatasetResponseTransformer,
  deleteEventResponseTransformer,
  updateEventResponseTransformer,
  updateSpottingResponseTransformer,
  listFixativesResponseTransformer,
  createFixativeResponseTransformer,
  deleteFixativeResponseTransformer,
  updateFixativeResponseTransformer,
  listGenesResponseTransformer,
  createGeneResponseTransformer,
  deleteGeneResponseTransformer,
  updateGeneResponseTransformer,
  listHabitatGroupsResponseTransformer,
  createHabitatGroupResponseTransformer,
  deleteHabitatGroupResponseTransformer,
  updateHabitatGroupResponseTransformer,
  listOrganisationsResponseTransformer,
  createOrganisationResponseTransformer,
  deleteOrganisationResponseTransformer,
  updateOrganisationResponseTransformer,
  listPersonsResponseTransformer,
  createPersonResponseTransformer,
  deletePersonResponseTransformer,
  updatePersonResponseTransformer,
  listProgramsResponseTransformer,
  createProgramResponseTransformer,
  deleteProgramResponseTransformer,
  updateProgramResponseTransformer,
  listArticlesResponseTransformer,
  createArticleResponseTransformer,
  deleteArticleResponseTransformer,
  updateArticleResponseTransformer,
  listSamplingMethodsResponseTransformer,
  createSamplingMethodResponseTransformer,
  deleteSamplingMethodResponseTransformer,
  updateSamplingMethodResponseTransformer,
  createSamplingResponseTransformer,
  deleteSamplingResponseTransformer,
  updateSamplingResponseTransformer,
  listDataSourcesResponseTransformer,
  createDataSourceResponseTransformer,
  deleteDataSourceResponseTransformer,
  updateDataSourceResponseTransformer,
  listSequencesResponseTransformer,
  deleteSequenceResponseTransformer,
  getSequenceResponseTransformer,
  listSitesResponseTransformer,
  createSiteResponseTransformer,
  getSiteResponseTransformer,
  updateSiteResponseTransformer,
  createEventResponseTransformer,
  getTaxonomyResponseTransformer,
  listTaxaResponseTransformer,
  createTaxonResponseTransformer,
  deleteTaxonResponseTransformer,
  getTaxonResponseTransformer,
  updateTaxonResponseTransformer
} from './transformers.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
}

export class SamplingService {
  /**
   * List abiotic parameters
   */
  public static listAbioticParameters<ThrowOnError extends boolean = false>(
    options?: Options<ListAbioticParametersData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListAbioticParametersResponse,
      ListAbioticParametersError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listAbioticParametersResponseTransformer,
      url: '/abiotic',
      ...options
    })
  }

  /**
   * Create abiotic parameter
   */
  public static createAbioticParameter<ThrowOnError extends boolean = false>(
    options: Options<CreateAbioticParameterData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateAbioticParameterResponse,
      CreateAbioticParameterError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createAbioticParameterResponseTransformer,
      url: '/abiotic',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete abiotic parameter
   */
  public static deleteAbioticParameter<ThrowOnError extends boolean = false>(
    options: Options<DeleteAbioticParameterData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteAbioticParameterResponse,
      DeleteAbioticParameterError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteAbioticParameterResponseTransformer,
      url: '/abiotic/{code}',
      ...options
    })
  }

  /**
   * Update abiotic parameter
   */
  public static updateAbioticParameter<ThrowOnError extends boolean = false>(
    options: Options<UpdateAbioticParameterData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateAbioticParameterResponse,
      UpdateAbioticParameterError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateAbioticParameterResponseTransformer,
      url: '/abiotic/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * List access points
   */
  public static getAccessPoints<ThrowOnError extends boolean = false>(
    options?: Options<GetAccessPointsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAccessPointsResponse,
      GetAccessPointsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/access-points',
      ...options
    })
  }

  /**
   * List fixatives
   */
  public static listFixatives<ThrowOnError extends boolean = false>(
    options?: Options<ListFixativesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListFixativesResponse,
      ListFixativesError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listFixativesResponseTransformer,
      url: '/fixatives',
      ...options
    })
  }

  /**
   * Create fixative
   */
  public static createFixative<ThrowOnError extends boolean = false>(
    options: Options<CreateFixativeData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateFixativeResponse,
      CreateFixativeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createFixativeResponseTransformer,
      url: '/fixatives',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete fixative
   */
  public static deleteFixative<ThrowOnError extends boolean = false>(
    options: Options<DeleteFixativeData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteFixativeResponse,
      DeleteFixativeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteFixativeResponseTransformer,
      url: '/fixatives/{code}',
      ...options
    })
  }

  /**
   * Update fixative
   */
  public static updateFixative<ThrowOnError extends boolean = false>(
    options: Options<UpdateFixativeData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateFixativeResponse,
      UpdateFixativeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateFixativeResponseTransformer,
      url: '/fixatives/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * List sampling methods
   */
  public static listSamplingMethods<ThrowOnError extends boolean = false>(
    options?: Options<ListSamplingMethodsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListSamplingMethodsResponse,
      ListSamplingMethodsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listSamplingMethodsResponseTransformer,
      url: '/sampling-methods',
      ...options
    })
  }

  /**
   * Create sampling method
   */
  public static createSamplingMethod<ThrowOnError extends boolean = false>(
    options: Options<CreateSamplingMethodData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateSamplingMethodResponse,
      CreateSamplingMethodError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createSamplingMethodResponseTransformer,
      url: '/sampling-methods',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete sampling method
   */
  public static deleteSamplingMethod<ThrowOnError extends boolean = false>(
    options: Options<DeleteSamplingMethodData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteSamplingMethodResponse,
      DeleteSamplingMethodError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteSamplingMethodResponseTransformer,
      url: '/sampling-methods/{code}',
      ...options
    })
  }

  /**
   * Update sampling method
   */
  public static updateSamplingMethod<ThrowOnError extends boolean = false>(
    options: Options<UpdateSamplingMethodData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateSamplingMethodResponse,
      UpdateSamplingMethodError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateSamplingMethodResponseTransformer,
      url: '/sampling-methods/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Create sampling action
   */
  public static createSampling<ThrowOnError extends boolean = false>(
    options: Options<CreateSamplingData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateSamplingResponse,
      CreateSamplingError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createSamplingResponseTransformer,
      url: '/samplings',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete sampling action
   */
  public static deleteSampling<ThrowOnError extends boolean = false>(
    options: Options<DeleteSamplingData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteSamplingResponse,
      DeleteSamplingError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteSamplingResponseTransformer,
      url: '/samplings/{id}',
      ...options
    })
  }

  /**
   * Update sampling action
   */
  public static updateSampling<ThrowOnError extends boolean = false>(
    options: Options<UpdateSamplingData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateSamplingResponse,
      UpdateSamplingError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateSamplingResponseTransformer,
      url: '/samplings/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class AccountService {
  /**
   * Current user
   * Get infos of currently authenticated user account
   */
  public static currentUser<ThrowOnError extends boolean = false>(
    options?: Options<CurrentUserData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      CurrentUserResponse2,
      CurrentUserError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/account',
      ...options
    })
  }

  /**
   * Confirm e-mail
   * Confirms the validity of an e-mail address associated to an account, using a token issued at the end of user registration.
   */
  public static confirmEmail<ThrowOnError extends boolean = false>(
    options?: Options<ConfirmEmailData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ConfirmEmailResponse,
      ConfirmEmailError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/account/email-confirmation',
      ...options
    })
  }

  /**
   * Resend e-mail verification link
   * Sends again a verification link for the provided e-mail address, if it matches a currently not verified user account.
   */
  public static resendEmailVerification<ThrowOnError extends boolean = false>(
    options: Options<ResendEmailVerificationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ResendEmailVerificationResponse,
      ResendEmailVerificationError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/account/email-confirmation/resend',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Request password reset
   * Requests sending a link containing a password reset token to your account email address. The link target can be provided by the client in the request body, or defaults to the API endpoint: `/api/v1/account/password-reset`. In this case, setting the new password is expected to be done programatically, e.g. through a curl request.
   */
  public static requestPasswordReset<ThrowOnError extends boolean = false>(
    options: Options<RequestPasswordResetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      RequestPasswordResetResponse,
      RequestPasswordResetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/account/forgotten-password',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Login
   * Authenticate using user credentials
   */
  public static login<ThrowOnError extends boolean = false>(
    options: Options<LoginData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<LoginResponse, LoginError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: loginResponseTransformer,
      url: '/account/login',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Logout
   * Logout from current user session by revoking session cookies
   */
  public static logout<ThrowOnError extends boolean = false>(
    options: Options<LogoutData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<LogoutResponse, LogoutError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/account/logout',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Update password
   * Updates password of currently authenticated user
   */
  public static updatePassword<ThrowOnError extends boolean = false>(
    options: Options<UpdatePasswordData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UpdatePasswordResponse,
      UpdatePasswordError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/account/password',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Validate password token
   * Verifies that the password token is valid and can be used to reset a password
   */
  public static validatePasswordToken<ThrowOnError extends boolean = false>(
    options: Options<ValidatePasswordTokenData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      ValidatePasswordTokenResponse,
      ValidatePasswordTokenError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/account/password-reset',
      ...options
    })
  }

  /**
   * Reset password
   * Set a new password using a previously issued reset token
   */
  public static resetPassword<ThrowOnError extends boolean = false>(
    options: Options<ResetPasswordData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ResetPasswordResponse,
      ResetPasswordError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/account/password-reset',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * List pending user requests
   * Lists all account requests pending validation from an administrator
   */
  public static listPendingUserRequests<ThrowOnError extends boolean = false>(
    options?: Options<ListPendingUserRequestsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListPendingUserRequestsResponse,
      ListPendingUserRequestsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listPendingUserRequestsResponseTransformer,
      url: '/account/pending',
      ...options
    })
  }

  /**
   * Delete pending user request
   * Delete account request pending validation using the associated email
   */
  public static deletePendingUserRequest<ThrowOnError extends boolean = false>(
    options: Options<DeletePendingUserRequestData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeletePendingUserRequestResponse,
      DeletePendingUserRequestError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deletePendingUserRequestResponseTransformer,
      url: '/account/pending/{email}',
      ...options
    })
  }

  /**
   * Get pending user request
   * Get account request pending validation using the associated email
   */
  public static getPendingUserRequest<ThrowOnError extends boolean = false>(
    options?: Options<GetPendingUserRequestData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetPendingUserRequestResponse,
      GetPendingUserRequestError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: getPendingUserRequestResponseTransformer,
      url: '/account/pending/{email}',
      ...options
    })
  }

  /**
   * Refresh auth token
   * Refresh session using refresh token
   */
  public static refreshSession<ThrowOnError extends boolean = false>(
    options: Options<RefreshSessionData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      RefreshSessionResponse,
      RefreshSessionError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: refreshSessionResponseTransformer,
      url: '/account/refresh',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Register new account
   * Register a new account that is initially pending, and needs to be activated by an administrator. An email is sent to the registered e-mail address with a verification link. The target URL can be set by the client, otherwise it defaults to the API endpoint: `/api/v1/account/email-confirmation`
   */
  public static register<ThrowOnError extends boolean = false>(
    options: Options<RegisterData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<RegisterResponse, RegisterError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/account/register',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Claim invitation
   * Register an account with pre-assigned role and identity, using an invitation token
   */
  public static claimInvitation<ThrowOnError extends boolean = false>(
    options: Options<ClaimInvitationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ClaimInvitationResponse,
      ClaimInvitationError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: claimInvitationResponseTransformer,
      url: '/account/register/{token}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class TaxonomyGbifService {
  /**
   * List GBIF anchor clades
   */
  public static listAnchors<ThrowOnError extends boolean = false>(
    options?: Options<ListAnchorsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListAnchorsResponse,
      ListAnchorsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listAnchorsResponseTransformer,
      url: '/anchors/',
      ...options
    })
  }

  /**
   * Import GBIF clade
   */
  public static importGbif<ThrowOnError extends boolean = false>(
    options: Options<ImportGbifData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<ImportGbifResponse, ImportGbifError, ThrowOnError>(
      {
        security: [
          {
            scheme: 'bearer',
            type: 'http'
          }
        ],
        url: '/import/taxonomy',
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...options?.headers
        }
      }
    )
  }

  /**
   * Monitor GBIF taxonomy imports
   */
  public static monitorGbif<ThrowOnError extends boolean = false>(
    options?: Options<MonitorGbifData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      MonitorGbifResponse,
      MonitorGbifError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/import/taxonomy/monitor',
      ...options
    })
  }
}

export class SamplesService {
  /**
   * List bio-material
   * Both internal and external
   */
  public static listBioMaterial<ThrowOnError extends boolean = false>(
    options?: Options<ListBioMaterialData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListBioMaterialResponse,
      ListBioMaterialError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listBioMaterialResponseTransformer,
      url: '/bio-material',
      ...options
    })
  }

  /**
   * Update external bio-material
   */
  public static updateExternalBioMat<ThrowOnError extends boolean = false>(
    options: Options<UpdateExternalBioMatData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateExternalBioMatResponse,
      UpdateExternalBioMatError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateExternalBioMatResponseTransformer,
      url: '/bio-material/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Create external bio-material
   */
  public static createExternalBioMat<ThrowOnError extends boolean = false>(
    options: Options<CreateExternalBioMatData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateExternalBioMatResponse,
      CreateExternalBioMatError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createExternalBioMatResponseTransformer,
      url: '/bio-material/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete bio-material
   * Delete any (internal/external) bio-material record by its code
   */
  public static deleteBioMaterial<ThrowOnError extends boolean = false>(
    options: Options<DeleteBioMaterialData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteBioMaterialResponse,
      DeleteBioMaterialError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteBioMaterialResponseTransformer,
      url: '/bio-material/{code}',
      ...options
    })
  }

  /**
   * Get bio-material
   * Both internal and external
   */
  public static getBioMaterial<ThrowOnError extends boolean = false>(
    options: Options<GetBioMaterialData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetBioMaterialResponse,
      GetBioMaterialError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: getBioMaterialResponseTransformer,
      url: '/bio-material/{code}',
      ...options
    })
  }
}

export class ReferencesService {
  /**
   * Retrieve article infos from DOI
   */
  public static crossRef<ThrowOnError extends boolean = false>(
    options: Options<CrossRefData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<CrossRefResponse, CrossRefError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/crossref',
      ...options
    })
  }

  /**
   * Retrieve article infos from query string
   */
  public static crossRefBibSearch<ThrowOnError extends boolean = false>(
    options: Options<CrossRefBibSearchData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CrossRefBibSearchResponse,
      CrossRefBibSearchError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/crossref',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * List articles
   */
  public static listArticles<ThrowOnError extends boolean = false>(
    options?: Options<ListArticlesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListArticlesResponse,
      ListArticlesError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listArticlesResponseTransformer,
      url: '/references',
      ...options
    })
  }

  /**
   * Create article
   */
  public static createArticle<ThrowOnError extends boolean = false>(
    options: Options<CreateArticleData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateArticleResponse,
      CreateArticleError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createArticleResponseTransformer,
      url: '/references',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete article
   */
  public static deleteArticle<ThrowOnError extends boolean = false>(
    options: Options<DeleteArticleData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteArticleResponse,
      DeleteArticleError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteArticleResponseTransformer,
      url: '/references/{code}',
      ...options
    })
  }

  /**
   * Update article
   */
  public static updateArticle<ThrowOnError extends boolean = false>(
    options: Options<UpdateArticleData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateArticleResponse,
      UpdateArticleError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateArticleResponseTransformer,
      url: '/references/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class DatasetsService {
  /**
   * List all datasets
   * List all datasets with optional filters and category discriminator
   */
  public static listDatasets<ThrowOnError extends boolean = false>(
    options?: Options<ListDatasetsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListDatasetsResponse,
      ListDatasetsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listDatasetsResponseTransformer,
      url: '/datasets',
      ...options
    })
  }

  /**
   * List occurrence datasets
   * List all occurrence datasets
   */
  public static listOccurrenceDatasets<ThrowOnError extends boolean = false>(
    options?: Options<ListOccurrenceDatasetsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListOccurrenceDatasetsResponse,
      ListOccurrenceDatasetsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listOccurrenceDatasetsResponseTransformer,
      url: '/datasets/occurrence',
      ...options
    })
  }

  /**
   * Get occurrence dataset
   * Get infos for an occurrence dataset
   */
  public static getOccurrenceDataset<ThrowOnError extends boolean = false>(
    options: Options<GetOccurrenceDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetOccurrenceDatasetResponse,
      GetOccurrenceDatasetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: getOccurrenceDatasetResponseTransformer,
      url: '/datasets/occurrence/{slug}',
      ...options
    })
  }

  /**
   * Pin/unpin dataset
   * Pin or unpin dataset from from dashboard priority display
   */
  public static togglePinDataset<ThrowOnError extends boolean = false>(
    options: Options<TogglePinDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      TogglePinDatasetResponse,
      TogglePinDatasetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: togglePinDatasetResponseTransformer,
      url: '/datasets/pin/{slug}',
      ...options
    })
  }

  /**
   * List sequence datasets
   * List all sequence datasets
   */
  public static listSequenceDatasets<ThrowOnError extends boolean = false>(
    options?: Options<ListSequenceDatasetsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListSequenceDatasetsResponse,
      ListSequenceDatasetsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listSequenceDatasetsResponseTransformer,
      url: '/datasets/sequences',
      ...options
    })
  }

  /**
   * Get sequence dataset
   * Get infos for an sequence dataset
   */
  public static getSequenceDataset<ThrowOnError extends boolean = false>(
    options: Options<GetSequenceDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetSequenceDatasetResponse,
      GetSequenceDatasetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: getSequenceDatasetResponseTransformer,
      url: '/datasets/sequences/{slug}',
      ...options
    })
  }

  /**
   * List site datasets
   * List all site datasets
   */
  public static listSiteDatasets<ThrowOnError extends boolean = false>(
    options?: Options<ListSiteDatasetsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListSiteDatasetsResponse,
      ListSiteDatasetsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listSiteDatasetsResponseTransformer,
      url: '/datasets/sites',
      ...options
    })
  }

  /**
   * Create site dataset
   * Create a new site dataset with new or existing sites
   */
  public static createSiteDataset<ThrowOnError extends boolean = false>(
    options: Options<CreateSiteDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateSiteDatasetResponse,
      CreateSiteDatasetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createSiteDatasetResponseTransformer,
      url: '/datasets/sites',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Get site dataset
   * Get infos for a site dataset
   */
  public static getSiteDataset<ThrowOnError extends boolean = false>(
    options: Options<GetSiteDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetSiteDatasetResponse,
      GetSiteDatasetError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: getSiteDatasetResponseTransformer,
      url: '/datasets/sites/{slug}',
      ...options
    })
  }
}

export class EventsService {
  /**
   * Delete event
   */
  public static deleteEvent<ThrowOnError extends boolean = false>(
    options: Options<DeleteEventData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteEventResponse,
      DeleteEventError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteEventResponseTransformer,
      url: '/events/{id}',
      ...options
    })
  }

  /**
   * Update event
   */
  public static updateEvent<ThrowOnError extends boolean = false>(
    options: Options<UpdateEventData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateEventResponse,
      UpdateEventError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateEventResponseTransformer,
      url: '/events/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Update spotting
   */
  public static updateSpotting<ThrowOnError extends boolean = false>(
    options: Options<UpdateSpottingData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<
      UpdateSpottingResponse,
      UpdateSpottingError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateSpottingResponseTransformer,
      url: '/events/{id}/spottings',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * List programs
   */
  public static listPrograms<ThrowOnError extends boolean = false>(
    options?: Options<ListProgramsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListProgramsResponse,
      ListProgramsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listProgramsResponseTransformer,
      url: '/programs',
      ...options
    })
  }

  /**
   * Create program
   */
  public static createProgram<ThrowOnError extends boolean = false>(
    options: Options<CreateProgramData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateProgramResponse,
      CreateProgramError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createProgramResponseTransformer,
      url: '/programs',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete program
   */
  public static deleteProgram<ThrowOnError extends boolean = false>(
    options: Options<DeleteProgramData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteProgramResponse,
      DeleteProgramError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteProgramResponseTransformer,
      url: '/programs/{code}',
      ...options
    })
  }

  /**
   * Update program
   */
  public static updateProgram<ThrowOnError extends boolean = false>(
    options: Options<UpdateProgramData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateProgramResponse,
      UpdateProgramError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateProgramResponseTransformer,
      url: '/programs/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class SequencesService {
  /**
   * List genes
   */
  public static listGenes<ThrowOnError extends boolean = false>(
    options?: Options<ListGenesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<ListGenesResponse, ListGenesError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listGenesResponseTransformer,
      url: '/genes',
      ...options
    })
  }

  /**
   * Create gene
   */
  public static createGene<ThrowOnError extends boolean = false>(
    options: Options<CreateGeneData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateGeneResponse,
      CreateGeneError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createGeneResponseTransformer,
      url: '/genes',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete gene
   */
  public static deleteGene<ThrowOnError extends boolean = false>(
    options: Options<DeleteGeneData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteGeneResponse,
      DeleteGeneError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteGeneResponseTransformer,
      url: '/genes/{code}',
      ...options
    })
  }

  /**
   * Update gene
   */
  public static updateGene<ThrowOnError extends boolean = false>(
    options: Options<UpdateGeneData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateGeneResponse,
      UpdateGeneError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateGeneResponseTransformer,
      url: '/genes/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * List external data sources
   */
  public static listDataSources<ThrowOnError extends boolean = false>(
    options?: Options<ListDataSourcesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListDataSourcesResponse,
      ListDataSourcesError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listDataSourcesResponseTransformer,
      url: '/seq-databases',
      ...options
    })
  }

  /**
   * Register external data source
   */
  public static createDataSource<ThrowOnError extends boolean = false>(
    options: Options<CreateDataSourceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateDataSourceResponse,
      CreateDataSourceError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createDataSourceResponseTransformer,
      url: '/seq-databases',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete external data source
   */
  public static deleteDataSource<ThrowOnError extends boolean = false>(
    options: Options<DeleteDataSourceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteDataSourceResponse,
      DeleteDataSourceError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteDataSourceResponseTransformer,
      url: '/seq-databases/{code}',
      ...options
    })
  }

  /**
   * Update external data source
   */
  public static updateDataSource<ThrowOnError extends boolean = false>(
    options: Options<UpdateDataSourceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateDataSourceResponse,
      UpdateDataSourceError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateDataSourceResponseTransformer,
      url: '/seq-databases/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * List sequences
   */
  public static listSequences<ThrowOnError extends boolean = false>(
    options?: Options<ListSequencesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListSequencesResponse,
      ListSequencesError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listSequencesResponseTransformer,
      url: '/sequences',
      ...options
    })
  }

  /**
   * Delete sequence
   */
  public static deleteSequence<ThrowOnError extends boolean = false>(
    options: Options<DeleteSequenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteSequenceResponse,
      DeleteSequenceError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteSequenceResponseTransformer,
      url: '/sequences/{code}',
      ...options
    })
  }

  /**
   * Get sequence
   */
  public static getSequence<ThrowOnError extends boolean = false>(
    options: Options<GetSequenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetSequenceResponse,
      GetSequenceError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: getSequenceResponseTransformer,
      url: '/sequences/{code}',
      ...options
    })
  }
}

export class ServicesService {
  /**
   * List Geoapify usage
   */
  public static listGeoapifyUsage<ThrowOnError extends boolean = false>(
    options?: Options<ListGeoapifyUsageData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListGeoapifyUsageResponse,
      ListGeoapifyUsageError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/geoapify',
      ...options
    })
  }
}

export class HabitatsService {
  /**
   * List habitats
   */
  public static listHabitatGroups<ThrowOnError extends boolean = false>(
    options?: Options<ListHabitatGroupsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListHabitatGroupsResponse,
      ListHabitatGroupsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listHabitatGroupsResponseTransformer,
      url: '/habitats',
      ...options
    })
  }

  /**
   * Create habitat group
   */
  public static createHabitatGroup<ThrowOnError extends boolean = false>(
    options: Options<CreateHabitatGroupData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateHabitatGroupResponse,
      CreateHabitatGroupError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createHabitatGroupResponseTransformer,
      url: '/habitats',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete habitat group
   */
  public static deleteHabitatGroup<ThrowOnError extends boolean = false>(
    options: Options<DeleteHabitatGroupData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteHabitatGroupResponse,
      DeleteHabitatGroupError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteHabitatGroupResponseTransformer,
      url: '/habitats/{code}',
      ...options
    })
  }

  /**
   * Update habitat group
   */
  public static updateHabitatGroup<ThrowOnError extends boolean = false>(
    options: Options<UpdateHabitatGroupData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateHabitatGroupResponse,
      UpdateHabitatGroupError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateHabitatGroupResponseTransformer,
      url: '/habitats/{label}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class LocationService {
  /**
   * List countries
   */
  public static listCountries<ThrowOnError extends boolean = false>(
    options?: Options<ListCountriesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListCountriesResponse,
      ListCountriesError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/locations/countries',
      ...options
    })
  }

  /**
   * Get country list with sites count
   */
  public static getSitesCountByCountry<ThrowOnError extends boolean = false>(
    options?: Options<GetSitesCountByCountryData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetSitesCountByCountryResponse,
      GetSitesCountByCountryError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/locations/countries/sites-count',
      ...options
    })
  }

  /**
   * List sites
   * List all registered sites
   */
  public static listSites<ThrowOnError extends boolean = false>(
    options?: Options<ListSitesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<ListSitesResponse, ListSitesError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listSitesResponseTransformer,
      url: '/sites',
      ...options
    })
  }

  /**
   * Create site
   * Create site infos using its code
   */
  public static createSite<ThrowOnError extends boolean = false>(
    options: Options<CreateSiteData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateSiteResponse,
      CreateSiteError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createSiteResponseTransformer,
      url: '/sites',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Get site
   * Get site infos using its code
   */
  public static getSite<ThrowOnError extends boolean = false>(
    options: Options<GetSiteData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<GetSiteResponse, GetSiteError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: getSiteResponseTransformer,
      url: '/sites/{code}',
      ...options
    })
  }

  /**
   * Update site
   * Update site infos using its code
   */
  public static updateSite<ThrowOnError extends boolean = false>(
    options: Options<UpdateSiteData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateSiteResponse,
      UpdateSiteError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateSiteResponseTransformer,
      url: '/sites/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Create event
   * Register event on a site identified by its code
   */
  public static createEvent<ThrowOnError extends boolean = false>(
    options: Options<CreateEventData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateEventResponse,
      CreateEventError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createEventResponseTransformer,
      url: '/sites/{code}/events',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class CountriesService {
  /**
   * List countries
   */
  public static listCountries<ThrowOnError extends boolean = false>(
    options?: Options<ListCountriesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListCountriesResponse,
      ListCountriesError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/locations/countries',
      ...options
    })
  }

  /**
   * Get country list with sites count
   */
  public static getSitesCountByCountry<ThrowOnError extends boolean = false>(
    options?: Options<GetSitesCountByCountryData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetSitesCountByCountryResponse,
      GetSitesCountByCountryError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/locations/countries/sites-count',
      ...options
    })
  }
}

export class OccurrencesService {
  /**
   * Occurrences overview
   */
  public static occurrenceOverview<ThrowOnError extends boolean = false>(
    options?: Options<OccurrenceOverviewData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      OccurrenceOverviewResponse,
      OccurrenceOverviewError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/occurrences/overview',
      ...options
    })
  }
}

export class PeopleService {
  /**
   * List organisations
   */
  public static listOrganisations<ThrowOnError extends boolean = false>(
    options?: Options<ListOrganisationsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListOrganisationsResponse,
      ListOrganisationsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listOrganisationsResponseTransformer,
      url: '/organisations',
      ...options
    })
  }

  /**
   * Create organisation
   */
  public static createOrganisation<ThrowOnError extends boolean = false>(
    options: Options<CreateOrganisationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateOrganisationResponse,
      CreateOrganisationError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createOrganisationResponseTransformer,
      url: '/organisations',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete organisation
   */
  public static deleteOrganisation<ThrowOnError extends boolean = false>(
    options: Options<DeleteOrganisationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteOrganisationResponse,
      DeleteOrganisationError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteOrganisationResponseTransformer,
      url: '/organisations/{code}',
      ...options
    })
  }

  /**
   * Update organisation
   */
  public static updateOrganisation<ThrowOnError extends boolean = false>(
    options: Options<UpdateOrganisationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateOrganisationResponse,
      UpdateOrganisationError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateOrganisationResponseTransformer,
      url: '/organisations/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * List persons
   */
  public static listPersons<ThrowOnError extends boolean = false>(
    options?: Options<ListPersonsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListPersonsResponse,
      ListPersonsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listPersonsResponseTransformer,
      url: '/persons',
      ...options
    })
  }

  /**
   * Create person
   */
  public static createPerson<ThrowOnError extends boolean = false>(
    options: Options<CreatePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreatePersonResponse,
      CreatePersonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createPersonResponseTransformer,
      url: '/persons',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete person
   */
  public static deletePerson<ThrowOnError extends boolean = false>(
    options: Options<DeletePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeletePersonResponse,
      DeletePersonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deletePersonResponseTransformer,
      url: '/persons/{id}',
      ...options
    })
  }

  /**
   * Update person
   */
  public static updatePerson<ThrowOnError extends boolean = false>(
    options: Options<UpdatePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdatePersonResponse,
      UpdatePersonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updatePersonResponseTransformer,
      url: '/persons/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Invite person
   * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
   */
  public static invitePerson<ThrowOnError extends boolean = false>(
    options: Options<InvitePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      InvitePersonResponse,
      InvitePersonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/persons/{id}/invite',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class OrganisationService {
  /**
   * List organisations
   */
  public static listOrganisations<ThrowOnError extends boolean = false>(
    options?: Options<ListOrganisationsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListOrganisationsResponse,
      ListOrganisationsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listOrganisationsResponseTransformer,
      url: '/organisations',
      ...options
    })
  }

  /**
   * Create organisation
   */
  public static createOrganisation<ThrowOnError extends boolean = false>(
    options: Options<CreateOrganisationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateOrganisationResponse,
      CreateOrganisationError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createOrganisationResponseTransformer,
      url: '/organisations',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete organisation
   */
  public static deleteOrganisation<ThrowOnError extends boolean = false>(
    options: Options<DeleteOrganisationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteOrganisationResponse,
      DeleteOrganisationError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteOrganisationResponseTransformer,
      url: '/organisations/{code}',
      ...options
    })
  }

  /**
   * Update organisation
   */
  public static updateOrganisation<ThrowOnError extends boolean = false>(
    options: Options<UpdateOrganisationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateOrganisationResponse,
      UpdateOrganisationError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateOrganisationResponseTransformer,
      url: '/organisations/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class PersonService {
  /**
   * List persons
   */
  public static listPersons<ThrowOnError extends boolean = false>(
    options?: Options<ListPersonsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListPersonsResponse,
      ListPersonsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: listPersonsResponseTransformer,
      url: '/persons',
      ...options
    })
  }

  /**
   * Create person
   */
  public static createPerson<ThrowOnError extends boolean = false>(
    options: Options<CreatePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreatePersonResponse,
      CreatePersonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createPersonResponseTransformer,
      url: '/persons',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete person
   */
  public static deletePerson<ThrowOnError extends boolean = false>(
    options: Options<DeletePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeletePersonResponse,
      DeletePersonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deletePersonResponseTransformer,
      url: '/persons/{id}',
      ...options
    })
  }

  /**
   * Update person
   */
  public static updatePerson<ThrowOnError extends boolean = false>(
    options: Options<UpdatePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdatePersonResponse,
      UpdatePersonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updatePersonResponseTransformer,
      url: '/persons/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Invite person
   * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
   */
  public static invitePerson<ThrowOnError extends boolean = false>(
    options: Options<InvitePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      InvitePersonResponse,
      InvitePersonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/persons/{id}/invite',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class SettingsService {
  /**
   * Email settings
   */
  public static emailSettings<ThrowOnError extends boolean = false>(
    options?: Options<EmailSettingsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      EmailSettingsResponse,
      EmailSettingsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/emailing',
      ...options
    })
  }

  /**
   * Update email settings
   */
  public static updateEmailSettings<ThrowOnError extends boolean = false>(
    options: Options<UpdateEmailSettingsData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UpdateEmailSettingsResponse,
      UpdateEmailSettingsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/emailing',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Test SMTP connection
   */
  public static testSmtp<ThrowOnError extends boolean = false>(
    options: Options<TestSmtpData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<TestSmtpResponse, TestSmtpError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/emailing/test-dial',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Set app icon
   */
  public static setAppIcon<ThrowOnError extends boolean = false>(
    options?: Options<SetAppIconData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).post<
      SetAppIconResponse,
      SetAppIconError,
      ThrowOnError
    >({
      ...formDataBodySerializer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/icon',
      ...options,
      headers: {
        'Content-Type': null,
        ...options?.headers
      }
    })
  }

  /**
   * Instance settings
   */
  public static instanceSettings<ThrowOnError extends boolean = false>(
    options?: Options<InstanceSettingsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      InstanceSettingsResponse,
      InstanceSettingsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/instance',
      ...options
    })
  }

  /**
   * Update instance settings
   */
  public static updateInstanceSettings<ThrowOnError extends boolean = false>(
    options: Options<UpdateInstanceSettingsData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UpdateInstanceSettingsResponse,
      UpdateInstanceSettingsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/instance',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Security settings
   */
  public static securitySettings<ThrowOnError extends boolean = false>(
    options?: Options<SecuritySettingsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      SecuritySettingsResponse,
      SecuritySettingsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/security',
      ...options
    })
  }

  /**
   * Update security settings
   */
  public static updateSecuritySettings<ThrowOnError extends boolean = false>(
    options: Options<UpdateSecuritySettingsData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UpdateSecuritySettingsResponse,
      UpdateSecuritySettingsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/security',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Service settings
   */
  public static serviceSettings<ThrowOnError extends boolean = false>(
    options?: Options<ServiceSettingsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ServiceSettingsResponse,
      ServiceSettingsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/services',
      ...options
    })
  }

  /**
   * Update service settings
   */
  public static updateServiceSettings<ThrowOnError extends boolean = false>(
    options: Options<UpdateServiceSettingsData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateServiceSettingsResponse,
      UpdateServiceSettingsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/settings/services',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}

export class TaxonomyService {
  /**
   * Get taxonomy
   */
  public static getTaxonomy<ThrowOnError extends boolean = false>(
    options?: Options<GetTaxonomyData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetTaxonomyResponse,
      GetTaxonomyError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: getTaxonomyResponseTransformer,
      url: '/taxonomy',
      ...options
    })
  }

  /**
   * List taxa
   */
  public static listTaxa<ThrowOnError extends boolean = false>(
    options?: Options<ListTaxaData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<ListTaxaResponse, ListTaxaError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      querySerializer: {
        array: {
          explode: false,
          style: 'form'
        }
      },
      responseTransformer: listTaxaResponseTransformer,
      url: '/taxonomy/taxa',
      ...options
    })
  }

  /**
   * Create taxon
   */
  public static createTaxon<ThrowOnError extends boolean = false>(
    options: Options<CreateTaxonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateTaxonResponse,
      CreateTaxonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: createTaxonResponseTransformer,
      url: '/taxonomy/taxa',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }

  /**
   * Delete taxon
   */
  public static deleteTaxon<ThrowOnError extends boolean = false>(
    options: Options<DeleteTaxonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteTaxonResponse,
      DeleteTaxonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: deleteTaxonResponseTransformer,
      url: '/taxonomy/taxa/{code}',
      ...options
    })
  }

  /**
   * Get taxon
   */
  public static getTaxon<ThrowOnError extends boolean = false>(
    options: Options<GetTaxonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<GetTaxonResponse, GetTaxonError, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: getTaxonResponseTransformer,
      url: '/taxonomy/taxa/{code}',
      ...options
    })
  }

  /**
   * Update taxon
   */
  public static updateTaxon<ThrowOnError extends boolean = false>(
    options: Options<UpdateTaxonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateTaxonResponse,
      UpdateTaxonError,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      responseTransformer: updateTaxonResponseTransformer,
      url: '/taxonomy/taxa/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    })
  }
}
