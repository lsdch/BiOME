// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer
} from './client'
import type {
  ListAbioticParametersData,
  ListAbioticParametersResponses,
  ListAbioticParametersErrors,
  CreateAbioticParameterData,
  CreateAbioticParameterResponses,
  CreateAbioticParameterErrors,
  DeleteAbioticParameterData,
  DeleteAbioticParameterResponses,
  DeleteAbioticParameterErrors,
  UpdateAbioticParameterData,
  UpdateAbioticParameterResponses,
  UpdateAbioticParameterErrors,
  GetAccessPointsData,
  GetAccessPointsResponses,
  GetAccessPointsErrors,
  CurrentUserData,
  CurrentUserResponses,
  CurrentUserErrors,
  ConfirmEmailData,
  ConfirmEmailResponses,
  ConfirmEmailErrors,
  ResendEmailVerificationData,
  ResendEmailVerificationResponses,
  ResendEmailVerificationErrors,
  RequestPasswordResetData,
  RequestPasswordResetResponses,
  RequestPasswordResetErrors,
  LoginData,
  LoginResponses,
  LoginErrors,
  LogoutData,
  LogoutResponses,
  LogoutErrors,
  UpdatePasswordData,
  UpdatePasswordResponses,
  UpdatePasswordErrors,
  ValidatePasswordTokenData,
  ValidatePasswordTokenResponses,
  ValidatePasswordTokenErrors,
  ResetPasswordData,
  ResetPasswordResponses,
  ResetPasswordErrors,
  ListPendingUserRequestsData,
  ListPendingUserRequestsResponses,
  ListPendingUserRequestsErrors,
  DeletePendingUserRequestData,
  DeletePendingUserRequestResponses,
  DeletePendingUserRequestErrors,
  GetPendingUserRequestData,
  GetPendingUserRequestResponses,
  GetPendingUserRequestErrors,
  RefreshSessionData,
  RefreshSessionResponses,
  RefreshSessionErrors,
  RegisterData,
  RegisterResponses,
  RegisterErrors,
  ClaimInvitationData,
  ClaimInvitationResponses,
  ClaimInvitationErrors,
  ListAnchorsData,
  ListAnchorsResponses,
  ListAnchorsErrors,
  ListBioMaterialData,
  ListBioMaterialResponses,
  ListBioMaterialErrors,
  UpdateExternalBioMatData,
  UpdateExternalBioMatResponses,
  UpdateExternalBioMatErrors,
  CreateExternalBioMatData,
  CreateExternalBioMatResponses,
  CreateExternalBioMatErrors,
  DeleteBioMaterialData,
  DeleteBioMaterialResponses,
  DeleteBioMaterialErrors,
  GetBioMaterialData,
  GetBioMaterialResponses,
  GetBioMaterialErrors,
  CrossRefData,
  CrossRefResponses,
  CrossRefErrors,
  CrossRefBibSearchData,
  CrossRefBibSearchResponses,
  CrossRefBibSearchErrors,
  ListDataSourcesData,
  ListDataSourcesResponses,
  ListDataSourcesErrors,
  CreateDataSourceData,
  CreateDataSourceResponses,
  CreateDataSourceErrors,
  DeleteDataSourceData,
  DeleteDataSourceResponses,
  DeleteDataSourceErrors,
  UpdateDataSourceData,
  UpdateDataSourceResponses,
  UpdateDataSourceErrors,
  ListDatasetsData,
  ListDatasetsResponses,
  ListDatasetsErrors,
  UpdateDatasetData,
  UpdateDatasetResponses,
  UpdateDatasetErrors,
  ListOccurrenceDatasetsData,
  ListOccurrenceDatasetsResponses,
  ListOccurrenceDatasetsErrors,
  GetOccurrenceDatasetData,
  GetOccurrenceDatasetResponses,
  GetOccurrenceDatasetErrors,
  TogglePinDatasetData,
  TogglePinDatasetResponses,
  TogglePinDatasetErrors,
  ListSequenceDatasetsData,
  ListSequenceDatasetsResponses,
  ListSequenceDatasetsErrors,
  GetSequenceDatasetData,
  GetSequenceDatasetResponses,
  GetSequenceDatasetErrors,
  ListSiteDatasetsData,
  ListSiteDatasetsResponses,
  ListSiteDatasetsErrors,
  CreateSiteDatasetData,
  CreateSiteDatasetResponses,
  CreateSiteDatasetErrors,
  GetSiteDatasetData,
  GetSiteDatasetResponses,
  GetSiteDatasetErrors,
  GetDatasetData,
  GetDatasetResponses,
  GetDatasetErrors,
  DeleteEventData,
  DeleteEventResponses,
  DeleteEventErrors,
  UpdateEventData,
  UpdateEventResponses,
  UpdateEventErrors,
  EventAddExternalOccurrenceData,
  EventAddExternalOccurrenceResponses,
  EventAddExternalOccurrenceErrors,
  CreateSamplingAtEventData,
  CreateSamplingAtEventResponses,
  CreateSamplingAtEventErrors,
  UpdateSpottingData,
  UpdateSpottingResponses,
  UpdateSpottingErrors,
  ListFixativesData,
  ListFixativesResponses,
  ListFixativesErrors,
  CreateFixativeData,
  CreateFixativeResponses,
  CreateFixativeErrors,
  DeleteFixativeData,
  DeleteFixativeResponses,
  DeleteFixativeErrors,
  UpdateFixativeData,
  UpdateFixativeResponses,
  UpdateFixativeErrors,
  ListGenesData,
  ListGenesResponses,
  ListGenesErrors,
  CreateGeneData,
  CreateGeneResponses,
  CreateGeneErrors,
  DeleteGeneData,
  DeleteGeneResponses,
  DeleteGeneErrors,
  UpdateGeneData,
  UpdateGeneResponses,
  UpdateGeneErrors,
  ReverseGeocodeData,
  ReverseGeocodeResponses,
  ReverseGeocodeErrors,
  GetGeoapifyStatusData,
  GetGeoapifyStatusResponses,
  GetGeoapifyStatusErrors,
  ListGeoapifyUsageData,
  ListGeoapifyUsageResponses,
  ListGeoapifyUsageErrors,
  ListHabitatGroupsData,
  ListHabitatGroupsResponses,
  ListHabitatGroupsErrors,
  CreateHabitatGroupData,
  CreateHabitatGroupResponses,
  CreateHabitatGroupErrors,
  DeleteHabitatGroupData,
  DeleteHabitatGroupResponses,
  DeleteHabitatGroupErrors,
  UpdateHabitatGroupData,
  UpdateHabitatGroupResponses,
  UpdateHabitatGroupErrors,
  ImportGbifData,
  ImportGbifResponses,
  ImportGbifErrors,
  MonitorGbifData,
  MonitorGbifResponses,
  MonitorGbifErrors,
  CoordinatesToCountryData,
  CoordinatesToCountryResponses,
  CoordinatesToCountryErrors,
  SitesProximityData,
  SitesProximityResponses,
  SitesProximityErrors,
  ListCountriesData,
  ListCountriesResponses,
  ListCountriesErrors,
  GetSitesCountByCountryData,
  GetSitesCountByCountryResponses,
  GetSitesCountByCountryErrors,
  SearchSitesData,
  SearchSitesResponses,
  SearchSitesErrors,
  OccurrencesBySiteData,
  OccurrencesBySiteResponses,
  OccurrencesBySiteErrors,
  OccurrenceOverviewData,
  OccurrenceOverviewResponses,
  OccurrenceOverviewErrors,
  ListOrganisationsData,
  ListOrganisationsResponses,
  ListOrganisationsErrors,
  CreateOrganisationData,
  CreateOrganisationResponses,
  CreateOrganisationErrors,
  DeleteOrganisationData,
  DeleteOrganisationResponses,
  DeleteOrganisationErrors,
  UpdateOrganisationData,
  UpdateOrganisationResponses,
  UpdateOrganisationErrors,
  ListPersonsData,
  ListPersonsResponses,
  ListPersonsErrors,
  CreatePersonData,
  CreatePersonResponses,
  CreatePersonErrors,
  DeletePersonData,
  DeletePersonResponses,
  DeletePersonErrors,
  UpdatePersonData,
  UpdatePersonResponses,
  UpdatePersonErrors,
  InvitePersonData,
  InvitePersonResponses,
  InvitePersonErrors,
  ListProgramsData,
  ListProgramsResponses,
  ListProgramsErrors,
  CreateProgramData,
  CreateProgramResponses,
  CreateProgramErrors,
  DeleteProgramData,
  DeleteProgramResponses,
  DeleteProgramErrors,
  UpdateProgramData,
  UpdateProgramResponses,
  UpdateProgramErrors,
  ListArticlesData,
  ListArticlesResponses,
  ListArticlesErrors,
  CreateArticleData,
  CreateArticleResponses,
  CreateArticleErrors,
  DeleteArticleData,
  DeleteArticleResponses,
  DeleteArticleErrors,
  UpdateArticleData,
  UpdateArticleResponses,
  UpdateArticleErrors,
  ListSamplingMethodsData,
  ListSamplingMethodsResponses,
  ListSamplingMethodsErrors,
  CreateSamplingMethodData,
  CreateSamplingMethodResponses,
  CreateSamplingMethodErrors,
  DeleteSamplingMethodData,
  DeleteSamplingMethodResponses,
  DeleteSamplingMethodErrors,
  UpdateSamplingMethodData,
  UpdateSamplingMethodResponses,
  UpdateSamplingMethodErrors,
  CreateSamplingData,
  CreateSamplingResponses,
  CreateSamplingErrors,
  DeleteSamplingData,
  DeleteSamplingResponses,
  DeleteSamplingErrors,
  UpdateSamplingData,
  UpdateSamplingResponses,
  UpdateSamplingErrors,
  SamplingAddExternalOccurrenceData,
  SamplingAddExternalOccurrenceResponses,
  SamplingAddExternalOccurrenceErrors,
  ListSequencesData,
  ListSequencesResponses,
  ListSequencesErrors,
  DeleteSequenceData,
  DeleteSequenceResponses,
  DeleteSequenceErrors,
  GetSequenceData,
  GetSequenceResponses,
  GetSequenceErrors,
  EmailSettingsData,
  EmailSettingsResponses,
  EmailSettingsErrors,
  UpdateEmailSettingsData,
  UpdateEmailSettingsResponses,
  UpdateEmailSettingsErrors,
  TestSmtpData,
  TestSmtpResponses,
  TestSmtpErrors,
  SetAppIconData,
  SetAppIconResponses,
  SetAppIconErrors,
  InstanceSettingsData,
  InstanceSettingsResponses,
  InstanceSettingsErrors,
  UpdateInstanceSettingsData,
  UpdateInstanceSettingsResponses,
  UpdateInstanceSettingsErrors,
  ListDataFeedsData,
  ListDataFeedsResponses,
  ListDataFeedsErrors,
  CreateDataFeedData,
  CreateDataFeedResponses,
  CreateDataFeedErrors,
  ListMapPresetsData,
  ListMapPresetsResponses,
  ListMapPresetsErrors,
  CreateUpdateMapPresetData,
  CreateUpdateMapPresetResponses,
  CreateUpdateMapPresetErrors,
  DeleteMapPresetData,
  DeleteMapPresetResponses,
  DeleteMapPresetErrors,
  SecuritySettingsData,
  SecuritySettingsResponses,
  SecuritySettingsErrors,
  UpdateSecuritySettingsData,
  UpdateSecuritySettingsResponses,
  UpdateSecuritySettingsErrors,
  ServiceSettingsData,
  ServiceSettingsResponses,
  ServiceSettingsErrors,
  UpdateServiceSettingsData,
  UpdateServiceSettingsResponses,
  UpdateServiceSettingsErrors,
  ListSitesData,
  ListSitesResponses,
  ListSitesErrors,
  CreateSiteData,
  CreateSiteResponses,
  CreateSiteErrors,
  GetSiteData,
  GetSiteResponses,
  GetSiteErrors,
  UpdateSiteData,
  UpdateSiteResponses,
  UpdateSiteErrors,
  ListSiteEventsData,
  ListSiteEventsResponses,
  ListSiteEventsErrors,
  CreateEventData,
  CreateEventResponses,
  CreateEventErrors,
  SiteAddExternalOccurrenceData,
  SiteAddExternalOccurrenceResponses,
  SiteAddExternalOccurrenceErrors,
  GetTaxonomyData,
  GetTaxonomyResponses,
  GetTaxonomyErrors,
  ListTaxaData,
  ListTaxaResponses,
  ListTaxaErrors,
  CreateTaxonData,
  CreateTaxonResponses,
  CreateTaxonErrors,
  DeleteTaxonData,
  DeleteTaxonResponses,
  DeleteTaxonErrors,
  GetTaxonData,
  GetTaxonResponses,
  GetTaxonErrors,
  UpdateTaxonData,
  UpdateTaxonResponses,
  UpdateTaxonErrors
} from './types.gen'
import {
  listAbioticParametersResponseTransformer,
  createAbioticParameterResponseTransformer,
  deleteAbioticParameterResponseTransformer,
  updateAbioticParameterResponseTransformer,
  loginResponseTransformer,
  listPendingUserRequestsResponseTransformer,
  deletePendingUserRequestResponseTransformer,
  getPendingUserRequestResponseTransformer,
  refreshSessionResponseTransformer,
  claimInvitationResponseTransformer,
  listAnchorsResponseTransformer,
  listBioMaterialResponseTransformer,
  updateExternalBioMatResponseTransformer,
  createExternalBioMatResponseTransformer,
  deleteBioMaterialResponseTransformer,
  getBioMaterialResponseTransformer,
  listDataSourcesResponseTransformer,
  createDataSourceResponseTransformer,
  deleteDataSourceResponseTransformer,
  updateDataSourceResponseTransformer,
  listDatasetsResponseTransformer,
  updateDatasetResponseTransformer,
  listOccurrenceDatasetsResponseTransformer,
  getOccurrenceDatasetResponseTransformer,
  togglePinDatasetResponseTransformer,
  listSequenceDatasetsResponseTransformer,
  getSequenceDatasetResponseTransformer,
  listSiteDatasetsResponseTransformer,
  createSiteDatasetResponseTransformer,
  getSiteDatasetResponseTransformer,
  getDatasetResponseTransformer,
  deleteEventResponseTransformer,
  updateEventResponseTransformer,
  eventAddExternalOccurrenceResponseTransformer,
  createSamplingAtEventResponseTransformer,
  updateSpottingResponseTransformer,
  listFixativesResponseTransformer,
  createFixativeResponseTransformer,
  deleteFixativeResponseTransformer,
  updateFixativeResponseTransformer,
  listGenesResponseTransformer,
  createGeneResponseTransformer,
  deleteGeneResponseTransformer,
  updateGeneResponseTransformer,
  listHabitatGroupsResponseTransformer,
  createHabitatGroupResponseTransformer,
  deleteHabitatGroupResponseTransformer,
  updateHabitatGroupResponseTransformer,
  sitesProximityResponseTransformer,
  searchSitesResponseTransformer,
  occurrencesBySiteResponseTransformer,
  listOrganisationsResponseTransformer,
  createOrganisationResponseTransformer,
  deleteOrganisationResponseTransformer,
  updateOrganisationResponseTransformer,
  listPersonsResponseTransformer,
  createPersonResponseTransformer,
  deletePersonResponseTransformer,
  updatePersonResponseTransformer,
  listProgramsResponseTransformer,
  createProgramResponseTransformer,
  deleteProgramResponseTransformer,
  updateProgramResponseTransformer,
  listArticlesResponseTransformer,
  createArticleResponseTransformer,
  deleteArticleResponseTransformer,
  updateArticleResponseTransformer,
  listSamplingMethodsResponseTransformer,
  createSamplingMethodResponseTransformer,
  deleteSamplingMethodResponseTransformer,
  updateSamplingMethodResponseTransformer,
  createSamplingResponseTransformer,
  deleteSamplingResponseTransformer,
  updateSamplingResponseTransformer,
  samplingAddExternalOccurrenceResponseTransformer,
  listSequencesResponseTransformer,
  deleteSequenceResponseTransformer,
  getSequenceResponseTransformer,
  listDataFeedsResponseTransformer,
  createDataFeedResponseTransformer,
  listMapPresetsResponseTransformer,
  createUpdateMapPresetResponseTransformer,
  deleteMapPresetResponseTransformer,
  listSitesResponseTransformer,
  createSiteResponseTransformer,
  getSiteResponseTransformer,
  updateSiteResponseTransformer,
  listSiteEventsResponseTransformer,
  createEventResponseTransformer,
  siteAddExternalOccurrenceResponseTransformer,
  getTaxonomyResponseTransformer,
  listTaxaResponseTransformer,
  createTaxonResponseTransformer,
  deleteTaxonResponseTransformer,
  getTaxonResponseTransformer,
  updateTaxonResponseTransformer
} from './transformers.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export class SamplingService {
  /**
   * List abiotic parameters
   */
  public static listAbioticParameters<ThrowOnError extends boolean = false>(
    options?: Options<ListAbioticParametersData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListAbioticParametersResponses,
      ListAbioticParametersErrors,
      ThrowOnError
    >({
      responseTransformer: listAbioticParametersResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/abiotic',
      ...options
    })
  }

  /**
   * Create abiotic parameter
   */
  public static createAbioticParameter<ThrowOnError extends boolean = false>(
    options: Options<CreateAbioticParameterData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateAbioticParameterResponses,
      CreateAbioticParameterErrors,
      ThrowOnError
    >({
      responseTransformer: createAbioticParameterResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/abiotic',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete abiotic parameter
   */
  public static deleteAbioticParameter<ThrowOnError extends boolean = false>(
    options: Options<DeleteAbioticParameterData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteAbioticParameterResponses,
      DeleteAbioticParameterErrors,
      ThrowOnError
    >({
      responseTransformer: deleteAbioticParameterResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/abiotic/{code}',
      ...options
    })
  }

  /**
   * Update abiotic parameter
   */
  public static updateAbioticParameter<ThrowOnError extends boolean = false>(
    options: Options<UpdateAbioticParameterData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateAbioticParameterResponses,
      UpdateAbioticParameterErrors,
      ThrowOnError
    >({
      responseTransformer: updateAbioticParameterResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/abiotic/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List access points
   */
  public static getAccessPoints<ThrowOnError extends boolean = false>(
    options?: Options<GetAccessPointsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAccessPointsResponses,
      GetAccessPointsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/access-points',
      ...options
    })
  }

  /**
   * List fixatives
   */
  public static listFixatives<ThrowOnError extends boolean = false>(
    options?: Options<ListFixativesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListFixativesResponses,
      ListFixativesErrors,
      ThrowOnError
    >({
      responseTransformer: listFixativesResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/fixatives',
      ...options
    })
  }

  /**
   * Create fixative
   */
  public static createFixative<ThrowOnError extends boolean = false>(
    options: Options<CreateFixativeData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateFixativeResponses,
      CreateFixativeErrors,
      ThrowOnError
    >({
      responseTransformer: createFixativeResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/fixatives',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete fixative
   */
  public static deleteFixative<ThrowOnError extends boolean = false>(
    options: Options<DeleteFixativeData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteFixativeResponses,
      DeleteFixativeErrors,
      ThrowOnError
    >({
      responseTransformer: deleteFixativeResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/fixatives/{code}',
      ...options
    })
  }

  /**
   * Update fixative
   */
  public static updateFixative<ThrowOnError extends boolean = false>(
    options: Options<UpdateFixativeData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateFixativeResponses,
      UpdateFixativeErrors,
      ThrowOnError
    >({
      responseTransformer: updateFixativeResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/fixatives/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List habitats
   */
  public static listHabitatGroups<ThrowOnError extends boolean = false>(
    options?: Options<ListHabitatGroupsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListHabitatGroupsResponses,
      ListHabitatGroupsErrors,
      ThrowOnError
    >({
      responseTransformer: listHabitatGroupsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/habitats',
      ...options
    })
  }

  /**
   * Create habitat group
   */
  public static createHabitatGroup<ThrowOnError extends boolean = false>(
    options: Options<CreateHabitatGroupData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateHabitatGroupResponses,
      CreateHabitatGroupErrors,
      ThrowOnError
    >({
      responseTransformer: createHabitatGroupResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/habitats',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete habitat group
   */
  public static deleteHabitatGroup<ThrowOnError extends boolean = false>(
    options: Options<DeleteHabitatGroupData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteHabitatGroupResponses,
      DeleteHabitatGroupErrors,
      ThrowOnError
    >({
      responseTransformer: deleteHabitatGroupResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/habitats/{code}',
      ...options
    })
  }

  /**
   * Update habitat group
   */
  public static updateHabitatGroup<ThrowOnError extends boolean = false>(
    options: Options<UpdateHabitatGroupData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateHabitatGroupResponses,
      UpdateHabitatGroupErrors,
      ThrowOnError
    >({
      responseTransformer: updateHabitatGroupResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/habitats/{label}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List sampling methods
   */
  public static listSamplingMethods<ThrowOnError extends boolean = false>(
    options?: Options<ListSamplingMethodsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListSamplingMethodsResponses,
      ListSamplingMethodsErrors,
      ThrowOnError
    >({
      responseTransformer: listSamplingMethodsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sampling-methods',
      ...options
    })
  }

  /**
   * Create sampling method
   */
  public static createSamplingMethod<ThrowOnError extends boolean = false>(
    options: Options<CreateSamplingMethodData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateSamplingMethodResponses,
      CreateSamplingMethodErrors,
      ThrowOnError
    >({
      responseTransformer: createSamplingMethodResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sampling-methods',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete sampling method
   */
  public static deleteSamplingMethod<ThrowOnError extends boolean = false>(
    options: Options<DeleteSamplingMethodData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteSamplingMethodResponses,
      DeleteSamplingMethodErrors,
      ThrowOnError
    >({
      responseTransformer: deleteSamplingMethodResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sampling-methods/{code}',
      ...options
    })
  }

  /**
   * Update sampling method
   */
  public static updateSamplingMethod<ThrowOnError extends boolean = false>(
    options: Options<UpdateSamplingMethodData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateSamplingMethodResponses,
      UpdateSamplingMethodErrors,
      ThrowOnError
    >({
      responseTransformer: updateSamplingMethodResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sampling-methods/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Create sampling action
   */
  public static createSampling<ThrowOnError extends boolean = false>(
    options: Options<CreateSamplingData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateSamplingResponses,
      CreateSamplingErrors,
      ThrowOnError
    >({
      responseTransformer: createSamplingResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/samplings',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete sampling action
   */
  public static deleteSampling<ThrowOnError extends boolean = false>(
    options: Options<DeleteSamplingData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteSamplingResponses,
      DeleteSamplingErrors,
      ThrowOnError
    >({
      responseTransformer: deleteSamplingResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/samplings/{id}',
      ...options
    })
  }

  /**
   * Update sampling action
   */
  public static updateSampling<ThrowOnError extends boolean = false>(
    options: Options<UpdateSamplingData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateSamplingResponses,
      UpdateSamplingErrors,
      ThrowOnError
    >({
      responseTransformer: updateSamplingResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/samplings/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Add occurrence from sampling
   * Register new occurrence resulting from the sampling action
   */
  public static samplingAddExternalOccurrence<ThrowOnError extends boolean = false>(
    options: Options<SamplingAddExternalOccurrenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      SamplingAddExternalOccurrenceResponses,
      SamplingAddExternalOccurrenceErrors,
      ThrowOnError
    >({
      responseTransformer: samplingAddExternalOccurrenceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/samplings/{id}/occurrences/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class AccountService {
  /**
   * Current user
   * Get infos of currently authenticated user account
   */
  public static currentUser<ThrowOnError extends boolean = false>(
    options?: Options<CurrentUserData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      CurrentUserResponses,
      CurrentUserErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account',
      ...options
    })
  }

  /**
   * Confirm e-mail
   * Confirms the validity of an e-mail address associated to an account, using a token issued at the end of user registration.
   */
  public static confirmEmail<ThrowOnError extends boolean = false>(
    options?: Options<ConfirmEmailData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ConfirmEmailResponses,
      ConfirmEmailErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/email-confirmation',
      ...options
    })
  }

  /**
   * Resend e-mail verification link
   * Sends again a verification link for the provided e-mail address, if it matches a currently not verified user account.
   */
  public static resendEmailVerification<ThrowOnError extends boolean = false>(
    options: Options<ResendEmailVerificationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ResendEmailVerificationResponses,
      ResendEmailVerificationErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/email-confirmation/resend',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Request password reset
   * Requests sending a link containing a password reset token to your account email address. The link target can be provided by the client in the request body, or defaults to the API endpoint: `/api/v1/account/password-reset`. In this case, setting the new password is expected to be done programatically, e.g. through a curl request.
   */
  public static requestPasswordReset<ThrowOnError extends boolean = false>(
    options: Options<RequestPasswordResetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      RequestPasswordResetResponses,
      RequestPasswordResetErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/forgotten-password',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Login
   * Authenticate using user credentials
   */
  public static login<ThrowOnError extends boolean = false>(
    options: Options<LoginData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
      responseTransformer: loginResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/login',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Logout
   * Logout from current user session by revoking session cookies
   */
  public static logout<ThrowOnError extends boolean = false>(
    options: Options<LogoutData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<LogoutResponses, LogoutErrors, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/logout',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Update password
   * Updates password of currently authenticated user
   */
  public static updatePassword<ThrowOnError extends boolean = false>(
    options: Options<UpdatePasswordData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UpdatePasswordResponses,
      UpdatePasswordErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/password',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Validate password token
   * Verifies that the password token is valid and can be used to reset a password
   */
  public static validatePasswordToken<ThrowOnError extends boolean = false>(
    options: Options<ValidatePasswordTokenData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      ValidatePasswordTokenResponses,
      ValidatePasswordTokenErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/password-reset',
      ...options
    })
  }

  /**
   * Reset password
   * Set a new password using a previously issued reset token
   */
  public static resetPassword<ThrowOnError extends boolean = false>(
    options: Options<ResetPasswordData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ResetPasswordResponses,
      ResetPasswordErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/password-reset',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List pending user requests
   * Lists all account requests pending validation from an administrator
   */
  public static listPendingUserRequests<ThrowOnError extends boolean = false>(
    options?: Options<ListPendingUserRequestsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListPendingUserRequestsResponses,
      ListPendingUserRequestsErrors,
      ThrowOnError
    >({
      responseTransformer: listPendingUserRequestsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/pending',
      ...options
    })
  }

  /**
   * Delete pending user request
   * Delete account request pending validation using the associated email
   */
  public static deletePendingUserRequest<ThrowOnError extends boolean = false>(
    options: Options<DeletePendingUserRequestData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeletePendingUserRequestResponses,
      DeletePendingUserRequestErrors,
      ThrowOnError
    >({
      responseTransformer: deletePendingUserRequestResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/pending/{email}',
      ...options
    })
  }

  /**
   * Get pending user request
   * Get account request pending validation using the associated email
   */
  public static getPendingUserRequest<ThrowOnError extends boolean = false>(
    options?: Options<GetPendingUserRequestData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetPendingUserRequestResponses,
      GetPendingUserRequestErrors,
      ThrowOnError
    >({
      responseTransformer: getPendingUserRequestResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/pending/{email}',
      ...options
    })
  }

  /**
   * Refresh auth token
   * Refresh session using refresh token
   */
  public static refreshSession<ThrowOnError extends boolean = false>(
    options: Options<RefreshSessionData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      RefreshSessionResponses,
      RefreshSessionErrors,
      ThrowOnError
    >({
      responseTransformer: refreshSessionResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/refresh',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Register new account
   * Register a new account that is initially pending, and needs to be activated by an administrator. An email is sent to the registered e-mail address with a verification link. The target URL can be set by the client, otherwise it defaults to the API endpoint: `/api/v1/account/email-confirmation`
   */
  public static register<ThrowOnError extends boolean = false>(
    options: Options<RegisterData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<RegisterResponses, RegisterErrors, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/register',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Claim invitation
   * Register an account with pre-assigned role and identity, using an invitation token
   */
  public static claimInvitation<ThrowOnError extends boolean = false>(
    options: Options<ClaimInvitationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ClaimInvitationResponses,
      ClaimInvitationErrors,
      ThrowOnError
    >({
      responseTransformer: claimInvitationResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/account/register/{token}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class TaxonomyGbifService {
  /**
   * List GBIF anchor clades
   */
  public static listAnchors<ThrowOnError extends boolean = false>(
    options?: Options<ListAnchorsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListAnchorsResponses,
      ListAnchorsErrors,
      ThrowOnError
    >({
      responseTransformer: listAnchorsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/anchors/',
      ...options
    })
  }

  /**
   * Import GBIF clade
   */
  public static importGbif<ThrowOnError extends boolean = false>(
    options: Options<ImportGbifData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<
      ImportGbifResponses,
      ImportGbifErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/import/taxonomy',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Monitor GBIF taxonomy imports
   */
  public static monitorGbif<ThrowOnError extends boolean = false>(
    options?: Options<MonitorGbifData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      MonitorGbifResponses,
      MonitorGbifErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/import/taxonomy/monitor',
      ...options
    })
  }
}

export class OccurrencesService {
  /**
   * List bio-material
   * Both internal and external
   */
  public static listBioMaterial<ThrowOnError extends boolean = false>(
    options?: Options<ListBioMaterialData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListBioMaterialResponses,
      ListBioMaterialErrors,
      ThrowOnError
    >({
      responseTransformer: listBioMaterialResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/bio-material',
      ...options
    })
  }

  /**
   * Update external bio-material
   */
  public static updateExternalBioMat<ThrowOnError extends boolean = false>(
    options: Options<UpdateExternalBioMatData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateExternalBioMatResponses,
      UpdateExternalBioMatErrors,
      ThrowOnError
    >({
      responseTransformer: updateExternalBioMatResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/bio-material/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Create external bio-material
   */
  public static createExternalBioMat<ThrowOnError extends boolean = false>(
    options: Options<CreateExternalBioMatData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateExternalBioMatResponses,
      CreateExternalBioMatErrors,
      ThrowOnError
    >({
      responseTransformer: createExternalBioMatResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/bio-material/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete bio-material
   * Delete any (internal/external) bio-material record by its code
   */
  public static deleteBioMaterial<ThrowOnError extends boolean = false>(
    options: Options<DeleteBioMaterialData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteBioMaterialResponses,
      DeleteBioMaterialErrors,
      ThrowOnError
    >({
      responseTransformer: deleteBioMaterialResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/bio-material/{code}',
      ...options
    })
  }

  /**
   * Get bio-material
   * Both internal and external
   */
  public static getBioMaterial<ThrowOnError extends boolean = false>(
    options: Options<GetBioMaterialData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetBioMaterialResponses,
      GetBioMaterialErrors,
      ThrowOnError
    >({
      responseTransformer: getBioMaterialResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/bio-material/{code}',
      ...options
    })
  }

  /**
   * Add occurrence from event
   * Register new occurrence resulting from the event, including sampling specification and biomaterial identification
   */
  public static eventAddExternalOccurrence<ThrowOnError extends boolean = false>(
    options: Options<EventAddExternalOccurrenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      EventAddExternalOccurrenceResponses,
      EventAddExternalOccurrenceErrors,
      ThrowOnError
    >({
      responseTransformer: eventAddExternalOccurrenceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/events/{id}/occurrences/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Occurrences by site
   */
  public static occurrencesBySite<ThrowOnError extends boolean = false>(
    options?: Options<OccurrencesBySiteData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      OccurrencesBySiteResponses,
      OccurrencesBySiteErrors,
      ThrowOnError
    >({
      querySerializer: {
        array: {
          explode: false,
          style: 'form'
        }
      },
      responseTransformer: occurrencesBySiteResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/occurrences/by-site',
      ...options
    })
  }

  /**
   * Occurrences overview
   */
  public static occurrenceOverview<ThrowOnError extends boolean = false>(
    options?: Options<OccurrenceOverviewData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      OccurrenceOverviewResponses,
      OccurrenceOverviewErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/occurrences/overview',
      ...options
    })
  }

  /**
   * Add occurrence from sampling
   * Register new occurrence resulting from the sampling action
   */
  public static samplingAddExternalOccurrence<ThrowOnError extends boolean = false>(
    options: Options<SamplingAddExternalOccurrenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      SamplingAddExternalOccurrenceResponses,
      SamplingAddExternalOccurrenceErrors,
      ThrowOnError
    >({
      responseTransformer: samplingAddExternalOccurrenceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/samplings/{id}/occurrences/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Add occurrence at site
   * Register new occurrence at site, including event + sampling specification and biomaterial identification
   */
  public static siteAddExternalOccurrence<ThrowOnError extends boolean = false>(
    options: Options<SiteAddExternalOccurrenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      SiteAddExternalOccurrenceResponses,
      SiteAddExternalOccurrenceErrors,
      ThrowOnError
    >({
      responseTransformer: siteAddExternalOccurrenceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sites/{code}/occurrences/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class ReferencesService {
  /**
   * Retrieve article infos from DOI
   */
  public static crossRef<ThrowOnError extends boolean = false>(
    options: Options<CrossRefData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<CrossRefResponses, CrossRefErrors, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/crossref',
      ...options
    })
  }

  /**
   * Retrieve article infos from query string
   */
  public static crossRefBibSearch<ThrowOnError extends boolean = false>(
    options: Options<CrossRefBibSearchData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CrossRefBibSearchResponses,
      CrossRefBibSearchErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/crossref',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List articles
   */
  public static listArticles<ThrowOnError extends boolean = false>(
    options?: Options<ListArticlesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListArticlesResponses,
      ListArticlesErrors,
      ThrowOnError
    >({
      responseTransformer: listArticlesResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/references',
      ...options
    })
  }

  /**
   * Create article
   */
  public static createArticle<ThrowOnError extends boolean = false>(
    options: Options<CreateArticleData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateArticleResponses,
      CreateArticleErrors,
      ThrowOnError
    >({
      responseTransformer: createArticleResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/references',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete article
   */
  public static deleteArticle<ThrowOnError extends boolean = false>(
    options: Options<DeleteArticleData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteArticleResponses,
      DeleteArticleErrors,
      ThrowOnError
    >({
      responseTransformer: deleteArticleResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/references/{code}',
      ...options
    })
  }

  /**
   * Update article
   */
  public static updateArticle<ThrowOnError extends boolean = false>(
    options: Options<UpdateArticleData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateArticleResponses,
      UpdateArticleErrors,
      ThrowOnError
    >({
      responseTransformer: updateArticleResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/references/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class DataSourcesService {
  /**
   * List external data sources
   */
  public static listDataSources<ThrowOnError extends boolean = false>(
    options?: Options<ListDataSourcesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListDataSourcesResponses,
      ListDataSourcesErrors,
      ThrowOnError
    >({
      responseTransformer: listDataSourcesResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/data-sources',
      ...options
    })
  }

  /**
   * Register external data source
   */
  public static createDataSource<ThrowOnError extends boolean = false>(
    options: Options<CreateDataSourceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateDataSourceResponses,
      CreateDataSourceErrors,
      ThrowOnError
    >({
      responseTransformer: createDataSourceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/data-sources',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete external data source
   */
  public static deleteDataSource<ThrowOnError extends boolean = false>(
    options: Options<DeleteDataSourceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteDataSourceResponses,
      DeleteDataSourceErrors,
      ThrowOnError
    >({
      responseTransformer: deleteDataSourceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/data-sources/{code}',
      ...options
    })
  }

  /**
   * Update external data source
   */
  public static updateDataSource<ThrowOnError extends boolean = false>(
    options: Options<UpdateDataSourceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateDataSourceResponses,
      UpdateDataSourceErrors,
      ThrowOnError
    >({
      responseTransformer: updateDataSourceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/data-sources/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class DatasetsService {
  /**
   * List all datasets
   * List all datasets with optional filters and category discriminator
   */
  public static listDatasets<ThrowOnError extends boolean = false>(
    options?: Options<ListDatasetsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListDatasetsResponses,
      ListDatasetsErrors,
      ThrowOnError
    >({
      responseTransformer: listDatasetsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets',
      ...options
    })
  }

  /**
   * Update dataset
   * Update dataset metadata
   */
  public static updateDataset<ThrowOnError extends boolean = false>(
    options: Options<UpdateDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateDatasetResponses,
      UpdateDatasetErrors,
      ThrowOnError
    >({
      responseTransformer: updateDatasetResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/edit/{slug}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List occurrence datasets
   * List all occurrence datasets
   */
  public static listOccurrenceDatasets<ThrowOnError extends boolean = false>(
    options?: Options<ListOccurrenceDatasetsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListOccurrenceDatasetsResponses,
      ListOccurrenceDatasetsErrors,
      ThrowOnError
    >({
      responseTransformer: listOccurrenceDatasetsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/occurrence',
      ...options
    })
  }

  /**
   * Get occurrence dataset
   * Get infos for an occurrence dataset
   */
  public static getOccurrenceDataset<ThrowOnError extends boolean = false>(
    options: Options<GetOccurrenceDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetOccurrenceDatasetResponses,
      GetOccurrenceDatasetErrors,
      ThrowOnError
    >({
      responseTransformer: getOccurrenceDatasetResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/occurrence/{slug}',
      ...options
    })
  }

  /**
   * Pin/unpin dataset
   * Pin or unpin dataset from from dashboard priority display
   */
  public static togglePinDataset<ThrowOnError extends boolean = false>(
    options: Options<TogglePinDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      TogglePinDatasetResponses,
      TogglePinDatasetErrors,
      ThrowOnError
    >({
      responseTransformer: togglePinDatasetResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/pin/{slug}',
      ...options
    })
  }

  /**
   * List sequence datasets
   * List all sequence datasets
   */
  public static listSequenceDatasets<ThrowOnError extends boolean = false>(
    options?: Options<ListSequenceDatasetsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListSequenceDatasetsResponses,
      ListSequenceDatasetsErrors,
      ThrowOnError
    >({
      responseTransformer: listSequenceDatasetsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/sequences',
      ...options
    })
  }

  /**
   * Get sequence dataset
   * Get infos for an sequence dataset
   */
  public static getSequenceDataset<ThrowOnError extends boolean = false>(
    options: Options<GetSequenceDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetSequenceDatasetResponses,
      GetSequenceDatasetErrors,
      ThrowOnError
    >({
      responseTransformer: getSequenceDatasetResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/sequences/{slug}',
      ...options
    })
  }

  /**
   * List site datasets
   * List all site datasets
   */
  public static listSiteDatasets<ThrowOnError extends boolean = false>(
    options?: Options<ListSiteDatasetsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListSiteDatasetsResponses,
      ListSiteDatasetsErrors,
      ThrowOnError
    >({
      responseTransformer: listSiteDatasetsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/sites',
      ...options
    })
  }

  /**
   * Create site dataset
   * Create a new site dataset with new or existing sites
   */
  public static createSiteDataset<ThrowOnError extends boolean = false>(
    options: Options<CreateSiteDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateSiteDatasetResponses,
      CreateSiteDatasetErrors,
      ThrowOnError
    >({
      responseTransformer: createSiteDatasetResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/sites',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Get site dataset
   * Get infos for a site dataset
   */
  public static getSiteDataset<ThrowOnError extends boolean = false>(
    options: Options<GetSiteDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetSiteDatasetResponses,
      GetSiteDatasetErrors,
      ThrowOnError
    >({
      responseTransformer: getSiteDatasetResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/sites/{slug}',
      ...options
    })
  }

  /**
   * Get dataset
   * Retrieve dataset infos by slug
   */
  public static getDataset<ThrowOnError extends boolean = false>(
    options: Options<GetDatasetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetDatasetResponses,
      GetDatasetErrors,
      ThrowOnError
    >({
      responseTransformer: getDatasetResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/datasets/{slug}',
      ...options
    })
  }

  /**
   * List programs
   */
  public static listPrograms<ThrowOnError extends boolean = false>(
    options?: Options<ListProgramsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListProgramsResponses,
      ListProgramsErrors,
      ThrowOnError
    >({
      responseTransformer: listProgramsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/programs',
      ...options
    })
  }

  /**
   * Create program
   */
  public static createProgram<ThrowOnError extends boolean = false>(
    options: Options<CreateProgramData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateProgramResponses,
      CreateProgramErrors,
      ThrowOnError
    >({
      responseTransformer: createProgramResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/programs',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete program
   */
  public static deleteProgram<ThrowOnError extends boolean = false>(
    options: Options<DeleteProgramData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteProgramResponses,
      DeleteProgramErrors,
      ThrowOnError
    >({
      responseTransformer: deleteProgramResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/programs/{code}',
      ...options
    })
  }

  /**
   * Update program
   */
  public static updateProgram<ThrowOnError extends boolean = false>(
    options: Options<UpdateProgramData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateProgramResponses,
      UpdateProgramErrors,
      ThrowOnError
    >({
      responseTransformer: updateProgramResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/programs/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class EventsService {
  /**
   * Delete event
   */
  public static deleteEvent<ThrowOnError extends boolean = false>(
    options: Options<DeleteEventData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteEventResponses,
      DeleteEventErrors,
      ThrowOnError
    >({
      responseTransformer: deleteEventResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/events/{id}',
      ...options
    })
  }

  /**
   * Update event
   */
  public static updateEvent<ThrowOnError extends boolean = false>(
    options: Options<UpdateEventData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateEventResponses,
      UpdateEventErrors,
      ThrowOnError
    >({
      responseTransformer: updateEventResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/events/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Add occurrence from event
   * Register new occurrence resulting from the event, including sampling specification and biomaterial identification
   */
  public static eventAddExternalOccurrence<ThrowOnError extends boolean = false>(
    options: Options<EventAddExternalOccurrenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      EventAddExternalOccurrenceResponses,
      EventAddExternalOccurrenceErrors,
      ThrowOnError
    >({
      responseTransformer: eventAddExternalOccurrenceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/events/{id}/occurrences/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Create sampling at event
   */
  public static createSamplingAtEvent<ThrowOnError extends boolean = false>(
    options: Options<CreateSamplingAtEventData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateSamplingAtEventResponses,
      CreateSamplingAtEventErrors,
      ThrowOnError
    >({
      responseTransformer: createSamplingAtEventResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/events/{id}/samplings',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Update spotting
   */
  public static updateSpotting<ThrowOnError extends boolean = false>(
    options: Options<UpdateSpottingData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<
      UpdateSpottingResponses,
      UpdateSpottingErrors,
      ThrowOnError
    >({
      responseTransformer: updateSpottingResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/events/{id}/spottings',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class SequencesService {
  /**
   * List genes
   */
  public static listGenes<ThrowOnError extends boolean = false>(
    options?: Options<ListGenesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListGenesResponses,
      ListGenesErrors,
      ThrowOnError
    >({
      responseTransformer: listGenesResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/genes',
      ...options
    })
  }

  /**
   * Create gene
   */
  public static createGene<ThrowOnError extends boolean = false>(
    options: Options<CreateGeneData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateGeneResponses,
      CreateGeneErrors,
      ThrowOnError
    >({
      responseTransformer: createGeneResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/genes',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete gene
   */
  public static deleteGene<ThrowOnError extends boolean = false>(
    options: Options<DeleteGeneData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteGeneResponses,
      DeleteGeneErrors,
      ThrowOnError
    >({
      responseTransformer: deleteGeneResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/genes/{code}',
      ...options
    })
  }

  /**
   * Update gene
   */
  public static updateGene<ThrowOnError extends boolean = false>(
    options: Options<UpdateGeneData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateGeneResponses,
      UpdateGeneErrors,
      ThrowOnError
    >({
      responseTransformer: updateGeneResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/genes/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List sequences
   */
  public static listSequences<ThrowOnError extends boolean = false>(
    options?: Options<ListSequencesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListSequencesResponses,
      ListSequencesErrors,
      ThrowOnError
    >({
      responseTransformer: listSequencesResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sequences',
      ...options
    })
  }

  /**
   * Delete sequence
   */
  public static deleteSequence<ThrowOnError extends boolean = false>(
    options: Options<DeleteSequenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteSequenceResponses,
      DeleteSequenceErrors,
      ThrowOnError
    >({
      responseTransformer: deleteSequenceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sequences/{code}',
      ...options
    })
  }

  /**
   * Get sequence
   */
  public static getSequence<ThrowOnError extends boolean = false>(
    options: Options<GetSequenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      GetSequenceResponses,
      GetSequenceErrors,
      ThrowOnError
    >({
      responseTransformer: getSequenceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sequences/{code}',
      ...options
    })
  }
}

export class ServicesService {
  /**
   * Reverse geocode coordinates using Geoapify API
   */
  public static reverseGeocode<ThrowOnError extends boolean = false>(
    options: Options<ReverseGeocodeData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      ReverseGeocodeResponses,
      ReverseGeocodeErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/geoapify/reverse-geocode',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Get Geoapify API status
   */
  public static getGeoapifyStatus<ThrowOnError extends boolean = false>(
    options?: Options<GetGeoapifyStatusData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetGeoapifyStatusResponses,
      GetGeoapifyStatusErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/geoapify/status',
      ...options
    })
  }

  /**
   * List Geoapify usage
   */
  public static listGeoapifyUsage<ThrowOnError extends boolean = false>(
    options?: Options<ListGeoapifyUsageData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListGeoapifyUsageResponses,
      ListGeoapifyUsageErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/geoapify/usage',
      ...options
    })
  }
}

export class LocationService {
  /**
   * Get country from WGS84 coordinates
   */
  public static coordinatesToCountry<ThrowOnError extends boolean = false>(
    options: Options<CoordinatesToCountryData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CoordinatesToCountryResponses,
      CoordinatesToCountryErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/locations/coordinates',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List sites within a radius of a point
   */
  public static sitesProximity<ThrowOnError extends boolean = false>(
    options: Options<SitesProximityData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      SitesProximityResponses,
      SitesProximityErrors,
      ThrowOnError
    >({
      responseTransformer: sitesProximityResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/locations/coordinates/proximity',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List countries
   */
  public static listCountries<ThrowOnError extends boolean = false>(
    options?: Options<ListCountriesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListCountriesResponses,
      ListCountriesErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/locations/countries',
      ...options
    })
  }

  /**
   * Get country list with sites count
   */
  public static getSitesCountByCountry<ThrowOnError extends boolean = false>(
    options?: Options<GetSitesCountByCountryData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetSitesCountByCountryResponses,
      GetSitesCountByCountryErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/locations/countries/sites-count',
      ...options
    })
  }

  /**
   * Search sites
   * Search sites by name, code or locality fuzzy matching a query. Returns a list of sites sorted by similarity.
   */
  public static searchSites<ThrowOnError extends boolean = false>(
    options?: Options<SearchSitesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      SearchSitesResponses,
      SearchSitesErrors,
      ThrowOnError
    >({
      responseTransformer: searchSitesResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/locations/search',
      ...options
    })
  }

  /**
   * List sites
   * List all registered sites
   */
  public static listSites<ThrowOnError extends boolean = false>(
    options?: Options<ListSitesData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListSitesResponses,
      ListSitesErrors,
      ThrowOnError
    >({
      querySerializer: {
        array: {
          explode: false,
          style: 'form'
        }
      },
      responseTransformer: listSitesResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sites',
      ...options
    })
  }

  /**
   * Create site
   * Create site infos using its code
   */
  public static createSite<ThrowOnError extends boolean = false>(
    options: Options<CreateSiteData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateSiteResponses,
      CreateSiteErrors,
      ThrowOnError
    >({
      responseTransformer: createSiteResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sites',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Get site
   * Get site infos using its code
   */
  public static getSite<ThrowOnError extends boolean = false>(
    options: Options<GetSiteData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<GetSiteResponses, GetSiteErrors, ThrowOnError>({
      responseTransformer: getSiteResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sites/{code}',
      ...options
    })
  }

  /**
   * Update site
   * Update site infos using its code
   */
  public static updateSite<ThrowOnError extends boolean = false>(
    options: Options<UpdateSiteData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateSiteResponses,
      UpdateSiteErrors,
      ThrowOnError
    >({
      responseTransformer: updateSiteResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sites/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List site events
   */
  public static listSiteEvents<ThrowOnError extends boolean = false>(
    options: Options<ListSiteEventsData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<
      ListSiteEventsResponses,
      ListSiteEventsErrors,
      ThrowOnError
    >({
      responseTransformer: listSiteEventsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sites/{code}/events',
      ...options
    })
  }

  /**
   * Create event
   * Register event on a site identified by its code
   */
  public static createEvent<ThrowOnError extends boolean = false>(
    options: Options<CreateEventData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateEventResponses,
      CreateEventErrors,
      ThrowOnError
    >({
      responseTransformer: createEventResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sites/{code}/events',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Add occurrence at site
   * Register new occurrence at site, including event + sampling specification and biomaterial identification
   */
  public static siteAddExternalOccurrence<ThrowOnError extends boolean = false>(
    options: Options<SiteAddExternalOccurrenceData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      SiteAddExternalOccurrenceResponses,
      SiteAddExternalOccurrenceErrors,
      ThrowOnError
    >({
      responseTransformer: siteAddExternalOccurrenceResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/sites/{code}/occurrences/external',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class PeopleService {
  /**
   * List organisations
   */
  public static listOrganisations<ThrowOnError extends boolean = false>(
    options?: Options<ListOrganisationsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListOrganisationsResponses,
      ListOrganisationsErrors,
      ThrowOnError
    >({
      responseTransformer: listOrganisationsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/organisations',
      ...options
    })
  }

  /**
   * Create organisation
   */
  public static createOrganisation<ThrowOnError extends boolean = false>(
    options: Options<CreateOrganisationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateOrganisationResponses,
      CreateOrganisationErrors,
      ThrowOnError
    >({
      responseTransformer: createOrganisationResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/organisations',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete organisation
   */
  public static deleteOrganisation<ThrowOnError extends boolean = false>(
    options: Options<DeleteOrganisationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteOrganisationResponses,
      DeleteOrganisationErrors,
      ThrowOnError
    >({
      responseTransformer: deleteOrganisationResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/organisations/{code}',
      ...options
    })
  }

  /**
   * Update organisation
   */
  public static updateOrganisation<ThrowOnError extends boolean = false>(
    options: Options<UpdateOrganisationData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateOrganisationResponses,
      UpdateOrganisationErrors,
      ThrowOnError
    >({
      responseTransformer: updateOrganisationResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/organisations/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List persons
   */
  public static listPersons<ThrowOnError extends boolean = false>(
    options?: Options<ListPersonsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListPersonsResponses,
      ListPersonsErrors,
      ThrowOnError
    >({
      responseTransformer: listPersonsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/persons',
      ...options
    })
  }

  /**
   * Create person
   */
  public static createPerson<ThrowOnError extends boolean = false>(
    options: Options<CreatePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreatePersonResponses,
      CreatePersonErrors,
      ThrowOnError
    >({
      responseTransformer: createPersonResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/persons',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete person
   */
  public static deletePerson<ThrowOnError extends boolean = false>(
    options: Options<DeletePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeletePersonResponses,
      DeletePersonErrors,
      ThrowOnError
    >({
      responseTransformer: deletePersonResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/persons/{id}',
      ...options
    })
  }

  /**
   * Update person
   */
  public static updatePerson<ThrowOnError extends boolean = false>(
    options: Options<UpdatePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdatePersonResponses,
      UpdatePersonErrors,
      ThrowOnError
    >({
      responseTransformer: updatePersonResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/persons/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Invite person
   * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
   */
  public static invitePerson<ThrowOnError extends boolean = false>(
    options: Options<InvitePersonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      InvitePersonResponses,
      InvitePersonErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/persons/{id}/invite',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class SettingsService {
  /**
   * Email settings
   */
  public static emailSettings<ThrowOnError extends boolean = false>(
    options?: Options<EmailSettingsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      EmailSettingsResponses,
      EmailSettingsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/emailing',
      ...options
    })
  }

  /**
   * Update email settings
   */
  public static updateEmailSettings<ThrowOnError extends boolean = false>(
    options: Options<UpdateEmailSettingsData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UpdateEmailSettingsResponses,
      UpdateEmailSettingsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/emailing',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Test SMTP connection
   */
  public static testSmtp<ThrowOnError extends boolean = false>(
    options: Options<TestSmtpData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<TestSmtpResponses, TestSmtpErrors, ThrowOnError>({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/emailing/test-dial',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Set app icon
   */
  public static setAppIcon<ThrowOnError extends boolean = false>(
    options?: Options<SetAppIconData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).post<
      SetAppIconResponses,
      SetAppIconErrors,
      ThrowOnError
    >({
      ...formDataBodySerializer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/icon',
      ...options,
      headers: {
        'Content-Type': null,
        ...options?.headers
      }
    })
  }

  /**
   * Instance settings
   */
  public static instanceSettings<ThrowOnError extends boolean = false>(
    options?: Options<InstanceSettingsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      InstanceSettingsResponses,
      InstanceSettingsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/instance',
      ...options
    })
  }

  /**
   * Update instance settings
   */
  public static updateInstanceSettings<ThrowOnError extends boolean = false>(
    options: Options<UpdateInstanceSettingsData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UpdateInstanceSettingsResponses,
      UpdateInstanceSettingsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/instance',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List saved data feeds
   */
  public static listDataFeeds<ThrowOnError extends boolean = false>(
    options?: Options<ListDataFeedsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListDataFeedsResponses,
      ListDataFeedsErrors,
      ThrowOnError
    >({
      responseTransformer: listDataFeedsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/mapping/data-feeds',
      ...options
    })
  }

  /**
   * Save data feed
   */
  public static createDataFeed<ThrowOnError extends boolean = false>(
    options: Options<CreateDataFeedData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateDataFeedResponses,
      CreateDataFeedErrors,
      ThrowOnError
    >({
      responseTransformer: createDataFeedResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/mapping/data-feeds',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * List saved map presets
   */
  public static listMapPresets<ThrowOnError extends boolean = false>(
    options?: Options<ListMapPresetsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListMapPresetsResponses,
      ListMapPresetsErrors,
      ThrowOnError
    >({
      responseTransformer: listMapPresetsResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/mapping/map-presets',
      ...options
    })
  }

  /**
   * Save map preset
   * Creates a new map preset or updates an existing one. If the preset already exists and is owned by the current user, it will be updated. Admins can update global presets.
   */
  public static createUpdateMapPreset<ThrowOnError extends boolean = false>(
    options: Options<CreateUpdateMapPresetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).put<
      CreateUpdateMapPresetResponses,
      CreateUpdateMapPresetErrors,
      ThrowOnError
    >({
      responseTransformer: createUpdateMapPresetResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/mapping/map-presets',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete map preset
   * Deletes a map preset by name. Only the owner of the preset or an admin can delete it.
   */
  public static deleteMapPreset<ThrowOnError extends boolean = false>(
    options: Options<DeleteMapPresetData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteMapPresetResponses,
      DeleteMapPresetErrors,
      ThrowOnError
    >({
      responseTransformer: deleteMapPresetResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/mapping/map-presets/{name}',
      ...options
    })
  }

  /**
   * Security settings
   */
  public static securitySettings<ThrowOnError extends boolean = false>(
    options?: Options<SecuritySettingsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      SecuritySettingsResponses,
      SecuritySettingsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/security',
      ...options
    })
  }

  /**
   * Update security settings
   */
  public static updateSecuritySettings<ThrowOnError extends boolean = false>(
    options: Options<UpdateSecuritySettingsData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      UpdateSecuritySettingsResponses,
      UpdateSecuritySettingsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/security',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Service settings
   */
  public static serviceSettings<ThrowOnError extends boolean = false>(
    options?: Options<ServiceSettingsData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      ServiceSettingsResponses,
      ServiceSettingsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/services',
      ...options
    })
  }

  /**
   * Update service settings
   */
  public static updateServiceSettings<ThrowOnError extends boolean = false>(
    options: Options<UpdateServiceSettingsData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateServiceSettingsResponses,
      UpdateServiceSettingsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/settings/services',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}

export class TaxonomyService {
  /**
   * Get taxonomy
   */
  public static getTaxonomy<ThrowOnError extends boolean = false>(
    options?: Options<GetTaxonomyData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetTaxonomyResponses,
      GetTaxonomyErrors,
      ThrowOnError
    >({
      responseTransformer: getTaxonomyResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/taxonomy',
      ...options
    })
  }

  /**
   * List taxa
   */
  public static listTaxa<ThrowOnError extends boolean = false>(
    options?: Options<ListTaxaData, ThrowOnError>
  ) {
    return (options?.client ?? _heyApiClient).get<ListTaxaResponses, ListTaxaErrors, ThrowOnError>({
      querySerializer: {
        array: {
          explode: false,
          style: 'form'
        }
      },
      responseTransformer: listTaxaResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/taxonomy/taxa',
      ...options
    })
  }

  /**
   * Create taxon
   */
  public static createTaxon<ThrowOnError extends boolean = false>(
    options: Options<CreateTaxonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateTaxonResponses,
      CreateTaxonErrors,
      ThrowOnError
    >({
      responseTransformer: createTaxonResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/taxonomy/taxa',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }

  /**
   * Delete taxon
   */
  public static deleteTaxon<ThrowOnError extends boolean = false>(
    options: Options<DeleteTaxonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteTaxonResponses,
      DeleteTaxonErrors,
      ThrowOnError
    >({
      responseTransformer: deleteTaxonResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/taxonomy/taxa/{code}',
      ...options
    })
  }

  /**
   * Get taxon
   */
  public static getTaxon<ThrowOnError extends boolean = false>(
    options: Options<GetTaxonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).get<GetTaxonResponses, GetTaxonErrors, ThrowOnError>({
      responseTransformer: getTaxonResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/taxonomy/taxa/{code}',
      ...options
    })
  }

  /**
   * Update taxon
   */
  public static updateTaxon<ThrowOnError extends boolean = false>(
    options: Options<UpdateTaxonData, ThrowOnError>
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateTaxonResponses,
      UpdateTaxonErrors,
      ThrowOnError
    >({
      responseTransformer: updateTaxonResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          in: 'cookie',
          name: 'auth_token',
          type: 'apiKey'
        }
      ],
      url: '/taxonomy/taxa/{code}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    })
  }
}
