// This file is auto-generated by @hey-api/openapi-ts

export type AbioticMeasurement = {
  id: string
  param: AbioticParameter
  value: number
}

export type AbioticParameter = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  id: string
  label: string
  meta: Meta
  unit: string
}

export type AbioticParameterInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  label: string
  unit: string
}

export type AbioticParameterUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code?: string
  description?: string | null
  label?: string
  unit: string
}

export type Article = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  authors: Array<string>
  code: string
  comments?: string
  doi?: string
  id: string
  journal?: string
  meta: Meta
  original_source: boolean
  title?: string
  verbatim?: string
  year: number
}

export type ArticleInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  authors: Array<string>
  code?: string
  comments?: string
  doi?: string
  journal?: string
  title?: string
  verbatim?: string
  year: number
}

export type ArticleUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  authors?: Array<string>
  code?: string
  comments?: string | null
  doi?: string | null
  journal?: string | null
  title?: string | null
  verbatim?: string | null
  year?: number
}

export type Assertion = {
  group?: Group
  label?: string
  name?: string
  value?: string
}

export type AuthenticationResponse = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * JSON Web Token
   */
  auth_token: string
  /**
   * Time at which auth token expires
   */
  auth_token_expiration: Date
  messages: Array<string>
  /**
   * Session refresh token
   */
  refresh_token: string
  user: User
}

export type BibSearchResults = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  items: Array<Message>
  total: number
}

export type BioMaterial = {
  category: OccurrenceCategory
  code: string
  code_history?: Array<CodeHistory>
  comments?: string
  external?: OptionalExternalBioMatSpecific
  has_sequences: boolean
  id: string
  identification: Identification
  is_congruent: boolean
  is_homogenous: boolean
  is_type: boolean
  meta: Meta
  published_in?: Array<OccurrenceReference>
  sampling: SamplingInner
  seq_consensus?: OptionalTaxon
}

export type BioMaterialWithDetails = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  category: OccurrenceCategory
  code: string
  code_history?: Array<CodeHistory>
  comments?: string
  event: EventInner
  external?: OptionalExternalBioMatSpecific
  has_sequences: boolean
  id: string
  identification: Identification
  is_congruent: boolean
  is_homogenous: boolean
  is_type: boolean
  meta: Meta
  published_in?: Array<OccurrenceReference>
  sampling: Sampling
  seq_consensus?: OptionalTaxon
}

export type ClinicalTrailNumber = {
  'clinical-trail-number'?: string
  registry?: string
  type?: string
}

export type CodeHistory = {
  code: string
  time: Date
}

export type CompositeDate = {
  day?: number
  month?: number
  year?: number
}

export type ContentDomain = {
  'crossmark-restriction'?: boolean
  domain?: Array<string>
}

export type Coordinates = {
  latitude: number
  longitude: number
  /**
   * Where the coordinates point to
   */
  precision: CoordinatesPrecision
}

export type CoordinatesPrecision = '<100m' | '<1km' | '<10km' | '10-100km' | 'Unknown'

export type Country = {
  code: string
  id: string
  name: string
}

export type CrossRefPerson = {
  ORCID?: string
  affiliation?: Array<Organization>
  'authenticated-orcid'?: boolean
  family?: string
  given?: string
  name?: string
  prefix?: string
  sequence?: string
  suffix?: string
}

export type CurrentUserResponse = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * JSON Web Token
   */
  auth_token: string
  /**
   * Time at which auth token expires
   */
  auth_token_expiration: Date
  /**
   * Session refresh token
   */
  refresh_token: string
  user: User
}

export type DatasetInner = {
  description: string
  id: string
  label: string
  slug: string
}

export type DateObject = {
  'date-parts'?: Array<Array<number>>
  'date-time'?: string
  timestamp?: number
}

export type DatePrecision = 'Day' | 'Month' | 'Year' | 'Unknown'

export type DateRange = {
  'end-date'?: DateObject
  'start-date'?: DateObject
}

export type DateWithPrecision = {
  date?: Date
  precision: DatePrecision
}

export type DateWithPrecisionInput = {
  date: CompositeDate
  precision: DatePrecision
}

export type EmailSettings = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  from_address: string
  from_name: string
  /**
   * SMTP domain that handles email sending
   */
  host: string
  /**
   * SMTP password
   */
  password: string
  /**
   * SMTP port
   */
  port: number
  /**
   * SMTP login
   */
  user: string
}

export type EmailSettingsInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  from_address: string
  from_name: string
  /**
   * SMTP domain that handles email sending
   */
  host: string
  /**
   * SMTP password
   */
  password: string
  /**
   * SMTP port
   */
  port: number
  /**
   * SMTP login
   */
  user: string
}

export type ErrorDetail = {
  /**
   * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
   */
  location?: string
  /**
   * Error message text
   */
  message?: string
  /**
   * The value at the given location
   */
  value?: unknown
}

export type ErrorModel = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string
  /**
   * Optional list of individual error details
   */
  errors?: Array<ErrorDetail>
  /**
   * A URI reference that identifies the specific occurrence of the problem.
   */
  instance?: string
  /**
   * HTTP status code
   */
  status?: number
  /**
   * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
   */
  title?: string
  /**
   * A URI reference to human-readable documentation for the error.
   */
  type?: string
}

export type Event = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  abiotic_measurements?: Array<AbioticMeasurement>
  code: string
  comments?: string
  id: string
  meta: Meta
  performed_by: Array<PersonUser>
  performed_on: DateWithPrecision
  programs?: Array<ProgramInner>
  samplings?: Array<Sampling>
  site: SiteInfo
  spottings?: Array<Taxon>
}

export type EventInner = {
  code: string
  comments?: string
  id: string
  performed_on: DateWithPrecision
  site: SiteInfo
}

export type EventInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  performed_by: Array<string>
  performed_on: DateWithPrecisionInput
  programs?: Array<string>
}

export type EventUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  comments?: string | null
  performed_by?: Array<string>
  performed_on?: DateWithPrecisionInput
  programs?: Array<string> | null
  spottings?: Array<string> | null
}

export type ExtSeqOrigin = 'Lab' | 'DB' | 'PersCom'

export type ExtSeqSpecificsBioMaterial = {
  origin: ExtSeqOrigin
  original_taxon: string
  published_in?: Array<OccurrenceReference>
  referenced_in?: Array<SeqReference>
  source_sample: OptionalBioMaterial
  specimen_identifier: string
}

export type ExternalBioMatContent = {
  sequences: Array<ExternalBioMatSequence>
  specimen: string
}

export type ExternalBioMatOccurrenceInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code?: string
  collection?: string
  comments?: string
  content_description?: string
  identification: IdentificationInput
  is_type?: boolean
  original_link?: string
  published_in?: Array<OccurrenceReferenceInput>
  quantity: Quantity
  sampling: string
  sampling_id: string
  vouchers?: Array<string>
}

export type ExternalBioMatSequence = {
  accession_number: string
  category: OccurrenceCategory
  code: string
  code_history?: Array<CodeHistory>
  comments: string
  gene: Gene
  id: string
  identification: Identification
  label: string
  legacy?: OptionalLegacySeqId
  origin: ExtSeqOrigin
  original_taxon: string
  published_in?: Array<Article>
  referenced_in?: Array<SeqReference>
  sequence?: string
  specimen_identifier: string
}

export type ExternalBioMatSpecific = {
  archive: SpecimenVoucher
  comments: string
  content?: Array<ExternalBioMatContent>
  content_description?: string
  original_link?: string
  original_taxon?: string
  quantity: Quantity
}

export type ExternalBioMatUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code?: string
  collection?: string | null
  comments?: string | null
  content_description?: string | null
  identification?: IdentificationUpdate
  is_type?: boolean
  original_link?: string | null
  original_taxon?: string | null
  published_in: Array<OccurrenceReferenceInput> | null
  quantity?: Quantity
  sampling_id: string
  vouchers?: Array<string>
}

export type Fixative = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  id: string
  label: string
  meta: Meta
}

export type FixativeInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  label: string
}

export type FixativeUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code?: string
  description?: string | null
  label?: string
}

export type Funder = {
  DOI?: string
  award?: Array<string>
  'doi-asserted-by'?: string
  name?: string
}

export type Gene = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  id: string
  is_MOTU_delimiter: boolean
  label: string
  meta: Meta
}

export type GeneInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  is_MOTU_delimiter?: boolean
  label: string
}

export type GeneUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code?: string
  description?: string | null
  is_MOTU_delimiter?: boolean
  label?: string
}

export type GeoapifyUsage = {
  date: string
  id: string
  requests: number
}

export type Group = {
  label?: string
  name?: string
}

export type Habitat = {
  /**
   * Optional habitat description
   */
  description?: string
  id: string
  incompatible?: Array<HabitatRecord>
  /**
   * A short label for the habitat.
   */
  label: string
  meta: Meta
}

export type HabitatGroup = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  depends: OptionalHabitatRecord
  elements: Array<HabitatRecord>
  exclusive_elements: boolean
  id: string
  /**
   * Name for the group of habitat tags
   */
  label: string
  meta: Meta
}

export type HabitatGroupInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * Habitat tag that this group is a refinement of
   */
  depends?: string
  elements: Array<HabitatInput>
  exclusive_elements?: boolean
  /**
   * Name for the group of habitat tags
   */
  label: string
}

export type HabitatGroupUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  create_tags?: Array<HabitatInput>
  delete_tags?: Array<string>
  depends?: string | null
  exclusive_elements?: boolean
  label?: string
  update_tags?: {
    [key: string]: HabitatUpdate
  }
}

export type HabitatInput = {
  /**
   * Optional habitat description
   */
  description?: string
  /**
   * A short label for the habitat.
   */
  label: string
}

export type HabitatRecord = {
  /**
   * Optional habitat description
   */
  description?: string
  id: string
  incompatible?: Array<HabitatRecord>
  /**
   * A short label for the habitat.
   */
  label: string
}

export type HabitatUpdate = {
  description?: string | null
  label?: string
}

export type Identification = {
  id: string
  identified_by: OptionalPerson
  identified_on: DateWithPrecision
  meta: Meta
  taxon: Taxon
}

export type IdentificationInput = {
  identified_by: string
  identified_on: DateWithPrecisionInput
  taxon: string
}

export type IdentificationUpdate = {
  identified_by?: string | null
  identified_on?: DateWithPrecisionInput
  taxon?: string
}

export type Identifier = {
  'asserted-by'?: string
  id?: string
  'id-type'?: string
  label?: string
  name?: string
  type?: string
  value?: string
}

export type ImportProcess = {
  GBIF_ID: number
  done: boolean
  error: unknown
  expected: number
  imported: number
  name: string
  rank: TaxonRank
  started: Date
}

export type ImportRequestGbif = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * Import whole clade, including the taxon descendants
   */
  children: boolean
  /**
   * Target GBIF taxon key
   */
  key: number
}

export type InstanceSettings = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * Whether requests to contribute to the database can be made.
   */
  allow_contributor_signup: boolean
  description: string
  /**
   * The name of this database platform
   */
  name: string
  /**
   * Whether the platform is accessible to unauthenticated users
   */
  public: boolean
}

export type InstanceSettingsInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * Whether requests to contribute to the database can be made.
   */
  allow_contributor_signup: boolean
  description?: string | null
  /**
   * The name of this database platform
   */
  name: string
  /**
   * Whether the platform is accessible to unauthenticated users
   */
  public: boolean
}

export type Institution = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  id: string
  kind: InstitutionKind
  meta: Meta
  name: string
  /**
   * Known members of this institution
   */
  people?: Array<PersonUser>
}

export type InstitutionInner = {
  code: string
  description?: string
  id: string
  kind: InstitutionKind
  name: string
}

export type InstitutionInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  kind: InstitutionKind
  name: string
}

export type InstitutionKind = 'Lab' | 'FundingAgency' | 'SequencingPlatform' | 'Other'

export type InstitutionUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code?: string
  description?: string | null
  kind?: InstitutionKind
  name?: string
}

export type InvitationInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * E-mail address of the recipient of the invitation
   */
  email: string
  /**
   * A URL template with a {token} parameter, which implements the UI to validate the invitation token and fill a registration form.
   */
  handler?: Url
  role: UserRole
}

export type InvitationLink = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * The generated URL containing a registration token that can be shared to the invitee.
   */
  invitation_link: Url
}

export type JournalIssue = {
  issue?: string
}

export type LegacySeqId = {
  alignment_code: string
  code: string
  id: number
}

export type License = {
  URL?: string
  'content-version'?: string
  'delay-in-days'?: number
  start?: DateObject
}

export type Lineage = {
  class?: OptionalTaxon
  family?: OptionalTaxon
  genus?: OptionalTaxon
  kingdom?: OptionalTaxon
  order?: OptionalTaxon
  phylum?: OptionalTaxon
  species?: OptionalTaxon
  subspecies?: OptionalTaxon
}

export type Link = {
  URL?: string
  'content-type'?: string
  'content-version'?: string
  'intended-application'?: string
}

export type LogoutInputBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  refresh_token?: string
}

export type Message = {
  URL?: string
  abstract?: string
  accepted?: DateObject
  'alternative-id'?: Array<string>
  approved?: DateObject
  archive?: Array<string>
  'article-number'?: string
  assertion?: Array<Assertion>
  author?: Array<CrossRefPerson>
  chair?: Array<CrossRefPerson>
  'clinical-trail-number'?: ClinicalTrailNumber
  'component-number'?: string
  'container-title'?: Array<string>
  'content-created'?: DateObject
  'content-domain'?: ContentDomain
  'content-updated'?: DateObject
  created?: DateObject
  degree?: string
  deposited?: DateObject
  doi?: string
  'edition-number'?: string
  editor?: Array<CrossRefPerson>
  'free-to-read'?: DateRange
  funder?: Array<Funder>
  'group-title'?: string
  indexed?: DateObject
  institution?: Array<Organization>
  isbn?: Array<string>
  'isbn-type'?: Array<Identifier>
  issn?: Array<string>
  'issn-type'?: Array<Identifier>
  issue?: string
  issued?: DateObject
  'journal-issue'?: JournalIssue
  language?: string
  license?: Array<License>
  link?: Array<Link>
  member?: string
  'original-title'?: Array<string>
  page?: string
  'part-number'?: string
  posted?: DateObject
  prefix?: string
  published?: DateObject
  'published-online'?: DateObject
  'published-other'?: DateObject
  'published-print'?: DateObject
  publisher?: string
  'publisher-location'?: string
  reference?: Array<Reference>
  'reference-count'?: number
  relation?: {
    [key: string]: Array<Property>
  }
  review?: Review
  score?: number
  'short-container-title'?: Array<string>
  'short-title'?: Array<string>
  source?: string
  'standards-body'?: Array<Organization>
  subject?: Array<string>
  subtitle?: Array<string>
  title?: Array<string>
  translator?: Array<CrossRefPerson>
  type?: string
  'update-policy'?: string
  'updated-to'?: Array<Updated>
  volume?: string
}

export type Meta = {
  created: Date
  created_by?: UserShortIdentity
  last_updated: Date
  modified?: Date
  updated_by?: UserShortIdentity
}

export type OccurrenceCategory = 'Internal' | 'External'

export type OccurrenceDataset = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  description: string
  id: string
  is_congruent: boolean
  label: string
  maintainers: Array<PersonUser>
  meta: Meta
  occurrences: Array<OccurrenceWithCategory>
  sites: Array<SiteItem>
  slug: string
}

export type OccurrenceElement = 'BioMaterial' | 'Sequence'

export type OccurrenceOverviewItem = {
  name: string
  occurrences: number
  parent_name: string
  rank: TaxonRank
}

export type OccurrenceReference = {
  authors: Array<string>
  code: string
  comments?: string
  doi?: string
  id: string
  journal?: string
  meta: Meta
  original?: boolean
  original_source: boolean
  title?: string
  verbatim?: string
  year: number
}

export type OccurrenceReferenceInput = {
  code: string
  original?: boolean
}

export type OccurrenceWithCategory = {
  category: OccurrenceCategory
  comments: string
  element: OccurrenceElement
  id: string
  identification: Identification
  published_in?: Array<OccurrenceReference>
  sampling: SamplingInner
}

export type OptionalBioMaterial = {
  category: OccurrenceCategory
  code: string
  code_history?: Array<CodeHistory>
  comments?: string
  external?: OptionalExternalBioMatSpecific
  has_sequences: boolean
  id: string
  identification: Identification
  is_congruent: boolean
  is_homogenous: boolean
  is_type: boolean
  meta: Meta
  published_in?: Array<OccurrenceReference>
  sampling: SamplingInner
  seq_consensus?: OptionalTaxon
} | null

export type OptionalExtSeqSpecificsBioMaterial = {
  origin: ExtSeqOrigin
  original_taxon: string
  published_in?: Array<OccurrenceReference>
  referenced_in?: Array<SeqReference>
  source_sample: OptionalBioMaterial
  specimen_identifier: string
} | null

export type OptionalExternalBioMatSpecific = {
  archive: SpecimenVoucher
  comments: string
  content?: Array<ExternalBioMatContent>
  content_description?: string
  original_link?: string
  original_taxon?: string
  quantity: Quantity
} | null

export type OptionalHabitatRecord = {
  /**
   * Optional habitat description
   */
  description?: string
  id: string
  incompatible?: Array<HabitatRecord>
  /**
   * A short label for the habitat.
   */
  label: string
} | null

export type OptionalLegacySeqId = {
  alignment_code: string
  code: string
  id: number
} | null

export type OptionalPerson = {
  alias: string
  comment: string
  contact: string
  first_name: string
  full_name: string
  id: string
  last_name: string
  role?: UserRole
}

export type OptionalTaxon = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  GBIF_ID?: number
  anchor: boolean
  authorship?: string
  children_count: number
  code: string
  comment?: string
  id: string
  meta: Meta
  name: string
  rank: TaxonRank
  status: TaxonStatus
} | null

export type OptionalUserInner = {
  email: string
  email_confirmed: boolean
  id: string
  login: string
  role: UserRole
} | null

export type Organization = {
  acronym?: Array<string>
  department?: Array<string>
  id?: Array<Identifier>
  name?: string
  place?: Array<string>
}

export type PasswordInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * Your new password
   */
  password: string
  /**
   * New password confirmation
   */
  password_confirmation: string
}

export type PasswordResetRequest = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  email: string
  /**
   * A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.
   */
  handler?: string
}

export type PendingUserRequest = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  created_on: Date
  email: string
  email_verified: boolean
  first_name: string
  full_name: string
  id: string
  institution?: string
  last_name: string
  motive?: string
}

export type PendingUserRequestInput = {
  email: string
  first_name: string
  institution?: string
  last_name: string
  motive?: string
}

export type Person = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  alias: string
  comment: string
  contact: string
  first_name: string
  full_name: string
  id: string
  institutions: Array<InstitutionInner>
  last_name: string
  meta: Meta
  role?: UserRole
  user: OptionalUserInner
}

export type PersonInner = {
  alias: string
  comment: string
  contact: string
  first_name: string
  full_name: string
  id: string
  last_name: string
  role?: UserRole
}

export type PersonInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  alias?: string
  comment?: string
  contact?: string
  first_name: string
  institutions: Array<string>
  last_name: string
}

export type PersonUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  alias?: string
  comment?: string | null
  contact?: string | null
  first_name?: string
  institutions?: Array<string>
  last_name?: string
}

export type PersonUser = {
  alias: string
  comment: string
  contact: string
  first_name: string
  full_name: string
  id: string
  last_name: string
  role?: UserRole
  user: OptionalUserInner
}

export type Program = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  end_year?: number
  funding_agencies: Array<InstitutionInner>
  id: string
  label: string
  managers: Array<PersonInner>
  meta: Meta
  start_year?: number
}

export type ProgramInner = {
  code: string
  description?: string
  end_year?: number
  id: string
  label: string
  start_year?: number
}

export type ProgramInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  end_year?: number
  funding_agencies?: Array<string>
  label: string
  managers: Array<string>
  start_year?: number
}

export type ProgramUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code?: string
  description?: string | null
  end_year?: number | null
  funding_agencies?: Array<string> | null
  label?: string
  managers?: Array<string> | null
  start_year?: number | null
}

export type Property = {
  'asserted-by'?: string
  id?: string
  'id-type'?: string
}

export type Quantity = 'Unknown' | 'One' | 'Several' | 'Dozen' | 'Tens' | 'Hundred'

export type Reference = {
  'article-title'?: string
  author?: string
  component?: string
  doi?: string
  'doi-asserted-by'?: string
  edition?: string
  'first-page'?: string
  isbn?: string
  'isbn-type'?: string
  issn?: string
  'issn-type'?: string
  issue?: string
  'journal-title'?: string
  key?: string
  'series-title'?: string
  'standard-designator'?: string
  'standards-body'?: string
  unstructured?: string
  volume?: string
  'volume-title'?: string
  year?: string
}

export type RefreshTokenBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  refresh_token: string
}

export type RegisterInputBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  data: PendingUserRequestInput
  verification_path: string
}

export type ResendEmailVerificationInputBody = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  email: string
  /**
   * A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.
   */
  verification_url: string
}

export type Review = {
  'competing-interest-statement'?: string
  language?: string
  recommendation?: string
  'revision-round'?: string
  'running-number'?: string
  stage?: string
  type?: string
}

export type Sampling = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  access_points?: Array<string>
  code: string
  comments?: string
  /**
   * Sampling duration in minutes
   */
  duration?: number
  fixatives?: Array<Fixative>
  habitats?: Array<Habitat>
  id: string
  meta: Meta
  methods?: Array<SamplingMethod>
  occurring_taxa?: Array<Taxon>
  samples?: Array<BioMaterial>
  target: SamplingTarget
}

export type SamplingInner = {
  access_points?: Array<string>
  code: string
  comments?: string
  /**
   * Sampling duration in minutes
   */
  duration?: number
  fixatives?: Array<Fixative>
  habitats?: Array<Habitat>
  id: string
  methods?: Array<SamplingMethod>
  target: SamplingTarget
}

export type SamplingInputWithEvent = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  access_points?: Array<string>
  comments?: string
  /**
   * Sampling duration in minutes
   */
  duration?: number
  event_id: string
  fixatives?: Array<string>
  habitats?: Array<string>
  methods?: Array<string>
  target: SamplingTargetInput
}

export type SamplingMethod = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  id: string
  label: string
  meta: Meta
}

export type SamplingMethodInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  label: string
}

export type SamplingMethodUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code?: string
  description?: string | null
  label?: string
}

export type SamplingTarget = {
  kind: SamplingTargetKind
  taxa?: Array<Taxon>
}

export type SamplingTargetInput = {
  kind: SamplingTargetKind
  taxa?: Array<string>
}

export type SamplingTargetKind = 'Community' | 'Unknown' | 'Taxa'

export type SamplingUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  access_points?: Array<string> | null
  comments?: string | null
  /**
   * Sampling duration in minutes
   */
  duration?: number | null
  fixatives?: Array<string> | null
  habitats?: Array<string> | null
  methods?: Array<string> | null
  target: SamplingTargetInput
}

export type SecuritySettings = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * Invitation token lifetime in days
   */
  invitation_token_lifetime: number
  /**
   * The level of complexity required for account passwords.
   */
  min_password_strength: number
  /**
   * User session lifetime in hours
   */
  refresh_token_lifetime: number
}

export type SecuritySettingsInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * Invitation token lifetime in days
   */
  invitation_token_lifetime: number
  /**
   * The level of complexity required for account passwords.
   */
  min_password_strength: number
  /**
   * User session lifetime in hours
   */
  refresh_token_lifetime: number
}

export type SeqDb = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  id: string
  label: string
  link_template?: string
  meta: Meta
}

export type SeqDbInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code: string
  description?: string
  label: string
  link_template?: string
}

export type SeqDbUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  code?: string
  description?: string | null
  label?: string
  link_template?: string | null
}

export type SeqReference = {
  accession: string
  db: SeqDb
  id: string
  is_origin: boolean
}

export type Sequence = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  category: OccurrenceCategory
  code: string
  code_history?: Array<CodeHistory>
  comments?: string
  event: EventInner
  external?: OptionalExtSeqSpecificsBioMaterial
  gene: Gene
  id: string
  identification: Identification
  label: string
  legacy?: OptionalLegacySeqId
  meta: Meta
  published_in?: Array<OccurrenceReference>
  sampling: SamplingInner
  sequence?: string
}

export type SequenceDataset = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  description: string
  id: string
  label: string
  maintainers: Array<PersonUser>
  meta: Meta
  sequences: Array<Sequence>
  sites: Array<SiteItem>
  slug: string
}

export type SequenceWithDetails = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  category: OccurrenceCategory
  code: string
  code_history?: Array<CodeHistory>
  comments?: string
  event: EventInner
  external?: OptionalExtSeqSpecificsBioMaterial
  gene: Gene
  id: string
  identification: Identification
  label: string
  legacy?: OptionalLegacySeqId
  meta: Meta
  published_in?: Array<OccurrenceReference>
  sampling: Sampling
  sequence?: string
}

export type ServiceSettings = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  geoapify_api_key: string
}

export type ServiceSettingsUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  geoapify_api_key: string | null
}

export type Site = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  access_point?: string
  altitude?: number
  code: string
  coordinates: Coordinates
  country: Country
  datasets?: Array<DatasetInner>
  description?: string
  events?: Array<Event>
  id: string
  locality?: string
  meta: Meta
  name: string
  user_defined_locality: boolean
}

export type SiteDataset = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  description: string
  id: string
  label: string
  maintainers: Array<PersonUser>
  meta: Meta
  sites: Array<SiteItem>
  slug: string
}

export type SiteDatasetInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  description?: string
  label: string
  /**
   * Dataset maintainers identified by their person alias. Dataset creator is always a maintainer by default.
   */
  maintainers: Array<string>
  /**
   * New sites to include in the dataset
   */
  new_sites?: Array<SiteInput>
  /**
   * Existing site codes to include in the dataset
   */
  sites?: Array<string>
  slug: string
}

export type SiteInfo = {
  code: string
  name: string
}

export type SiteInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * Site altitude in meters
   */
  altitude?: number
  /**
   * A short unique uppercase alphanumeric identifier
   */
  code: string
  /**
   * Site coordinates in decimal degrees
   */
  coordinates: Coordinates
  country_code: string
  description?: string
  /**
   * Nearest populated place
   */
  locality?: string
  name: string
  /**
   * Signals if locality was manually entered by user, and automatically inferred from coordinates
   */
  user_defined_locality: boolean
}

export type SiteItem = {
  access_point?: string
  altitude?: number
  code: string
  coordinates: Coordinates
  country: Country
  description?: string
  id: string
  locality?: string
  name: string
  user_defined_locality: boolean
}

export type SiteUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  /**
   * Site altitude in meters
   */
  altitude?: number | null
  /**
   * A short unique uppercase alphanumeric identifier
   */
  code?: string
  /**
   * Site coordinates in decimal degrees
   */
  coordinates?: Coordinates
  country_code?: string
  description?: string | null
  /**
   * Nearest populated place
   */
  locality?: string | null
  name?: string
  /**
   * Signals whether locality was manually entered by user, and automatically inferred from coordinates
   */
  user_defined_locality: boolean
}

export type SpecimenVoucher = {
  collection: string
  vouchers: Array<string>
}

export type Taxon = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  GBIF_ID?: number
  anchor: boolean
  authorship?: string
  children_count: number
  code: string
  comment?: string
  id: string
  meta: Meta
  name: string
  rank: TaxonRank
  status: TaxonStatus
}

export type TaxonInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  authorship?: string
  code?: string
  comment?: string
  name: string
  parent: string
  rank: TaxonRank
  status: TaxonStatus
}

export type TaxonRank =
  | 'Kingdom'
  | 'Phylum'
  | 'Class'
  | 'Order'
  | 'Family'
  | 'Genus'
  | 'Species'
  | 'Subspecies'

export type TaxonStatus = 'Accepted' | 'Unreferenced' | 'Unclassified'

export type TaxonUpdate = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  authorship?: string | null
  code?: string
  name?: string
  parent?: string
  rank?: TaxonRank
  status?: TaxonStatus
}

export type TaxonWithLineage = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  GBIF_ID?: number
  anchor: boolean
  authorship?: string
  children?: Array<Taxon>
  children_count: number
  code: string
  comment?: string
  id: string
  lineage: Lineage
  meta: Meta
  name: string
  parent?: OptionalTaxon
  rank: TaxonRank
  status: TaxonStatus
}

export type TaxonWithParentRef = {
  GBIF_ID?: number
  anchor: boolean
  authorship?: string
  children_count: number
  code: string
  comment?: string
  id: string
  meta: Meta
  name: string
  parent: string
  rank: TaxonRank
  status: TaxonStatus
}

export type TaxonWithRelatives = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  GBIF_ID?: number
  anchor: boolean
  authorship?: string
  children?: Array<Taxon>
  children_count: number
  code: string
  comment?: string
  id: string
  meta: Meta
  name: string
  parent?: OptionalTaxon
  rank: TaxonRank
  status: TaxonStatus
}

export type Taxonomy = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  GBIF_ID?: number
  anchor: boolean
  authorship?: string
  children?: Array<Taxonomy>
  children_count: number
  code: string
  comment?: string
  id: string
  meta: Meta
  name: string
  parent?: OptionalTaxon
  rank: TaxonRank
  status: TaxonStatus
}

/**
 * A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.
 */
export type Url = string

export type UpdatePasswordInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  new_password: PasswordInput
  /**
   * Your current password
   */
  password: string
}

export type Updated = {
  doi?: string
  label?: string
  type?: string
  updated?: DateObject
}

export type User = {
  email: string
  email_confirmed: boolean
  id: string
  identity: PersonInner
  login: string
  role: UserRole
}

export type UserCredentials = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  identifier: string
  password: string
}

export type UserInner = {
  email: string
  email_confirmed: boolean
  id: string
  login: string
  role: UserRole
}

export type UserInput = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  email: string
  login: string
  /**
   * Your new password
   */
  password: string
  /**
   * New password confirmation
   */
  password_confirmation: string
}

export type UserRole = 'Visitor' | 'Contributor' | 'Maintainer' | 'Admin'

export type UserShortIdentity = {
  alias: string
  id: string
  login: string
  name: string
} | null

export type Works = {
  /**
   * A URL to the JSON Schema for this object.
   */
  readonly $schema?: string
  message?: Message
  'message-type'?: string
  'message-version'?: string
  status?: string
}

export type ListAbioticParametersData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/abiotic'
}

export type ListAbioticParametersErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListAbioticParametersError =
  ListAbioticParametersErrors[keyof ListAbioticParametersErrors]

export type ListAbioticParametersResponses = {
  /**
   * OK
   */
  200: Array<AbioticParameter>
}

export type ListAbioticParametersResponse =
  ListAbioticParametersResponses[keyof ListAbioticParametersResponses]

export type CreateAbioticParameterData = {
  body: AbioticParameterInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/abiotic'
}

export type CreateAbioticParameterErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateAbioticParameterError =
  CreateAbioticParameterErrors[keyof CreateAbioticParameterErrors]

export type CreateAbioticParameterResponses = {
  /**
   * OK
   */
  200: AbioticParameter
}

export type CreateAbioticParameterResponse =
  CreateAbioticParameterResponses[keyof CreateAbioticParameterResponses]

export type DeleteAbioticParameterData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/abiotic/{code}'
}

export type DeleteAbioticParameterErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteAbioticParameterError =
  DeleteAbioticParameterErrors[keyof DeleteAbioticParameterErrors]

export type DeleteAbioticParameterResponses = {
  /**
   * OK
   */
  200: AbioticParameter
}

export type DeleteAbioticParameterResponse =
  DeleteAbioticParameterResponses[keyof DeleteAbioticParameterResponses]

export type UpdateAbioticParameterData = {
  body: AbioticParameterUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/abiotic/{code}'
}

export type UpdateAbioticParameterErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateAbioticParameterError =
  UpdateAbioticParameterErrors[keyof UpdateAbioticParameterErrors]

export type UpdateAbioticParameterResponses = {
  /**
   * OK
   */
  200: AbioticParameter
}

export type UpdateAbioticParameterResponse =
  UpdateAbioticParameterResponses[keyof UpdateAbioticParameterResponses]

export type GetAccessPointsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/access-points'
}

export type GetAccessPointsErrors = {
  /**
   * Error
   */
  default: ErrorModel
}

export type GetAccessPointsError = GetAccessPointsErrors[keyof GetAccessPointsErrors]

export type GetAccessPointsResponses = {
  /**
   * OK
   */
  200: Array<string>
}

export type GetAccessPointsResponse = GetAccessPointsResponses[keyof GetAccessPointsResponses]

export type CurrentUserData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/account'
}

export type CurrentUserErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CurrentUserError = CurrentUserErrors[keyof CurrentUserErrors]

export type CurrentUserResponses = {
  /**
   * The currently authenticated user
   */
  200: CurrentUserResponse
  /**
   * No active user session
   */
  204: void
}

export type CurrentUserResponse2 = CurrentUserResponses[keyof CurrentUserResponses]

export type ConfirmEmailData = {
  body?: never
  path?: never
  query?: {
    token?: string
  }
  url: '/account/email-confirmation'
}

export type ConfirmEmailErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ConfirmEmailError = ConfirmEmailErrors[keyof ConfirmEmailErrors]

export type ConfirmEmailResponses = {
  /**
   * No Content
   */
  204: void
}

export type ConfirmEmailResponse = ConfirmEmailResponses[keyof ConfirmEmailResponses]

export type ResendEmailVerificationData = {
  body: ResendEmailVerificationInputBody
  path?: never
  query?: never
  url: '/account/email-confirmation/resend'
}

export type ResendEmailVerificationErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ResendEmailVerificationError =
  ResendEmailVerificationErrors[keyof ResendEmailVerificationErrors]

export type ResendEmailVerificationResponses = {
  /**
   * No Content
   */
  204: void
}

export type ResendEmailVerificationResponse =
  ResendEmailVerificationResponses[keyof ResendEmailVerificationResponses]

export type RequestPasswordResetData = {
  body: PasswordResetRequest
  path?: never
  query?: never
  url: '/account/forgotten-password'
}

export type RequestPasswordResetErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type RequestPasswordResetError = RequestPasswordResetErrors[keyof RequestPasswordResetErrors]

export type RequestPasswordResetResponses = {
  /**
   * No Content
   */
  204: void
}

export type RequestPasswordResetResponse =
  RequestPasswordResetResponses[keyof RequestPasswordResetResponses]

export type LoginData = {
  body: UserCredentials
  path?: never
  query?: never
  url: '/account/login'
}

export type LoginErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type LoginError = LoginErrors[keyof LoginErrors]

export type LoginResponses = {
  /**
   * OK
   */
  200: AuthenticationResponse
}

export type LoginResponse = LoginResponses[keyof LoginResponses]

export type LogoutData = {
  body: LogoutInputBody
  path?: never
  query?: never
  url: '/account/logout'
}

export type LogoutErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type LogoutError = LogoutErrors[keyof LogoutErrors]

export type LogoutResponses = {
  /**
   * No Content
   */
  204: void
}

export type LogoutResponse = LogoutResponses[keyof LogoutResponses]

export type UpdatePasswordData = {
  body: UpdatePasswordInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/account/password'
}

export type UpdatePasswordErrors = {
  /**
   * Unauthorized
   */
  401: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdatePasswordError = UpdatePasswordErrors[keyof UpdatePasswordErrors]

export type UpdatePasswordResponses = {
  /**
   * No Content
   */
  204: void
}

export type UpdatePasswordResponse = UpdatePasswordResponses[keyof UpdatePasswordResponses]

export type ValidatePasswordTokenData = {
  body?: never
  path?: never
  query: {
    token: string
  }
  url: '/account/password-reset'
}

export type ValidatePasswordTokenErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ValidatePasswordTokenError =
  ValidatePasswordTokenErrors[keyof ValidatePasswordTokenErrors]

export type ValidatePasswordTokenResponses = {
  /**
   * No Content
   */
  204: void
}

export type ValidatePasswordTokenResponse =
  ValidatePasswordTokenResponses[keyof ValidatePasswordTokenResponses]

export type ResetPasswordData = {
  body: PasswordInput
  path?: never
  query: {
    token: string
  }
  url: '/account/password-reset'
}

export type ResetPasswordErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ResetPasswordError = ResetPasswordErrors[keyof ResetPasswordErrors]

export type ResetPasswordResponses = {
  /**
   * No Content
   */
  204: void
}

export type ResetPasswordResponse = ResetPasswordResponses[keyof ResetPasswordResponses]

export type ListPendingUserRequestsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/account/pending'
}

export type ListPendingUserRequestsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListPendingUserRequestsError =
  ListPendingUserRequestsErrors[keyof ListPendingUserRequestsErrors]

export type ListPendingUserRequestsResponses = {
  /**
   * OK
   */
  200: Array<PendingUserRequest>
}

export type ListPendingUserRequestsResponse =
  ListPendingUserRequestsResponses[keyof ListPendingUserRequestsResponses]

export type DeletePendingUserRequestData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/account/pending/{email}'
}

export type DeletePendingUserRequestErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeletePendingUserRequestError =
  DeletePendingUserRequestErrors[keyof DeletePendingUserRequestErrors]

export type DeletePendingUserRequestResponses = {
  /**
   * OK
   */
  200: PendingUserRequest
}

export type DeletePendingUserRequestResponse =
  DeletePendingUserRequestResponses[keyof DeletePendingUserRequestResponses]

export type GetPendingUserRequestData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/account/pending/{email}'
}

export type GetPendingUserRequestErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type GetPendingUserRequestError =
  GetPendingUserRequestErrors[keyof GetPendingUserRequestErrors]

export type GetPendingUserRequestResponses = {
  /**
   * OK
   */
  200: PendingUserRequest
}

export type GetPendingUserRequestResponse =
  GetPendingUserRequestResponses[keyof GetPendingUserRequestResponses]

export type RefreshSessionData = {
  body: RefreshTokenBody
  path?: never
  query?: never
  url: '/account/refresh'
}

export type RefreshSessionErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type RefreshSessionError = RefreshSessionErrors[keyof RefreshSessionErrors]

export type RefreshSessionResponses = {
  /**
   * OK
   */
  200: AuthenticationResponse
}

export type RefreshSessionResponse = RefreshSessionResponses[keyof RefreshSessionResponses]

export type RegisterData = {
  body: RegisterInputBody
  path?: never
  query?: never
  url: '/account/register'
}

export type RegisterErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type RegisterError = RegisterErrors[keyof RegisterErrors]

export type RegisterResponses = {
  /**
   * Created
   */
  201: string
}

export type RegisterResponse = RegisterResponses[keyof RegisterResponses]

export type ClaimInvitationData = {
  body: UserInput
  path: {
    token: string
  }
  query?: never
  url: '/account/register/{token}'
}

export type ClaimInvitationErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ClaimInvitationError = ClaimInvitationErrors[keyof ClaimInvitationErrors]

export type ClaimInvitationResponses = {
  /**
   * OK
   */
  200: AuthenticationResponse
}

export type ClaimInvitationResponse = ClaimInvitationResponses[keyof ClaimInvitationResponses]

export type ListAnchorsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/anchors/'
}

export type ListAnchorsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListAnchorsError = ListAnchorsErrors[keyof ListAnchorsErrors]

export type ListAnchorsResponses = {
  /**
   * OK
   */
  200: Array<TaxonWithParentRef>
}

export type ListAnchorsResponse = ListAnchorsResponses[keyof ListAnchorsResponses]

export type ListBioMaterialData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/bio-material'
}

export type ListBioMaterialErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListBioMaterialError = ListBioMaterialErrors[keyof ListBioMaterialErrors]

export type ListBioMaterialResponses = {
  /**
   * OK
   */
  200: Array<BioMaterialWithDetails>
}

export type ListBioMaterialResponse = ListBioMaterialResponses[keyof ListBioMaterialResponses]

export type UpdateExternalBioMatData = {
  body: ExternalBioMatUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/bio-material/external'
}

export type UpdateExternalBioMatErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateExternalBioMatError = UpdateExternalBioMatErrors[keyof UpdateExternalBioMatErrors]

export type UpdateExternalBioMatResponses = {
  /**
   * OK
   */
  200: BioMaterialWithDetails
}

export type UpdateExternalBioMatResponse =
  UpdateExternalBioMatResponses[keyof UpdateExternalBioMatResponses]

export type CreateExternalBioMatData = {
  body: ExternalBioMatOccurrenceInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/bio-material/external'
}

export type CreateExternalBioMatErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateExternalBioMatError = CreateExternalBioMatErrors[keyof CreateExternalBioMatErrors]

export type CreateExternalBioMatResponses = {
  /**
   * OK
   */
  200: BioMaterialWithDetails
}

export type CreateExternalBioMatResponse =
  CreateExternalBioMatResponses[keyof CreateExternalBioMatResponses]

export type DeleteBioMaterialData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/bio-material/{code}'
}

export type DeleteBioMaterialErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteBioMaterialError = DeleteBioMaterialErrors[keyof DeleteBioMaterialErrors]

export type DeleteBioMaterialResponses = {
  /**
   * OK
   */
  200: BioMaterialWithDetails
}

export type DeleteBioMaterialResponse = DeleteBioMaterialResponses[keyof DeleteBioMaterialResponses]

export type GetBioMaterialData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/bio-material/{code}'
}

export type GetBioMaterialErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type GetBioMaterialError = GetBioMaterialErrors[keyof GetBioMaterialErrors]

export type GetBioMaterialResponses = {
  /**
   * OK
   */
  200: BioMaterialWithDetails
}

export type GetBioMaterialResponse = GetBioMaterialResponses[keyof GetBioMaterialResponses]

export type CrossRefData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query: {
    doi: string
  }
  url: '/crossref'
}

export type CrossRefErrors = {
  /**
   * Error
   */
  default: ErrorModel
}

export type CrossRefError = CrossRefErrors[keyof CrossRefErrors]

export type CrossRefResponses = {
  /**
   * OK
   */
  200: Works
}

export type CrossRefResponse = CrossRefResponses[keyof CrossRefResponses]

export type CrossRefBibSearchData = {
  body: string
  path?: never
  query?: never
  url: '/crossref'
}

export type CrossRefBibSearchErrors = {
  /**
   * Error
   */
  default: ErrorModel
}

export type CrossRefBibSearchError = CrossRefBibSearchErrors[keyof CrossRefBibSearchErrors]

export type CrossRefBibSearchResponses = {
  /**
   * OK
   */
  200: BibSearchResults
}

export type CrossRefBibSearchResponse = CrossRefBibSearchResponses[keyof CrossRefBibSearchResponses]

export type ListOccurrenceDatasetsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/datasets/occurrence'
}

export type ListOccurrenceDatasetsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListOccurrenceDatasetsError =
  ListOccurrenceDatasetsErrors[keyof ListOccurrenceDatasetsErrors]

export type ListOccurrenceDatasetsResponses = {
  /**
   * OK
   */
  200: Array<OccurrenceDataset>
}

export type ListOccurrenceDatasetsResponse =
  ListOccurrenceDatasetsResponses[keyof ListOccurrenceDatasetsResponses]

export type GetOccurrenceDatasetData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    slug: string
  }
  query?: never
  url: '/datasets/occurrence/{slug}'
}

export type GetOccurrenceDatasetErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type GetOccurrenceDatasetError = GetOccurrenceDatasetErrors[keyof GetOccurrenceDatasetErrors]

export type GetOccurrenceDatasetResponses = {
  /**
   * OK
   */
  200: OccurrenceDataset
}

export type GetOccurrenceDatasetResponse =
  GetOccurrenceDatasetResponses[keyof GetOccurrenceDatasetResponses]

export type ListSequenceDatasetsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/datasets/sequences'
}

export type ListSequenceDatasetsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListSequenceDatasetsError = ListSequenceDatasetsErrors[keyof ListSequenceDatasetsErrors]

export type ListSequenceDatasetsResponses = {
  /**
   * OK
   */
  200: Array<SequenceDataset>
}

export type ListSequenceDatasetsResponse =
  ListSequenceDatasetsResponses[keyof ListSequenceDatasetsResponses]

export type GetSequenceDatasetData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    slug: string
  }
  query?: never
  url: '/datasets/sequences/{slug}'
}

export type GetSequenceDatasetErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type GetSequenceDatasetError = GetSequenceDatasetErrors[keyof GetSequenceDatasetErrors]

export type GetSequenceDatasetResponses = {
  /**
   * OK
   */
  200: SequenceDataset
}

export type GetSequenceDatasetResponse =
  GetSequenceDatasetResponses[keyof GetSequenceDatasetResponses]

export type ListSiteDatasetsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/datasets/sites'
}

export type ListSiteDatasetsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListSiteDatasetsError = ListSiteDatasetsErrors[keyof ListSiteDatasetsErrors]

export type ListSiteDatasetsResponses = {
  /**
   * OK
   */
  200: Array<SiteDataset>
}

export type ListSiteDatasetsResponse = ListSiteDatasetsResponses[keyof ListSiteDatasetsResponses]

export type CreateSiteDatasetData = {
  body: SiteDatasetInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/datasets/sites'
}

export type CreateSiteDatasetErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateSiteDatasetError = CreateSiteDatasetErrors[keyof CreateSiteDatasetErrors]

export type CreateSiteDatasetResponses = {
  /**
   * OK
   */
  200: SiteDataset
}

export type CreateSiteDatasetResponse = CreateSiteDatasetResponses[keyof CreateSiteDatasetResponses]

export type GetSiteDatasetData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    slug: string
  }
  query?: never
  url: '/datasets/sites/{slug}'
}

export type GetSiteDatasetErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type GetSiteDatasetError = GetSiteDatasetErrors[keyof GetSiteDatasetErrors]

export type GetSiteDatasetResponses = {
  /**
   * OK
   */
  200: SiteDataset
}

export type GetSiteDatasetResponse = GetSiteDatasetResponses[keyof GetSiteDatasetResponses]

export type DeleteEventData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    id: string
  }
  query?: never
  url: '/events/{id}'
}

export type DeleteEventErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteEventError = DeleteEventErrors[keyof DeleteEventErrors]

export type DeleteEventResponses = {
  /**
   * OK
   */
  200: Event
}

export type DeleteEventResponse = DeleteEventResponses[keyof DeleteEventResponses]

export type UpdateEventData = {
  body: EventUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    id: string
  }
  query?: never
  url: '/events/{id}'
}

export type UpdateEventErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateEventError = UpdateEventErrors[keyof UpdateEventErrors]

export type UpdateEventResponses = {
  /**
   * OK
   */
  200: Event
}

export type UpdateEventResponse = UpdateEventResponses[keyof UpdateEventResponses]

export type UpdateSpottingData = {
  body: Array<string>
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    id: string
  }
  query?: never
  url: '/events/{id}/spottings'
}

export type UpdateSpottingErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateSpottingError = UpdateSpottingErrors[keyof UpdateSpottingErrors]

export type UpdateSpottingResponses = {
  /**
   * OK
   */
  200: Array<Taxon>
}

export type UpdateSpottingResponse = UpdateSpottingResponses[keyof UpdateSpottingResponses]

export type ListFixativesData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/fixatives'
}

export type ListFixativesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListFixativesError = ListFixativesErrors[keyof ListFixativesErrors]

export type ListFixativesResponses = {
  /**
   * OK
   */
  200: Array<Fixative>
}

export type ListFixativesResponse = ListFixativesResponses[keyof ListFixativesResponses]

export type CreateFixativeData = {
  body: FixativeInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/fixatives'
}

export type CreateFixativeErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateFixativeError = CreateFixativeErrors[keyof CreateFixativeErrors]

export type CreateFixativeResponses = {
  /**
   * OK
   */
  200: Fixative
}

export type CreateFixativeResponse = CreateFixativeResponses[keyof CreateFixativeResponses]

export type DeleteFixativeData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/fixatives/{code}'
}

export type DeleteFixativeErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteFixativeError = DeleteFixativeErrors[keyof DeleteFixativeErrors]

export type DeleteFixativeResponses = {
  /**
   * OK
   */
  200: Fixative
}

export type DeleteFixativeResponse = DeleteFixativeResponses[keyof DeleteFixativeResponses]

export type UpdateFixativeData = {
  body: FixativeUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/fixatives/{code}'
}

export type UpdateFixativeErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateFixativeError = UpdateFixativeErrors[keyof UpdateFixativeErrors]

export type UpdateFixativeResponses = {
  /**
   * OK
   */
  200: Fixative
}

export type UpdateFixativeResponse = UpdateFixativeResponses[keyof UpdateFixativeResponses]

export type ListGenesData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/genes'
}

export type ListGenesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListGenesError = ListGenesErrors[keyof ListGenesErrors]

export type ListGenesResponses = {
  /**
   * OK
   */
  200: Array<Gene>
}

export type ListGenesResponse = ListGenesResponses[keyof ListGenesResponses]

export type CreateGeneData = {
  body: GeneInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/genes'
}

export type CreateGeneErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateGeneError = CreateGeneErrors[keyof CreateGeneErrors]

export type CreateGeneResponses = {
  /**
   * OK
   */
  200: Gene
}

export type CreateGeneResponse = CreateGeneResponses[keyof CreateGeneResponses]

export type DeleteGeneData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/genes/{code}'
}

export type DeleteGeneErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteGeneError = DeleteGeneErrors[keyof DeleteGeneErrors]

export type DeleteGeneResponses = {
  /**
   * OK
   */
  200: Gene
}

export type DeleteGeneResponse = DeleteGeneResponses[keyof DeleteGeneResponses]

export type UpdateGeneData = {
  body: GeneUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/genes/{code}'
}

export type UpdateGeneErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateGeneError = UpdateGeneErrors[keyof UpdateGeneErrors]

export type UpdateGeneResponses = {
  /**
   * OK
   */
  200: Gene
}

export type UpdateGeneResponse = UpdateGeneResponses[keyof UpdateGeneResponses]

export type ListGeoapifyUsageData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/geoapify'
}

export type ListGeoapifyUsageErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListGeoapifyUsageError = ListGeoapifyUsageErrors[keyof ListGeoapifyUsageErrors]

export type ListGeoapifyUsageResponses = {
  /**
   * OK
   */
  200: Array<GeoapifyUsage>
}

export type ListGeoapifyUsageResponse = ListGeoapifyUsageResponses[keyof ListGeoapifyUsageResponses]

export type ListHabitatGroupsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/habitats'
}

export type ListHabitatGroupsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListHabitatGroupsError = ListHabitatGroupsErrors[keyof ListHabitatGroupsErrors]

export type ListHabitatGroupsResponses = {
  /**
   * OK
   */
  200: Array<HabitatGroup>
}

export type ListHabitatGroupsResponse = ListHabitatGroupsResponses[keyof ListHabitatGroupsResponses]

export type CreateHabitatGroupData = {
  body: HabitatGroupInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/habitats'
}

export type CreateHabitatGroupErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateHabitatGroupError = CreateHabitatGroupErrors[keyof CreateHabitatGroupErrors]

export type CreateHabitatGroupResponses = {
  /**
   * OK
   */
  200: HabitatGroup
}

export type CreateHabitatGroupResponse =
  CreateHabitatGroupResponses[keyof CreateHabitatGroupResponses]

export type DeleteHabitatGroupData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/habitats/{code}'
}

export type DeleteHabitatGroupErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteHabitatGroupError = DeleteHabitatGroupErrors[keyof DeleteHabitatGroupErrors]

export type DeleteHabitatGroupResponses = {
  /**
   * OK
   */
  200: HabitatGroup
}

export type DeleteHabitatGroupResponse =
  DeleteHabitatGroupResponses[keyof DeleteHabitatGroupResponses]

export type UpdateHabitatGroupData = {
  body: HabitatGroupUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/habitats/{code}'
}

export type UpdateHabitatGroupErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateHabitatGroupError = UpdateHabitatGroupErrors[keyof UpdateHabitatGroupErrors]

export type UpdateHabitatGroupResponses = {
  /**
   * OK
   */
  200: HabitatGroup
}

export type UpdateHabitatGroupResponse =
  UpdateHabitatGroupResponses[keyof UpdateHabitatGroupResponses]

export type ImportGbifData = {
  body: ImportRequestGbif
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/import/taxonomy'
}

export type ImportGbifErrors = {
  /**
   * Error
   */
  default: ErrorModel
}

export type ImportGbifError = ImportGbifErrors[keyof ImportGbifErrors]

export type ImportGbifResponses = {
  /**
   * No Content
   */
  204: void
}

export type ImportGbifResponse = ImportGbifResponses[keyof ImportGbifResponses]

export type MonitorGbifData = {
  body?: never
  path?: never
  query?: never
  url: '/import/taxonomy/monitor'
}

export type MonitorGbifErrors = {
  /**
   * Error
   */
  default: ErrorModel
}

export type MonitorGbifError = MonitorGbifErrors[keyof MonitorGbifErrors]

export type MonitorGbifResponses = {
  /**
   * Each oneOf object in the array represents one possible Server Sent Events (SSE) message, serialized as UTF-8 text according to the SSE specification.
   */
  200: Array<{
    data: {
      [key: string]: ImportProcess
    }
    /**
     * The event name.
     */
    event: 'state'
    /**
     * The event ID.
     */
    id?: number
    /**
     * The retry time in milliseconds.
     */
    retry?: number
  }>
}

export type MonitorGbifResponse = MonitorGbifResponses[keyof MonitorGbifResponses]

export type ListInstitutionsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/institutions'
}

export type ListInstitutionsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListInstitutionsError = ListInstitutionsErrors[keyof ListInstitutionsErrors]

export type ListInstitutionsResponses = {
  /**
   * OK
   */
  200: Array<Institution>
}

export type ListInstitutionsResponse = ListInstitutionsResponses[keyof ListInstitutionsResponses]

export type CreateInstitutionData = {
  body: InstitutionInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/institutions'
}

export type CreateInstitutionErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateInstitutionError = CreateInstitutionErrors[keyof CreateInstitutionErrors]

export type CreateInstitutionResponses = {
  /**
   * OK
   */
  200: Institution
}

export type CreateInstitutionResponse = CreateInstitutionResponses[keyof CreateInstitutionResponses]

export type DeleteInstitutionData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/institutions/{code}'
}

export type DeleteInstitutionErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteInstitutionError = DeleteInstitutionErrors[keyof DeleteInstitutionErrors]

export type DeleteInstitutionResponses = {
  /**
   * OK
   */
  200: Institution
}

export type DeleteInstitutionResponse = DeleteInstitutionResponses[keyof DeleteInstitutionResponses]

export type UpdateInstitutionData = {
  body: InstitutionUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/institutions/{code}'
}

export type UpdateInstitutionErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateInstitutionError = UpdateInstitutionErrors[keyof UpdateInstitutionErrors]

export type UpdateInstitutionResponses = {
  /**
   * OK
   */
  200: Institution
}

export type UpdateInstitutionResponse = UpdateInstitutionResponses[keyof UpdateInstitutionResponses]

export type ListCountriesData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/locations/countries'
}

export type ListCountriesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListCountriesError = ListCountriesErrors[keyof ListCountriesErrors]

export type ListCountriesResponses = {
  /**
   * OK
   */
  200: Array<Country>
}

export type ListCountriesResponse = ListCountriesResponses[keyof ListCountriesResponses]

export type OccurrenceOverviewData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/occurrences/overview'
}

export type OccurrenceOverviewErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type OccurrenceOverviewError = OccurrenceOverviewErrors[keyof OccurrenceOverviewErrors]

export type OccurrenceOverviewResponses = {
  /**
   * OK
   */
  200: Array<OccurrenceOverviewItem>
}

export type OccurrenceOverviewResponse =
  OccurrenceOverviewResponses[keyof OccurrenceOverviewResponses]

export type ListPersonsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/persons'
}

export type ListPersonsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListPersonsError = ListPersonsErrors[keyof ListPersonsErrors]

export type ListPersonsResponses = {
  /**
   * OK
   */
  200: Array<Person>
}

export type ListPersonsResponse = ListPersonsResponses[keyof ListPersonsResponses]

export type CreatePersonData = {
  body: PersonInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/persons'
}

export type CreatePersonErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreatePersonError = CreatePersonErrors[keyof CreatePersonErrors]

export type CreatePersonResponses = {
  /**
   * OK
   */
  200: Person
}

export type CreatePersonResponse = CreatePersonResponses[keyof CreatePersonResponses]

export type DeletePersonData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    id: string
  }
  query?: never
  url: '/persons/{id}'
}

export type DeletePersonErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeletePersonError = DeletePersonErrors[keyof DeletePersonErrors]

export type DeletePersonResponses = {
  /**
   * OK
   */
  200: Person
}

export type DeletePersonResponse = DeletePersonResponses[keyof DeletePersonResponses]

export type UpdatePersonData = {
  body: PersonUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    id: string
  }
  query?: never
  url: '/persons/{id}'
}

export type UpdatePersonErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdatePersonError = UpdatePersonErrors[keyof UpdatePersonErrors]

export type UpdatePersonResponses = {
  /**
   * OK
   */
  200: Person
}

export type UpdatePersonResponse = UpdatePersonResponses[keyof UpdatePersonResponses]

export type InvitePersonData = {
  body: InvitationInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    id: string
  }
  query?: never
  url: '/persons/{id}/invite'
}

export type InvitePersonErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type InvitePersonError = InvitePersonErrors[keyof InvitePersonErrors]

export type InvitePersonResponses = {
  /**
   * OK
   */
  200: InvitationLink
}

export type InvitePersonResponse = InvitePersonResponses[keyof InvitePersonResponses]

export type ListProgramsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/programs'
}

export type ListProgramsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListProgramsError = ListProgramsErrors[keyof ListProgramsErrors]

export type ListProgramsResponses = {
  /**
   * OK
   */
  200: Array<Program>
}

export type ListProgramsResponse = ListProgramsResponses[keyof ListProgramsResponses]

export type CreateProgramData = {
  body: ProgramInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/programs'
}

export type CreateProgramErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateProgramError = CreateProgramErrors[keyof CreateProgramErrors]

export type CreateProgramResponses = {
  /**
   * OK
   */
  200: Program
}

export type CreateProgramResponse = CreateProgramResponses[keyof CreateProgramResponses]

export type DeleteProgramData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/programs/{code}'
}

export type DeleteProgramErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteProgramError = DeleteProgramErrors[keyof DeleteProgramErrors]

export type DeleteProgramResponses = {
  /**
   * OK
   */
  200: Program
}

export type DeleteProgramResponse = DeleteProgramResponses[keyof DeleteProgramResponses]

export type UpdateProgramData = {
  body: ProgramUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/programs/{code}'
}

export type UpdateProgramErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateProgramError = UpdateProgramErrors[keyof UpdateProgramErrors]

export type UpdateProgramResponses = {
  /**
   * OK
   */
  200: Program
}

export type UpdateProgramResponse = UpdateProgramResponses[keyof UpdateProgramResponses]

export type ListArticlesData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/references'
}

export type ListArticlesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListArticlesError = ListArticlesErrors[keyof ListArticlesErrors]

export type ListArticlesResponses = {
  /**
   * OK
   */
  200: Array<Article>
}

export type ListArticlesResponse = ListArticlesResponses[keyof ListArticlesResponses]

export type CreateArticleData = {
  body: ArticleInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/references'
}

export type CreateArticleErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateArticleError = CreateArticleErrors[keyof CreateArticleErrors]

export type CreateArticleResponses = {
  /**
   * OK
   */
  200: Article
}

export type CreateArticleResponse = CreateArticleResponses[keyof CreateArticleResponses]

export type DeleteArticleData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/references/{code}'
}

export type DeleteArticleErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteArticleError = DeleteArticleErrors[keyof DeleteArticleErrors]

export type DeleteArticleResponses = {
  /**
   * OK
   */
  200: Article
}

export type DeleteArticleResponse = DeleteArticleResponses[keyof DeleteArticleResponses]

export type UpdateArticleData = {
  body: ArticleUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/references/{code}'
}

export type UpdateArticleErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateArticleError = UpdateArticleErrors[keyof UpdateArticleErrors]

export type UpdateArticleResponses = {
  /**
   * OK
   */
  200: Article
}

export type UpdateArticleResponse = UpdateArticleResponses[keyof UpdateArticleResponses]

export type ListSamplingMethodsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/sampling-methods'
}

export type ListSamplingMethodsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListSamplingMethodsError = ListSamplingMethodsErrors[keyof ListSamplingMethodsErrors]

export type ListSamplingMethodsResponses = {
  /**
   * OK
   */
  200: Array<SamplingMethod>
}

export type ListSamplingMethodsResponse =
  ListSamplingMethodsResponses[keyof ListSamplingMethodsResponses]

export type CreateSamplingMethodData = {
  body: SamplingMethodInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/sampling-methods'
}

export type CreateSamplingMethodErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateSamplingMethodError = CreateSamplingMethodErrors[keyof CreateSamplingMethodErrors]

export type CreateSamplingMethodResponses = {
  /**
   * OK
   */
  200: SamplingMethod
}

export type CreateSamplingMethodResponse =
  CreateSamplingMethodResponses[keyof CreateSamplingMethodResponses]

export type DeleteSamplingMethodData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/sampling-methods/{code}'
}

export type DeleteSamplingMethodErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteSamplingMethodError = DeleteSamplingMethodErrors[keyof DeleteSamplingMethodErrors]

export type DeleteSamplingMethodResponses = {
  /**
   * OK
   */
  200: SamplingMethod
}

export type DeleteSamplingMethodResponse =
  DeleteSamplingMethodResponses[keyof DeleteSamplingMethodResponses]

export type UpdateSamplingMethodData = {
  body: SamplingMethodUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/sampling-methods/{code}'
}

export type UpdateSamplingMethodErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateSamplingMethodError = UpdateSamplingMethodErrors[keyof UpdateSamplingMethodErrors]

export type UpdateSamplingMethodResponses = {
  /**
   * OK
   */
  200: SamplingMethod
}

export type UpdateSamplingMethodResponse =
  UpdateSamplingMethodResponses[keyof UpdateSamplingMethodResponses]

export type CreateSamplingData = {
  body: SamplingInputWithEvent
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/samplings'
}

export type CreateSamplingErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateSamplingError = CreateSamplingErrors[keyof CreateSamplingErrors]

export type CreateSamplingResponses = {
  /**
   * OK
   */
  200: Sampling
}

export type CreateSamplingResponse = CreateSamplingResponses[keyof CreateSamplingResponses]

export type DeleteSamplingData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    id: string
  }
  query?: never
  url: '/samplings/{id}'
}

export type DeleteSamplingErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteSamplingError = DeleteSamplingErrors[keyof DeleteSamplingErrors]

export type DeleteSamplingResponses = {
  /**
   * OK
   */
  200: Sampling
}

export type DeleteSamplingResponse = DeleteSamplingResponses[keyof DeleteSamplingResponses]

export type UpdateSamplingData = {
  body: SamplingUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    id: string
  }
  query?: never
  url: '/samplings/{id}'
}

export type UpdateSamplingErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateSamplingError = UpdateSamplingErrors[keyof UpdateSamplingErrors]

export type UpdateSamplingResponses = {
  /**
   * OK
   */
  200: Sampling
}

export type UpdateSamplingResponse = UpdateSamplingResponses[keyof UpdateSamplingResponses]

export type ListSeqDbsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/seq-databases'
}

export type ListSeqDbsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListSeqDbsError = ListSeqDbsErrors[keyof ListSeqDbsErrors]

export type ListSeqDbsResponses = {
  /**
   * OK
   */
  200: Array<SeqDb>
}

export type ListSeqDbsResponse = ListSeqDbsResponses[keyof ListSeqDbsResponses]

export type CreateSeqDbData = {
  body: SeqDbInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/seq-databases'
}

export type CreateSeqDbErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateSeqDbError = CreateSeqDbErrors[keyof CreateSeqDbErrors]

export type CreateSeqDbResponses = {
  /**
   * OK
   */
  200: SeqDb
}

export type CreateSeqDbResponse = CreateSeqDbResponses[keyof CreateSeqDbResponses]

export type DeleteSeqDbData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/seq-databases/{code}'
}

export type DeleteSeqDbErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteSeqDbError = DeleteSeqDbErrors[keyof DeleteSeqDbErrors]

export type DeleteSeqDbResponses = {
  /**
   * OK
   */
  200: SeqDb
}

export type DeleteSeqDbResponse = DeleteSeqDbResponses[keyof DeleteSeqDbResponses]

export type UpdateSeqDbData = {
  body: SeqDbUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/seq-databases/{code}'
}

export type UpdateSeqDbErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateSeqDbError = UpdateSeqDbErrors[keyof UpdateSeqDbErrors]

export type UpdateSeqDbResponses = {
  /**
   * OK
   */
  200: SeqDb
}

export type UpdateSeqDbResponse = UpdateSeqDbResponses[keyof UpdateSeqDbResponses]

export type ListSequencesData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/sequences'
}

export type ListSequencesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListSequencesError = ListSequencesErrors[keyof ListSequencesErrors]

export type ListSequencesResponses = {
  /**
   * OK
   */
  200: Array<Sequence>
}

export type ListSequencesResponse = ListSequencesResponses[keyof ListSequencesResponses]

export type DeleteSequenceData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/sequences/{code}'
}

export type DeleteSequenceErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteSequenceError = DeleteSequenceErrors[keyof DeleteSequenceErrors]

export type DeleteSequenceResponses = {
  /**
   * OK
   */
  200: Sequence
}

export type DeleteSequenceResponse = DeleteSequenceResponses[keyof DeleteSequenceResponses]

export type GetSequenceData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/sequences/{code}'
}

export type GetSequenceErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type GetSequenceError = GetSequenceErrors[keyof GetSequenceErrors]

export type GetSequenceResponses = {
  /**
   * OK
   */
  200: SequenceWithDetails
}

export type GetSequenceResponse = GetSequenceResponses[keyof GetSequenceResponses]

export type EmailSettingsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/settings/emailing'
}

export type EmailSettingsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type EmailSettingsError = EmailSettingsErrors[keyof EmailSettingsErrors]

export type EmailSettingsResponses = {
  /**
   * OK
   */
  200: EmailSettings
}

export type EmailSettingsResponse = EmailSettingsResponses[keyof EmailSettingsResponses]

export type UpdateEmailSettingsData = {
  body: EmailSettingsInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/settings/emailing'
}

export type UpdateEmailSettingsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateEmailSettingsError = UpdateEmailSettingsErrors[keyof UpdateEmailSettingsErrors]

export type UpdateEmailSettingsResponses = {
  /**
   * OK
   */
  200: EmailSettings
}

export type UpdateEmailSettingsResponse =
  UpdateEmailSettingsResponses[keyof UpdateEmailSettingsResponses]

export type TestSmtpData = {
  body: EmailSettingsInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/settings/emailing/test-dial'
}

export type TestSmtpErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type TestSmtpError = TestSmtpErrors[keyof TestSmtpErrors]

export type TestSmtpResponses = {
  /**
   * OK
   */
  200: boolean
}

export type TestSmtpResponse = TestSmtpResponses[keyof TestSmtpResponses]

export type SetAppIconData = {
  body?: {
    icon: Blob | File
  }
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/settings/icon'
}

export type SetAppIconErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type SetAppIconError = SetAppIconErrors[keyof SetAppIconErrors]

export type SetAppIconResponses = {
  /**
   * No Content
   */
  204: void
}

export type SetAppIconResponse = SetAppIconResponses[keyof SetAppIconResponses]

export type InstanceSettingsData = {
  body?: never
  path?: never
  query?: never
  url: '/settings/instance'
}

export type InstanceSettingsErrors = {
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type InstanceSettingsError = InstanceSettingsErrors[keyof InstanceSettingsErrors]

export type InstanceSettingsResponses = {
  /**
   * OK
   */
  200: InstanceSettings
}

export type InstanceSettingsResponse = InstanceSettingsResponses[keyof InstanceSettingsResponses]

export type UpdateInstanceSettingsData = {
  body: InstanceSettingsInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/settings/instance'
}

export type UpdateInstanceSettingsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateInstanceSettingsError =
  UpdateInstanceSettingsErrors[keyof UpdateInstanceSettingsErrors]

export type UpdateInstanceSettingsResponses = {
  /**
   * OK
   */
  200: InstanceSettings
}

export type UpdateInstanceSettingsResponse =
  UpdateInstanceSettingsResponses[keyof UpdateInstanceSettingsResponses]

export type SecuritySettingsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/settings/security'
}

export type SecuritySettingsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type SecuritySettingsError = SecuritySettingsErrors[keyof SecuritySettingsErrors]

export type SecuritySettingsResponses = {
  /**
   * OK
   */
  200: SecuritySettings
}

export type SecuritySettingsResponse = SecuritySettingsResponses[keyof SecuritySettingsResponses]

export type UpdateSecuritySettingsData = {
  body: SecuritySettingsInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/settings/security'
}

export type UpdateSecuritySettingsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateSecuritySettingsError =
  UpdateSecuritySettingsErrors[keyof UpdateSecuritySettingsErrors]

export type UpdateSecuritySettingsResponses = {
  /**
   * OK
   */
  200: SecuritySettings
}

export type UpdateSecuritySettingsResponse =
  UpdateSecuritySettingsResponses[keyof UpdateSecuritySettingsResponses]

export type ServiceSettingsData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/settings/services'
}

export type ServiceSettingsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ServiceSettingsError = ServiceSettingsErrors[keyof ServiceSettingsErrors]

export type ServiceSettingsResponses = {
  /**
   * OK
   */
  200: ServiceSettings
}

export type ServiceSettingsResponse = ServiceSettingsResponses[keyof ServiceSettingsResponses]

export type UpdateServiceSettingsData = {
  body: ServiceSettingsUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/settings/services'
}

export type UpdateServiceSettingsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateServiceSettingsError =
  UpdateServiceSettingsErrors[keyof UpdateServiceSettingsErrors]

export type UpdateServiceSettingsResponses = {
  /**
   * OK
   */
  200: ServiceSettings
}

export type UpdateServiceSettingsResponse =
  UpdateServiceSettingsResponses[keyof UpdateServiceSettingsResponses]

export type ListSitesData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/sites'
}

export type ListSitesErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListSitesError = ListSitesErrors[keyof ListSitesErrors]

export type ListSitesResponses = {
  /**
   * OK
   */
  200: Array<Site>
}

export type ListSitesResponse = ListSitesResponses[keyof ListSitesResponses]

export type CreateSiteData = {
  body: SiteInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/sites'
}

export type CreateSiteErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateSiteError = CreateSiteErrors[keyof CreateSiteErrors]

export type CreateSiteResponses = {
  /**
   * OK
   */
  200: Site
}

export type CreateSiteResponse = CreateSiteResponses[keyof CreateSiteResponses]

export type GetSiteData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/sites/{code}'
}

export type GetSiteErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type GetSiteError = GetSiteErrors[keyof GetSiteErrors]

export type GetSiteResponses = {
  /**
   * OK
   */
  200: Site
}

export type GetSiteResponse = GetSiteResponses[keyof GetSiteResponses]

export type UpdateSiteData = {
  body: SiteUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/sites/{code}'
}

export type UpdateSiteErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateSiteError = UpdateSiteErrors[keyof UpdateSiteErrors]

export type UpdateSiteResponses = {
  /**
   * OK
   */
  200: Site
}

export type UpdateSiteResponse = UpdateSiteResponses[keyof UpdateSiteResponses]

export type CreateEventData = {
  body: EventInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/sites/{code}/events'
}

export type CreateEventErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateEventError = CreateEventErrors[keyof CreateEventErrors]

export type CreateEventResponses = {
  /**
   * OK
   */
  200: Event
}

export type CreateEventResponse = CreateEventResponses[keyof CreateEventResponses]

export type GetTaxonomyData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: {
    /**
     * Taxon code or UUID
     */
    identifier?: string
    'max-depth'?: TaxonRank
  }
  url: '/taxonomy'
}

export type GetTaxonomyErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type GetTaxonomyError = GetTaxonomyErrors[keyof GetTaxonomyErrors]

export type GetTaxonomyResponses = {
  /**
   * OK
   */
  200: Taxonomy
}

export type GetTaxonomyResponse = GetTaxonomyResponses[keyof GetTaxonomyResponses]

export type ListTaxaData = {
  body?: never
  path?: never
  query?: {
    pattern?: string
    ranks?: Array<TaxonRank>
    status?: TaxonStatus
    anchor?: boolean
    parent?: string
    limit?: number
  }
  url: '/taxonomy/taxa'
}

export type ListTaxaErrors = {
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type ListTaxaError = ListTaxaErrors[keyof ListTaxaErrors]

export type ListTaxaResponses = {
  /**
   * OK
   */
  200: Array<TaxonWithParentRef>
}

export type ListTaxaResponse = ListTaxaResponses[keyof ListTaxaResponses]

export type CreateTaxonData = {
  body: TaxonInput
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/taxonomy/taxa'
}

export type CreateTaxonErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type CreateTaxonError = CreateTaxonErrors[keyof CreateTaxonErrors]

export type CreateTaxonResponses = {
  /**
   * OK
   */
  200: TaxonWithRelatives
}

export type CreateTaxonResponse = CreateTaxonResponses[keyof CreateTaxonResponses]

export type DeleteTaxonData = {
  body?: never
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/taxonomy/taxa/{code}'
}

export type DeleteTaxonErrors = {
  /**
   * Unauthorized
   */
  401: ErrorModel
  /**
   * Not Found
   */
  404: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type DeleteTaxonError = DeleteTaxonErrors[keyof DeleteTaxonErrors]

export type DeleteTaxonResponses = {
  /**
   * OK
   */
  200: TaxonWithRelatives
}

export type DeleteTaxonResponse = DeleteTaxonResponses[keyof DeleteTaxonResponses]

export type GetTaxonData = {
  body?: never
  path: {
    code: string
  }
  query?: never
  url: '/taxonomy/taxa/{code}'
}

export type GetTaxonErrors = {
  /**
   * Not Found
   */
  404: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type GetTaxonError = GetTaxonErrors[keyof GetTaxonErrors]

export type GetTaxonResponses = {
  /**
   * OK
   */
  200: TaxonWithLineage
}

export type GetTaxonResponse = GetTaxonResponses[keyof GetTaxonResponses]

export type UpdateTaxonData = {
  body: TaxonUpdate
  headers?: {
    /**
     * Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
     */
    Authorization?: string
  }
  path: {
    code: string
  }
  query?: never
  url: '/taxonomy/taxa/{code}'
}

export type UpdateTaxonErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Unauthorized
   */
  401: ErrorModel
  /**
   * Not Found
   */
  404: ErrorModel
  /**
   * Unprocessable Entity
   */
  422: ErrorModel
  /**
   * Internal Server Error
   */
  500: ErrorModel
}

export type UpdateTaxonError = UpdateTaxonErrors[keyof UpdateTaxonErrors]

export type UpdateTaxonResponses = {
  /**
   * OK
   */
  200: Taxon
}

export type UpdateTaxonResponse = UpdateTaxonResponses[keyof UpdateTaxonResponses]
