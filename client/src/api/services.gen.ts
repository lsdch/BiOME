// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise'
import { OpenAPI } from './core/OpenAPI'
import { request as __request } from './core/request'
import type { $OpenApiTs } from './types.gen'

export class AccountService {
  /**
   * Current user
   * Get infos of currently authenticated user account
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns CurrentUserResponse The currently authenticated user
   * @returns void No active user session
   * @throws ApiError
   */
  public static currentUser(
    data: $OpenApiTs['/account']['get']['req'] = {}
  ): CancelablePromise<
    $OpenApiTs['/account']['get']['res'][200] | $OpenApiTs['/account']['get']['res'][204]
  > {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/account',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Confirm e-mail
   * Confirms the validity of an e-mail address associated to an account, using a token issued at the end of user registration.
   * @param data The data for the request.
   * @param data.token
   * @returns AuthenticationResponse OK
   * @throws ApiError
   */
  public static confirmEmail(
    data: $OpenApiTs['/account/email-confirmation']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/account/email-confirmation']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/account/email-confirmation',
      query: {
        token: data.token
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Resend e-mail verification link
   * Sends again a verification link for the provided e-mail address, if it matches a currently not verified user account.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void No Content
   * @throws ApiError
   */
  public static resendEmailConfirmation(
    data: $OpenApiTs['/account/email-confirmation/resend']['post']['req']
  ): CancelablePromise<$OpenApiTs['/account/email-confirmation/resend']['post']['res'][204]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/account/email-confirmation/resend',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Request password reset
   * Requests sending a link containing a password reset token to your account email address. The link target can be provided by the client in the request body, or defaults to the API endpoint: `/api/v1/account/password-reset/{token}`. In this case, setting the new password is expected to be done programatically, e.g. through a curl request.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void No Content
   * @throws ApiError
   */
  public static requestPasswordReset(
    data: $OpenApiTs['/account/forgotten-password']['post']['req']
  ): CancelablePromise<$OpenApiTs['/account/forgotten-password']['post']['res'][204]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/account/forgotten-password',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Login
   * Authenticate using user credentials
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthenticationResponse OK
   * @throws ApiError
   */
  public static login(
    data: $OpenApiTs['/account/login']['post']['req']
  ): CancelablePromise<$OpenApiTs['/account/login']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/account/login',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Logout
   * Logout from current user session by revoking session cookies
   * @returns string No Content
   * @throws ApiError
   */
  public static logout(): CancelablePromise<$OpenApiTs['/account/logout']['post']['res'][204]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/account/logout',
      responseHeader: 'Domain',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Update password
   * Updates password of currently authenticated user
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns void No Content
   * @throws ApiError
   */
  public static updatePassword(
    data: $OpenApiTs['/account/password']['post']['req']
  ): CancelablePromise<$OpenApiTs['/account/password']['post']['res'][204]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/account/password',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Unauthorized',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Validate password token
   * Verifies that the password token is valid and can be used to reset a password
   * @param data The data for the request.
   * @param data.token
   * @returns void No Content
   * @throws ApiError
   */
  public static validatePasswordToken(
    data: $OpenApiTs['/account/password-reset/{token}']['get']['req']
  ): CancelablePromise<$OpenApiTs['/account/password-reset/{token}']['get']['res'][204]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/account/password-reset/{token}',
      path: {
        token: data.token
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Reset password
   * Set a new password using a previously issued reset token
   * @param data The data for the request.
   * @param data.token
   * @param data.requestBody
   * @returns void No Content
   * @throws ApiError
   */
  public static resetPassword(
    data: $OpenApiTs['/account/password-reset/{token}']['post']['req']
  ): CancelablePromise<$OpenApiTs['/account/password-reset/{token}']['post']['res'][204]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/account/password-reset/{token}',
      path: {
        token: data.token
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Register new account
   * Register a new account that is initially pending, and needs to be activated by an administrator. An email is sent to the registered e-mail address with a verification link. The target URL can be set by the client, otherwise it defaults to the API endpoint: `/api/v1/account/email-confirmation`
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Created
   * @throws ApiError
   */
  public static register(
    data: $OpenApiTs['/account/register']['post']['req']
  ): CancelablePromise<$OpenApiTs['/account/register']['post']['res'][201]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/account/register',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Claim invitation
   * Register an account with pre-assigned role and identity, using an invitation token
   * @param data The data for the request.
   * @param data.token
   * @param data.requestBody
   * @returns AuthenticationResponse OK
   * @throws ApiError
   */
  public static claimInvitation(
    data: $OpenApiTs['/account/register/{token}']['post']['req']
  ): CancelablePromise<$OpenApiTs['/account/register/{token}']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/account/register/{token}',
      path: {
        token: data.token
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }
}

export class TaxonomyGbifService {
  /**
   * List GBIF anchor clades
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Taxon OK
   * @throws ApiError
   */
  public static listAnchors(
    data: $OpenApiTs['/anchors/']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/anchors/']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/anchors/',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Import GBIF clade
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns ErrorModel Error
   * @returns void No Content
   * @throws ApiError
   */
  public static importGbif(
    data: $OpenApiTs['/import/taxonomy']['put']['req']
  ): CancelablePromise<
    | $OpenApiTs['/import/taxonomy']['put']['res'][200]
    | $OpenApiTs['/import/taxonomy']['put']['res'][204]
  > {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/import/taxonomy',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json'
    })
  }

  /**
   * Monitor GBIF taxonomy imports
   * @returns unknown OK
   * @returns ErrorModel Error
   * @throws ApiError
   */
  public static monitorGbif(): CancelablePromise<
    | $OpenApiTs['/import/taxonomy/monitor']['get']['res'][200]
    | $OpenApiTs['/import/taxonomy/monitor']['get']['res'][200]
  > {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/import/taxonomy/monitor'
    })
  }
}

export class LocationService {
  /**
   * List countries
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Country OK
   * @throws ApiError
   */
  public static listCountries(
    data: $OpenApiTs['/countries']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/countries']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/countries',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }
}

export class CountriesService {
  /**
   * List countries
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Country OK
   * @throws ApiError
   */
  public static listCountries(
    data: $OpenApiTs['/countries']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/countries']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/countries',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }
}

export class PeopleService {
  /**
   * List institutions
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Institution OK
   * @throws ApiError
   */
  public static listInstitutions(
    data: $OpenApiTs['/institutions']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/institutions']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/institutions',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Create institution
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Institution OK
   * @throws ApiError
   */
  public static createInstitution(
    data: $OpenApiTs['/institutions']['post']['req']
  ): CancelablePromise<$OpenApiTs['/institutions']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/institutions',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Delete institution
   * @param data The data for the request.
   * @param data.code
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Institution OK
   * @throws ApiError
   */
  public static deleteInstitution(
    data: $OpenApiTs['/institutions/{code}']['delete']['req']
  ): CancelablePromise<$OpenApiTs['/institutions/{code}']['delete']['res'][200]> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/institutions/{code}',
      path: {
        code: data.code
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Update institution
   * @param data The data for the request.
   * @param data.code
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Institution OK
   * @throws ApiError
   */
  public static updateInstitution(
    data: $OpenApiTs['/institutions/{code}']['patch']['req']
  ): CancelablePromise<$OpenApiTs['/institutions/{code}']['patch']['res'][200]> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/institutions/{code}',
      path: {
        code: data.code
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * List persons
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Person OK
   * @throws ApiError
   */
  public static listPersons(
    data: $OpenApiTs['/persons']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/persons']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/persons',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Create person
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Person OK
   * @throws ApiError
   */
  public static createPerson(
    data: $OpenApiTs['/persons']['post']['req']
  ): CancelablePromise<$OpenApiTs['/persons']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/persons',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Delete person
   * @param data The data for the request.
   * @param data.id
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Person OK
   * @throws ApiError
   */
  public static deletePerson(
    data: $OpenApiTs['/persons/{id}']['delete']['req']
  ): CancelablePromise<$OpenApiTs['/persons/{id}']['delete']['res'][200]> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/persons/{id}',
      path: {
        id: data.id
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Update person
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Person OK
   * @throws ApiError
   */
  public static updatePerson(
    data: $OpenApiTs['/persons/{id}']['patch']['req']
  ): CancelablePromise<$OpenApiTs['/persons/{id}']['patch']['res'][200]> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/persons/{id}',
      path: {
        id: data.id
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Invite person
   * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns InvitationLink OK
   * @throws ApiError
   */
  public static invitePerson(
    data: $OpenApiTs['/persons/{id}/invite']['post']['req']
  ): CancelablePromise<$OpenApiTs['/persons/{id}/invite']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/persons/{id}/invite',
      path: {
        id: data.id
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }
}

export class InstitutionService {
  /**
   * List institutions
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Institution OK
   * @throws ApiError
   */
  public static listInstitutions(
    data: $OpenApiTs['/institutions']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/institutions']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/institutions',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Create institution
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Institution OK
   * @throws ApiError
   */
  public static createInstitution(
    data: $OpenApiTs['/institutions']['post']['req']
  ): CancelablePromise<$OpenApiTs['/institutions']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/institutions',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Delete institution
   * @param data The data for the request.
   * @param data.code
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Institution OK
   * @throws ApiError
   */
  public static deleteInstitution(
    data: $OpenApiTs['/institutions/{code}']['delete']['req']
  ): CancelablePromise<$OpenApiTs['/institutions/{code}']['delete']['res'][200]> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/institutions/{code}',
      path: {
        code: data.code
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Update institution
   * @param data The data for the request.
   * @param data.code
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Institution OK
   * @throws ApiError
   */
  public static updateInstitution(
    data: $OpenApiTs['/institutions/{code}']['patch']['req']
  ): CancelablePromise<$OpenApiTs['/institutions/{code}']['patch']['res'][200]> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/institutions/{code}',
      path: {
        code: data.code
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }
}

export class PersonService {
  /**
   * List persons
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Person OK
   * @throws ApiError
   */
  public static listPersons(
    data: $OpenApiTs['/persons']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/persons']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/persons',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Create person
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Person OK
   * @throws ApiError
   */
  public static createPerson(
    data: $OpenApiTs['/persons']['post']['req']
  ): CancelablePromise<$OpenApiTs['/persons']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/persons',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Delete person
   * @param data The data for the request.
   * @param data.id
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Person OK
   * @throws ApiError
   */
  public static deletePerson(
    data: $OpenApiTs['/persons/{id}']['delete']['req']
  ): CancelablePromise<$OpenApiTs['/persons/{id}']['delete']['res'][200]> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/persons/{id}',
      path: {
        id: data.id
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Update person
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Person OK
   * @throws ApiError
   */
  public static updatePerson(
    data: $OpenApiTs['/persons/{id}']['patch']['req']
  ): CancelablePromise<$OpenApiTs['/persons/{id}']['patch']['res'][200]> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/persons/{id}',
      path: {
        id: data.id
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Invite person
   * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns InvitationLink OK
   * @throws ApiError
   */
  public static invitePerson(
    data: $OpenApiTs['/persons/{id}/invite']['post']['req']
  ): CancelablePromise<$OpenApiTs['/persons/{id}/invite']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/persons/{id}/invite',
      path: {
        id: data.id
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }
}

export class SettingsService {
  /**
   * Email settings
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns EmailSettings OK
   * @throws ApiError
   */
  public static emailSettings(
    data: $OpenApiTs['/settings/emailing']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/settings/emailing']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/settings/emailing',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Update email settings
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns EmailSettings OK
   * @throws ApiError
   */
  public static updateEmailSettings(
    data: $OpenApiTs['/settings/emailing']['post']['req']
  ): CancelablePromise<$OpenApiTs['/settings/emailing']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/settings/emailing',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Set app icon
   * @param data The data for the request.
   * @param data.formData
   * @returns string No Content
   * @throws ApiError
   */
  public static setAppIcon(
    data: $OpenApiTs['/settings/icon']['post']['req']
  ): CancelablePromise<$OpenApiTs['/settings/icon']['post']['res'][204]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/settings/icon',
      formData: data.formData,
      mediaType: 'multipart/form-data',
      responseHeader: 'Location',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Instance settings
   * @returns InstanceSettings OK
   * @throws ApiError
   */
  public static instanceSettings(): CancelablePromise<
    $OpenApiTs['/settings/instance']['get']['res'][200]
  > {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/settings/instance',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Update instance settings
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns InstanceSettings OK
   * @throws ApiError
   */
  public static updateInstanceSettings(
    data: $OpenApiTs['/settings/instance']['post']['req']
  ): CancelablePromise<$OpenApiTs['/settings/instance']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/settings/instance',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Security settings
   * @param data The data for the request.
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns SecuritySettings OK
   * @throws ApiError
   */
  public static securitySettings(
    data: $OpenApiTs['/settings/security']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/settings/security']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/settings/security',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Update security settings
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns SecuritySettings OK
   * @throws ApiError
   */
  public static updateSecuritySettings(
    data: $OpenApiTs['/settings/security']['post']['req']
  ): CancelablePromise<$OpenApiTs['/settings/security']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/settings/security',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }
}

export class TaxonomyService {
  /**
   * List taxa
   * @param data The data for the request.
   * @param data.pattern
   * @param data.rank
   * @param data.status
   * @param data.anchor
   * @returns Taxon OK
   * @throws ApiError
   */
  public static listTaxa(
    data: $OpenApiTs['/taxonomy']['get']['req'] = {}
  ): CancelablePromise<$OpenApiTs['/taxonomy']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/taxonomy',
      query: {
        pattern: data.pattern,
        rank: data.rank,
        status: data.status,
        anchor: data.anchor
      },
      errors: {
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Create taxon
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns TaxonWithRelatives OK
   * @throws ApiError
   */
  public static createTaxon(
    data: $OpenApiTs['/taxonomy']['post']['req']
  ): CancelablePromise<$OpenApiTs['/taxonomy']['post']['res'][200]> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/taxonomy',
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Delete taxon
   * @param data The data for the request.
   * @param data.code
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns Taxon OK
   * @throws ApiError
   */
  public static deleteTaxon(
    data: $OpenApiTs['/taxonomy/{code}']['delete']['req']
  ): CancelablePromise<$OpenApiTs['/taxonomy/{code}']['delete']['res'][200]> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/taxonomy/{code}',
      path: {
        code: data.code
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Get taxon
   * @param data The data for the request.
   * @param data.code
   * @returns TaxonWithRelatives OK
   * @throws ApiError
   */
  public static getTaxon(
    data: $OpenApiTs['/taxonomy/{code}']['get']['req']
  ): CancelablePromise<$OpenApiTs['/taxonomy/{code}']['get']['res'][200]> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/taxonomy/{code}',
      path: {
        code: data.code
      },
      errors: {
        404: 'Not Found',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }

  /**
   * Update taxon
   * @param data The data for the request.
   * @param data.code
   * @param data.requestBody
   * @param data.authorization Authorization header formatted as "Bearer auth_token". Takes precedence over session cookie if set.
   * @param data.authToken Session cookie containing JWT
   * @returns TaxonWithRelatives OK
   * @throws ApiError
   */
  public static updateTaxon(
    data: $OpenApiTs['/taxonomy/{code}']['patch']['req']
  ): CancelablePromise<$OpenApiTs['/taxonomy/{code}']['patch']['res'][200]> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/taxonomy/{code}',
      path: {
        code: data.code
      },
      cookies: {
        auth_token: data.authToken
      },
      headers: {
        Authorization: data.authorization
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad Request',
        401: 'Unauthorized',
        404: 'Not Found',
        422: 'Unprocessable Entity',
        500: 'Internal Server Error'
      }
    })
  }
}
