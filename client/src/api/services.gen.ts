// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetAccessPointsData, GetAccessPointsError, GetAccessPointsResponse, ListSiteDatasetsData, ListSiteDatasetsError, ListSiteDatasetsResponse, CreateSiteDatasetData, CreateSiteDatasetError, CreateSiteDatasetResponse, ListHabitatGroupsData, ListHabitatGroupsError, ListHabitatGroupsResponse, CreateHabitatGroupData, CreateHabitatGroupError, CreateHabitatGroupResponse, DeleteHabitatGroupData, DeleteHabitatGroupError, DeleteHabitatGroupResponse, UpdateHabitatGroupData, UpdateHabitatGroupError, UpdateHabitatGroupResponse, ListCountriesData, ListCountriesError, ListCountriesResponse, ListSitesData, ListSitesError, ListSitesResponse, GetSiteData, GetSiteError, GetSiteResponse, CurrentUserData, CurrentUserError, CurrentUserResponse2, ConfirmEmailData, ConfirmEmailError, ConfirmEmailResponse, ResendEmailConfirmationData, ResendEmailConfirmationError, ResendEmailConfirmationResponse, RequestPasswordResetData, RequestPasswordResetError, RequestPasswordResetResponse, LoginData, LoginError, LoginResponse, LogoutError, LogoutResponse, UpdatePasswordData, UpdatePasswordError, UpdatePasswordResponse, ValidatePasswordTokenData, ValidatePasswordTokenError, ValidatePasswordTokenResponse, ResetPasswordData, ResetPasswordError, ResetPasswordResponse, RegisterData, RegisterError, RegisterResponse, ClaimInvitationData, ClaimInvitationError, ClaimInvitationResponse, ListAnchorsData, ListAnchorsError, ListAnchorsResponse, ImportGbifData, ImportGbifError, ImportGbifResponse, MonitorGbifError, MonitorGbifResponse, ListInstitutionsData, ListInstitutionsError, ListInstitutionsResponse, CreateInstitutionData, CreateInstitutionError, CreateInstitutionResponse, DeleteInstitutionData, DeleteInstitutionError, DeleteInstitutionResponse, UpdateInstitutionData, UpdateInstitutionError, UpdateInstitutionResponse, ListPersonsData, ListPersonsError, ListPersonsResponse, CreatePersonData, CreatePersonError, CreatePersonResponse, DeletePersonData, DeletePersonError, DeletePersonResponse, UpdatePersonData, UpdatePersonError, UpdatePersonResponse, InvitePersonData, InvitePersonError, InvitePersonResponse, EmailSettingsData, EmailSettingsError, EmailSettingsResponse, UpdateEmailSettingsData, UpdateEmailSettingsError, UpdateEmailSettingsResponse, TestSmtpData, TestSmtpError, TestSmtpResponse, SetAppIconData, SetAppIconError, SetAppIconResponse, InstanceSettingsError, InstanceSettingsResponse, UpdateInstanceSettingsData, UpdateInstanceSettingsError, UpdateInstanceSettingsResponse, SecuritySettingsData, SecuritySettingsError, SecuritySettingsResponse, UpdateSecuritySettingsData, UpdateSecuritySettingsError, UpdateSecuritySettingsResponse, GetTaxonomyData, GetTaxonomyError, GetTaxonomyResponse, ListTaxaData, ListTaxaError, ListTaxaResponse, CreateTaxonData, CreateTaxonError, CreateTaxonResponse, DeleteTaxonData, DeleteTaxonError, DeleteTaxonResponse, GetTaxonData, GetTaxonError, GetTaxonResponse, UpdateTaxonData, UpdateTaxonError, UpdateTaxonResponse } from './types.gen';

export class LocationService {
    /**
     * List access points
     */
    public static getAccessPoints(options?: Options<GetAccessPointsData>) {
        return (options?.client ?? client).get<GetAccessPointsResponse, GetAccessPointsError>({
            ...options,
            url: '/access-points'
        });
    }
    
    /**
     * List site datasets
     * List all site datasets
     */
    public static listSiteDatasets(options?: Options<ListSiteDatasetsData>) {
        return (options?.client ?? client).get<ListSiteDatasetsResponse, ListSiteDatasetsError>({
            ...options,
            url: '/datasets'
        });
    }
    
    /**
     * Create site dataset
     * Create a new site dataset with new or existing sites
     */
    public static createSiteDataset(options: Options<CreateSiteDatasetData>) {
        return (options?.client ?? client).post<CreateSiteDatasetResponse, CreateSiteDatasetError>({
            ...options,
            url: '/datasets'
        });
    }
    
    /**
     * List habitats
     */
    public static listHabitatGroups(options?: Options<ListHabitatGroupsData>) {
        return (options?.client ?? client).get<ListHabitatGroupsResponse, ListHabitatGroupsError>({
            ...options,
            url: '/habitats'
        });
    }
    
    /**
     * Create habitat group
     */
    public static createHabitatGroup(options: Options<CreateHabitatGroupData>) {
        return (options?.client ?? client).post<CreateHabitatGroupResponse, CreateHabitatGroupError>({
            ...options,
            url: '/habitats'
        });
    }
    
    /**
     * Delete habitat group
     */
    public static deleteHabitatGroup(options: Options<DeleteHabitatGroupData>) {
        return (options?.client ?? client).delete<DeleteHabitatGroupResponse, DeleteHabitatGroupError>({
            ...options,
            url: '/habitats/{code}'
        });
    }
    
    /**
     * Update habitat group
     */
    public static updateHabitatGroup(options: Options<UpdateHabitatGroupData>) {
        return (options?.client ?? client).patch<UpdateHabitatGroupResponse, UpdateHabitatGroupError>({
            ...options,
            url: '/habitats/{code}'
        });
    }
    
    /**
     * List countries
     */
    public static listCountries(options?: Options<ListCountriesData>) {
        return (options?.client ?? client).get<ListCountriesResponse, ListCountriesError>({
            ...options,
            url: '/locations/countries'
        });
    }
    
    /**
     * List sites
     * List all registered sites
     */
    public static listSites(options?: Options<ListSitesData>) {
        return (options?.client ?? client).get<ListSitesResponse, ListSitesError>({
            ...options,
            url: '/sites'
        });
    }
    
    /**
     * Get site
     * Get site infos using its code
     */
    public static getSite(options: Options<GetSiteData>) {
        return (options?.client ?? client).get<GetSiteResponse, GetSiteError>({
            ...options,
            url: '/sites/{code}'
        });
    }
    
}

export class AccountService {
    /**
     * Current user
     * Get infos of currently authenticated user account
     */
    public static currentUser(options?: Options<CurrentUserData>) {
        return (options?.client ?? client).get<CurrentUserResponse2, CurrentUserError>({
            ...options,
            url: '/account'
        });
    }
    
    /**
     * Confirm e-mail
     * Confirms the validity of an e-mail address associated to an account, using a token issued at the end of user registration.
     */
    public static confirmEmail(options?: Options<ConfirmEmailData>) {
        return (options?.client ?? client).get<ConfirmEmailResponse, ConfirmEmailError>({
            ...options,
            url: '/account/email-confirmation'
        });
    }
    
    /**
     * Resend e-mail verification link
     * Sends again a verification link for the provided e-mail address, if it matches a currently not verified user account.
     */
    public static resendEmailConfirmation(options: Options<ResendEmailConfirmationData>) {
        return (options?.client ?? client).post<ResendEmailConfirmationResponse, ResendEmailConfirmationError>({
            ...options,
            url: '/account/email-confirmation/resend'
        });
    }
    
    /**
     * Request password reset
     * Requests sending a link containing a password reset token to your account email address. The link target can be provided by the client in the request body, or defaults to the API endpoint: `/api/v1/account/password-reset/{token}`. In this case, setting the new password is expected to be done programatically, e.g. through a curl request.
     */
    public static requestPasswordReset(options: Options<RequestPasswordResetData>) {
        return (options?.client ?? client).post<RequestPasswordResetResponse, RequestPasswordResetError>({
            ...options,
            url: '/account/forgotten-password'
        });
    }
    
    /**
     * Login
     * Authenticate using user credentials
     */
    public static login(options: Options<LoginData>) {
        return (options?.client ?? client).post<LoginResponse, LoginError>({
            ...options,
            url: '/account/login'
        });
    }
    
    /**
     * Logout
     * Logout from current user session by revoking session cookies
     */
    public static logout(options?: Options) {
        return (options?.client ?? client).post<LogoutResponse, LogoutError>({
            ...options,
            url: '/account/logout'
        });
    }
    
    /**
     * Update password
     * Updates password of currently authenticated user
     */
    public static updatePassword(options: Options<UpdatePasswordData>) {
        return (options?.client ?? client).post<UpdatePasswordResponse, UpdatePasswordError>({
            ...options,
            url: '/account/password'
        });
    }
    
    /**
     * Validate password token
     * Verifies that the password token is valid and can be used to reset a password
     */
    public static validatePasswordToken(options: Options<ValidatePasswordTokenData>) {
        return (options?.client ?? client).get<ValidatePasswordTokenResponse, ValidatePasswordTokenError>({
            ...options,
            url: '/account/password-reset/{token}'
        });
    }
    
    /**
     * Reset password
     * Set a new password using a previously issued reset token
     */
    public static resetPassword(options: Options<ResetPasswordData>) {
        return (options?.client ?? client).post<ResetPasswordResponse, ResetPasswordError>({
            ...options,
            url: '/account/password-reset/{token}'
        });
    }
    
    /**
     * Register new account
     * Register a new account that is initially pending, and needs to be activated by an administrator. An email is sent to the registered e-mail address with a verification link. The target URL can be set by the client, otherwise it defaults to the API endpoint: `/api/v1/account/email-confirmation`
     */
    public static register(options: Options<RegisterData>) {
        return (options?.client ?? client).post<RegisterResponse, RegisterError>({
            ...options,
            url: '/account/register'
        });
    }
    
    /**
     * Claim invitation
     * Register an account with pre-assigned role and identity, using an invitation token
     */
    public static claimInvitation(options: Options<ClaimInvitationData>) {
        return (options?.client ?? client).post<ClaimInvitationResponse, ClaimInvitationError>({
            ...options,
            url: '/account/register/{token}'
        });
    }
    
}

export class TaxonomyGbifService {
    /**
     * List GBIF anchor clades
     */
    public static listAnchors(options?: Options<ListAnchorsData>) {
        return (options?.client ?? client).get<ListAnchorsResponse, ListAnchorsError>({
            ...options,
            url: '/anchors/'
        });
    }
    
    /**
     * Import GBIF clade
     */
    public static importGbif(options: Options<ImportGbifData>) {
        return (options?.client ?? client).put<ImportGbifResponse, ImportGbifError>({
            ...options,
            url: '/import/taxonomy'
        });
    }
    
    /**
     * Monitor GBIF taxonomy imports
     */
    public static monitorGbif(options?: Options) {
        return (options?.client ?? client).get<MonitorGbifResponse, MonitorGbifError>({
            ...options,
            url: '/import/taxonomy/monitor'
        });
    }
    
}

export class HabitatsService {
    /**
     * List habitats
     */
    public static listHabitatGroups(options?: Options<ListHabitatGroupsData>) {
        return (options?.client ?? client).get<ListHabitatGroupsResponse, ListHabitatGroupsError>({
            ...options,
            url: '/habitats'
        });
    }
    
    /**
     * Create habitat group
     */
    public static createHabitatGroup(options: Options<CreateHabitatGroupData>) {
        return (options?.client ?? client).post<CreateHabitatGroupResponse, CreateHabitatGroupError>({
            ...options,
            url: '/habitats'
        });
    }
    
    /**
     * Delete habitat group
     */
    public static deleteHabitatGroup(options: Options<DeleteHabitatGroupData>) {
        return (options?.client ?? client).delete<DeleteHabitatGroupResponse, DeleteHabitatGroupError>({
            ...options,
            url: '/habitats/{code}'
        });
    }
    
    /**
     * Update habitat group
     */
    public static updateHabitatGroup(options: Options<UpdateHabitatGroupData>) {
        return (options?.client ?? client).patch<UpdateHabitatGroupResponse, UpdateHabitatGroupError>({
            ...options,
            url: '/habitats/{code}'
        });
    }
    
}

export class PeopleService {
    /**
     * List institutions
     */
    public static listInstitutions(options?: Options<ListInstitutionsData>) {
        return (options?.client ?? client).get<ListInstitutionsResponse, ListInstitutionsError>({
            ...options,
            url: '/institutions'
        });
    }
    
    /**
     * Create institution
     */
    public static createInstitution(options: Options<CreateInstitutionData>) {
        return (options?.client ?? client).post<CreateInstitutionResponse, CreateInstitutionError>({
            ...options,
            url: '/institutions'
        });
    }
    
    /**
     * Delete institution
     */
    public static deleteInstitution(options: Options<DeleteInstitutionData>) {
        return (options?.client ?? client).delete<DeleteInstitutionResponse, DeleteInstitutionError>({
            ...options,
            url: '/institutions/{code}'
        });
    }
    
    /**
     * Update institution
     */
    public static updateInstitution(options: Options<UpdateInstitutionData>) {
        return (options?.client ?? client).patch<UpdateInstitutionResponse, UpdateInstitutionError>({
            ...options,
            url: '/institutions/{code}'
        });
    }
    
    /**
     * List persons
     */
    public static listPersons(options?: Options<ListPersonsData>) {
        return (options?.client ?? client).get<ListPersonsResponse, ListPersonsError>({
            ...options,
            url: '/persons'
        });
    }
    
    /**
     * Create person
     */
    public static createPerson(options: Options<CreatePersonData>) {
        return (options?.client ?? client).post<CreatePersonResponse, CreatePersonError>({
            ...options,
            url: '/persons'
        });
    }
    
    /**
     * Delete person
     */
    public static deletePerson(options: Options<DeletePersonData>) {
        return (options?.client ?? client).delete<DeletePersonResponse, DeletePersonError>({
            ...options,
            url: '/persons/{id}'
        });
    }
    
    /**
     * Update person
     */
    public static updatePerson(options: Options<UpdatePersonData>) {
        return (options?.client ?? client).patch<UpdatePersonResponse, UpdatePersonError>({
            ...options,
            url: '/persons/{id}'
        });
    }
    
    /**
     * Invite person
     * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
     */
    public static invitePerson(options: Options<InvitePersonData>) {
        return (options?.client ?? client).post<InvitePersonResponse, InvitePersonError>({
            ...options,
            url: '/persons/{id}/invite'
        });
    }
    
}

export class InstitutionService {
    /**
     * List institutions
     */
    public static listInstitutions(options?: Options<ListInstitutionsData>) {
        return (options?.client ?? client).get<ListInstitutionsResponse, ListInstitutionsError>({
            ...options,
            url: '/institutions'
        });
    }
    
    /**
     * Create institution
     */
    public static createInstitution(options: Options<CreateInstitutionData>) {
        return (options?.client ?? client).post<CreateInstitutionResponse, CreateInstitutionError>({
            ...options,
            url: '/institutions'
        });
    }
    
    /**
     * Delete institution
     */
    public static deleteInstitution(options: Options<DeleteInstitutionData>) {
        return (options?.client ?? client).delete<DeleteInstitutionResponse, DeleteInstitutionError>({
            ...options,
            url: '/institutions/{code}'
        });
    }
    
    /**
     * Update institution
     */
    public static updateInstitution(options: Options<UpdateInstitutionData>) {
        return (options?.client ?? client).patch<UpdateInstitutionResponse, UpdateInstitutionError>({
            ...options,
            url: '/institutions/{code}'
        });
    }
    
}

export class CountriesService {
    /**
     * List countries
     */
    public static listCountries(options?: Options<ListCountriesData>) {
        return (options?.client ?? client).get<ListCountriesResponse, ListCountriesError>({
            ...options,
            url: '/locations/countries'
        });
    }
    
}

export class PersonService {
    /**
     * List persons
     */
    public static listPersons(options?: Options<ListPersonsData>) {
        return (options?.client ?? client).get<ListPersonsResponse, ListPersonsError>({
            ...options,
            url: '/persons'
        });
    }
    
    /**
     * Create person
     */
    public static createPerson(options: Options<CreatePersonData>) {
        return (options?.client ?? client).post<CreatePersonResponse, CreatePersonError>({
            ...options,
            url: '/persons'
        });
    }
    
    /**
     * Delete person
     */
    public static deletePerson(options: Options<DeletePersonData>) {
        return (options?.client ?? client).delete<DeletePersonResponse, DeletePersonError>({
            ...options,
            url: '/persons/{id}'
        });
    }
    
    /**
     * Update person
     */
    public static updatePerson(options: Options<UpdatePersonData>) {
        return (options?.client ?? client).patch<UpdatePersonResponse, UpdatePersonError>({
            ...options,
            url: '/persons/{id}'
        });
    }
    
    /**
     * Invite person
     * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
     */
    public static invitePerson(options: Options<InvitePersonData>) {
        return (options?.client ?? client).post<InvitePersonResponse, InvitePersonError>({
            ...options,
            url: '/persons/{id}/invite'
        });
    }
    
}

export class SettingsService {
    /**
     * Email settings
     */
    public static emailSettings(options?: Options<EmailSettingsData>) {
        return (options?.client ?? client).get<EmailSettingsResponse, EmailSettingsError>({
            ...options,
            url: '/settings/emailing'
        });
    }
    
    /**
     * Update email settings
     */
    public static updateEmailSettings(options: Options<UpdateEmailSettingsData>) {
        return (options?.client ?? client).post<UpdateEmailSettingsResponse, UpdateEmailSettingsError>({
            ...options,
            url: '/settings/emailing'
        });
    }
    
    /**
     * Test SMTP connection
     */
    public static testSmtp(options: Options<TestSmtpData>) {
        return (options?.client ?? client).post<TestSmtpResponse, TestSmtpError>({
            ...options,
            url: '/settings/emailing/test-dial'
        });
    }
    
    /**
     * Set app icon
     */
    public static setAppIcon(options?: Options<SetAppIconData>) {
        return (options?.client ?? client).post<SetAppIconResponse, SetAppIconError>({
            ...options,
            ...formDataBodySerializer,
            url: '/settings/icon'
        });
    }
    
    /**
     * Instance settings
     */
    public static instanceSettings(options?: Options) {
        return (options?.client ?? client).get<InstanceSettingsResponse, InstanceSettingsError>({
            ...options,
            url: '/settings/instance'
        });
    }
    
    /**
     * Update instance settings
     */
    public static updateInstanceSettings(options: Options<UpdateInstanceSettingsData>) {
        return (options?.client ?? client).post<UpdateInstanceSettingsResponse, UpdateInstanceSettingsError>({
            ...options,
            url: '/settings/instance'
        });
    }
    
    /**
     * Security settings
     */
    public static securitySettings(options?: Options<SecuritySettingsData>) {
        return (options?.client ?? client).get<SecuritySettingsResponse, SecuritySettingsError>({
            ...options,
            url: '/settings/security'
        });
    }
    
    /**
     * Update security settings
     */
    public static updateSecuritySettings(options: Options<UpdateSecuritySettingsData>) {
        return (options?.client ?? client).post<UpdateSecuritySettingsResponse, UpdateSecuritySettingsError>({
            ...options,
            url: '/settings/security'
        });
    }
    
}

export class TaxonomyService {
    /**
     * Get taxonomy
     */
    public static getTaxonomy(options?: Options<GetTaxonomyData>) {
        return (options?.client ?? client).get<GetTaxonomyResponse, GetTaxonomyError>({
            ...options,
            url: '/taxonomy'
        });
    }
    
    /**
     * List taxa
     */
    public static listTaxa(options?: Options<ListTaxaData>) {
        return (options?.client ?? client).get<ListTaxaResponse, ListTaxaError>({
            ...options,
            url: '/taxonomy/taxa'
        });
    }
    
    /**
     * Create taxon
     */
    public static createTaxon(options: Options<CreateTaxonData>) {
        return (options?.client ?? client).post<CreateTaxonResponse, CreateTaxonError>({
            ...options,
            url: '/taxonomy/taxa'
        });
    }
    
    /**
     * Delete taxon
     */
    public static deleteTaxon(options: Options<DeleteTaxonData>) {
        return (options?.client ?? client).delete<DeleteTaxonResponse, DeleteTaxonError>({
            ...options,
            url: '/taxonomy/taxa/{code}'
        });
    }
    
    /**
     * Get taxon
     */
    public static getTaxon(options: Options<GetTaxonData>) {
        return (options?.client ?? client).get<GetTaxonResponse, GetTaxonError>({
            ...options,
            url: '/taxonomy/taxa/{code}'
        });
    }
    
    /**
     * Update taxon
     */
    public static updateTaxon(options: Options<UpdateTaxonData>) {
        return (options?.client ?? client).patch<UpdateTaxonResponse, UpdateTaxonError>({
            ...options,
            url: '/taxonomy/taxa/{code}'
        });
    }
    
}