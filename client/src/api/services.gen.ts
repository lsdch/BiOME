// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetAccessPointsData, GetAccessPointsError, GetAccessPointsResponse, ListSiteDatasetsData, ListSiteDatasetsError, ListSiteDatasetsResponse, CreateSiteDatasetData, CreateSiteDatasetError, CreateSiteDatasetResponse, UpdateSiteDatasetData, UpdateSiteDatasetError, UpdateSiteDatasetResponse, GetSiteDatasetData, GetSiteDatasetError, GetSiteDatasetResponse, ListHabitatGroupsData, ListHabitatGroupsError, ListHabitatGroupsResponse, CreateHabitatGroupData, CreateHabitatGroupError, CreateHabitatGroupResponse, DeleteHabitatGroupData, DeleteHabitatGroupError, DeleteHabitatGroupResponse, UpdateHabitatGroupData, UpdateHabitatGroupError, UpdateHabitatGroupResponse, ListCountriesData, ListCountriesError, ListCountriesResponse, ListSitesData, ListSitesError, ListSitesResponse, GetSiteData, GetSiteError, GetSiteResponse, UpdateSiteData, UpdateSiteError, UpdateSiteResponse, CurrentUserData, CurrentUserError, CurrentUserResponse2, ConfirmEmailData, ConfirmEmailError, ConfirmEmailResponse, ResendEmailConfirmationData, ResendEmailConfirmationError, ResendEmailConfirmationResponse, RequestPasswordResetData, RequestPasswordResetError, RequestPasswordResetResponse, LoginData, LoginError, LoginResponse, LogoutData, LogoutError, LogoutResponse, UpdatePasswordData, UpdatePasswordError, UpdatePasswordResponse, ValidatePasswordTokenData, ValidatePasswordTokenError, ValidatePasswordTokenResponse, ResetPasswordData, ResetPasswordError, ResetPasswordResponse, ListPendingUserRequestsData, ListPendingUserRequestsError, ListPendingUserRequestsResponse, DeletePendingUserRequestData, DeletePendingUserRequestError, DeletePendingUserRequestResponse, GetPendingUserRequestData, GetPendingUserRequestError, GetPendingUserRequestResponse, RefreshSessionData, RefreshSessionError, RefreshSessionResponse, RegisterData, RegisterError, RegisterResponse, ClaimInvitationData, ClaimInvitationError, ClaimInvitationResponse, ListAnchorsData, ListAnchorsError, ListAnchorsResponse, ImportGbifData, ImportGbifError, ImportGbifResponse, MonitorGbifError, MonitorGbifResponse, ListInstitutionsData, ListInstitutionsError, ListInstitutionsResponse, CreateInstitutionData, CreateInstitutionError, CreateInstitutionResponse, DeleteInstitutionData, DeleteInstitutionError, DeleteInstitutionResponse, UpdateInstitutionData, UpdateInstitutionError, UpdateInstitutionResponse, ListPersonsData, ListPersonsError, ListPersonsResponse, CreatePersonData, CreatePersonError, CreatePersonResponse, DeletePersonData, DeletePersonError, DeletePersonResponse, UpdatePersonData, UpdatePersonError, UpdatePersonResponse, InvitePersonData, InvitePersonError, InvitePersonResponse, EmailSettingsData, EmailSettingsError, EmailSettingsResponse, UpdateEmailSettingsData, UpdateEmailSettingsError, UpdateEmailSettingsResponse, TestSmtpData, TestSmtpError, TestSmtpResponse, SetAppIconData, SetAppIconError, SetAppIconResponse, InstanceSettingsError, InstanceSettingsResponse, UpdateInstanceSettingsData, UpdateInstanceSettingsError, UpdateInstanceSettingsResponse, SecuritySettingsData, SecuritySettingsError, SecuritySettingsResponse, UpdateSecuritySettingsData, UpdateSecuritySettingsError, UpdateSecuritySettingsResponse, GetTaxonomyData, GetTaxonomyError, GetTaxonomyResponse, ListTaxaData, ListTaxaError, ListTaxaResponse, CreateTaxonData, CreateTaxonError, CreateTaxonResponse, DeleteTaxonData, DeleteTaxonError, DeleteTaxonResponse, GetTaxonData, GetTaxonError, GetTaxonResponse, UpdateTaxonData, UpdateTaxonError, UpdateTaxonResponse } from './types.gen';

export const client = createClient(createConfig());

export class LocationService {
    /**
     * List access points
     */
    public static getAccessPoints<ThrowOnError extends boolean = false>(options?: Options<GetAccessPointsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAccessPointsResponse, GetAccessPointsError, ThrowOnError>({
            ...options,
            url: '/access-points'
        });
    }
    
    /**
     * List site datasets
     * List all site datasets
     */
    public static listSiteDatasets<ThrowOnError extends boolean = false>(options?: Options<ListSiteDatasetsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListSiteDatasetsResponse, ListSiteDatasetsError, ThrowOnError>({
            ...options,
            url: '/datasets'
        });
    }
    
    /**
     * Create site dataset
     * Create a new site dataset with new or existing sites
     */
    public static createSiteDataset<ThrowOnError extends boolean = false>(options: Options<CreateSiteDatasetData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateSiteDatasetResponse, CreateSiteDatasetError, ThrowOnError>({
            ...options,
            url: '/datasets'
        });
    }
    
    /**
     * Update site dataset
     * Update properties of a site dataset
     */
    public static updateSiteDataset<ThrowOnError extends boolean = false>(options: Options<UpdateSiteDatasetData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateSiteDatasetResponse, UpdateSiteDatasetError, ThrowOnError>({
            ...options,
            url: '/datasets/{slug}'
        });
    }
    
    /**
     * Get site dataset
     * Get infos for a site dataset
     */
    public static getSiteDataset<ThrowOnError extends boolean = false>(options: Options<GetSiteDatasetData, ThrowOnError>) {
        return (options?.client ?? client).post<GetSiteDatasetResponse, GetSiteDatasetError, ThrowOnError>({
            ...options,
            url: '/datasets/{slug}'
        });
    }
    
    /**
     * List habitats
     */
    public static listHabitatGroups<ThrowOnError extends boolean = false>(options?: Options<ListHabitatGroupsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListHabitatGroupsResponse, ListHabitatGroupsError, ThrowOnError>({
            ...options,
            url: '/habitats'
        });
    }
    
    /**
     * Create habitat group
     */
    public static createHabitatGroup<ThrowOnError extends boolean = false>(options: Options<CreateHabitatGroupData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateHabitatGroupResponse, CreateHabitatGroupError, ThrowOnError>({
            ...options,
            url: '/habitats'
        });
    }
    
    /**
     * Delete habitat group
     */
    public static deleteHabitatGroup<ThrowOnError extends boolean = false>(options: Options<DeleteHabitatGroupData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteHabitatGroupResponse, DeleteHabitatGroupError, ThrowOnError>({
            ...options,
            url: '/habitats/{code}'
        });
    }
    
    /**
     * Update habitat group
     */
    public static updateHabitatGroup<ThrowOnError extends boolean = false>(options: Options<UpdateHabitatGroupData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateHabitatGroupResponse, UpdateHabitatGroupError, ThrowOnError>({
            ...options,
            url: '/habitats/{code}'
        });
    }
    
    /**
     * List countries
     */
    public static listCountries<ThrowOnError extends boolean = false>(options?: Options<ListCountriesData, ThrowOnError>) {
        return (options?.client ?? client).get<ListCountriesResponse, ListCountriesError, ThrowOnError>({
            ...options,
            url: '/locations/countries'
        });
    }
    
    /**
     * List sites
     * List all registered sites
     */
    public static listSites<ThrowOnError extends boolean = false>(options?: Options<ListSitesData, ThrowOnError>) {
        return (options?.client ?? client).get<ListSitesResponse, ListSitesError, ThrowOnError>({
            ...options,
            url: '/sites'
        });
    }
    
    /**
     * Get site
     * Get site infos using its code
     */
    public static getSite<ThrowOnError extends boolean = false>(options: Options<GetSiteData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSiteResponse, GetSiteError, ThrowOnError>({
            ...options,
            url: '/sites/{code}'
        });
    }
    
    /**
     * Update site
     * Update site infos using its code
     */
    public static updateSite<ThrowOnError extends boolean = false>(options: Options<UpdateSiteData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateSiteResponse, UpdateSiteError, ThrowOnError>({
            ...options,
            url: '/sites/{code}'
        });
    }
    
}

export class AccountService {
    /**
     * Current user
     * Get infos of currently authenticated user account
     */
    public static currentUser<ThrowOnError extends boolean = false>(options?: Options<CurrentUserData, ThrowOnError>) {
        return (options?.client ?? client).get<CurrentUserResponse2, CurrentUserError, ThrowOnError>({
            ...options,
            url: '/account'
        });
    }
    
    /**
     * Confirm e-mail
     * Confirms the validity of an e-mail address associated to an account, using a token issued at the end of user registration.
     */
    public static confirmEmail<ThrowOnError extends boolean = false>(options?: Options<ConfirmEmailData, ThrowOnError>) {
        return (options?.client ?? client).get<ConfirmEmailResponse, ConfirmEmailError, ThrowOnError>({
            ...options,
            url: '/account/email-confirmation'
        });
    }
    
    /**
     * Resend e-mail verification link
     * Sends again a verification link for the provided e-mail address, if it matches a currently not verified user account.
     */
    public static resendEmailConfirmation<ThrowOnError extends boolean = false>(options: Options<ResendEmailConfirmationData, ThrowOnError>) {
        return (options?.client ?? client).post<ResendEmailConfirmationResponse, ResendEmailConfirmationError, ThrowOnError>({
            ...options,
            url: '/account/email-confirmation/resend'
        });
    }
    
    /**
     * Request password reset
     * Requests sending a link containing a password reset token to your account email address. The link target can be provided by the client in the request body, or defaults to the API endpoint: `/api/v1/account/password-reset`. In this case, setting the new password is expected to be done programatically, e.g. through a curl request.
     */
    public static requestPasswordReset<ThrowOnError extends boolean = false>(options: Options<RequestPasswordResetData, ThrowOnError>) {
        return (options?.client ?? client).post<RequestPasswordResetResponse, RequestPasswordResetError, ThrowOnError>({
            ...options,
            url: '/account/forgotten-password'
        });
    }
    
    /**
     * Login
     * Authenticate using user credentials
     */
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
            ...options,
            url: '/account/login'
        });
    }
    
    /**
     * Logout
     * Logout from current user session by revoking session cookies
     */
    public static logout<ThrowOnError extends boolean = false>(options: Options<LogoutData, ThrowOnError>) {
        return (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
            ...options,
            url: '/account/logout'
        });
    }
    
    /**
     * Update password
     * Updates password of currently authenticated user
     */
    public static updatePassword<ThrowOnError extends boolean = false>(options: Options<UpdatePasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<UpdatePasswordResponse, UpdatePasswordError, ThrowOnError>({
            ...options,
            url: '/account/password'
        });
    }
    
    /**
     * Validate password token
     * Verifies that the password token is valid and can be used to reset a password
     */
    public static validatePasswordToken<ThrowOnError extends boolean = false>(options: Options<ValidatePasswordTokenData, ThrowOnError>) {
        return (options?.client ?? client).get<ValidatePasswordTokenResponse, ValidatePasswordTokenError, ThrowOnError>({
            ...options,
            url: '/account/password-reset'
        });
    }
    
    /**
     * Reset password
     * Set a new password using a previously issued reset token
     */
    public static resetPassword<ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<ResetPasswordResponse, ResetPasswordError, ThrowOnError>({
            ...options,
            url: '/account/password-reset'
        });
    }
    
    /**
     * List pending user requests
     * Lists all account requests pending validation from an administrator
     */
    public static listPendingUserRequests<ThrowOnError extends boolean = false>(options?: Options<ListPendingUserRequestsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListPendingUserRequestsResponse, ListPendingUserRequestsError, ThrowOnError>({
            ...options,
            url: '/account/pending'
        });
    }
    
    /**
     * Delete pending user request
     * Delete account request pending validation using the associated email
     */
    public static deletePendingUserRequest<ThrowOnError extends boolean = false>(options?: Options<DeletePendingUserRequestData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeletePendingUserRequestResponse, DeletePendingUserRequestError, ThrowOnError>({
            ...options,
            url: '/account/pending/{email}'
        });
    }
    
    /**
     * Get pending user request
     * Get account request pending validation using the associated email
     */
    public static getPendingUserRequest<ThrowOnError extends boolean = false>(options?: Options<GetPendingUserRequestData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPendingUserRequestResponse, GetPendingUserRequestError, ThrowOnError>({
            ...options,
            url: '/account/pending/{email}'
        });
    }
    
    /**
     * Refresh auth token
     * Refresh session using refresh token
     */
    public static refreshSession<ThrowOnError extends boolean = false>(options: Options<RefreshSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<RefreshSessionResponse, RefreshSessionError, ThrowOnError>({
            ...options,
            url: '/account/refresh'
        });
    }
    
    /**
     * Register new account
     * Register a new account that is initially pending, and needs to be activated by an administrator. An email is sent to the registered e-mail address with a verification link. The target URL can be set by the client, otherwise it defaults to the API endpoint: `/api/v1/account/email-confirmation`
     */
    public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
        return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
            ...options,
            url: '/account/register'
        });
    }
    
    /**
     * Claim invitation
     * Register an account with pre-assigned role and identity, using an invitation token
     */
    public static claimInvitation<ThrowOnError extends boolean = false>(options: Options<ClaimInvitationData, ThrowOnError>) {
        return (options?.client ?? client).post<ClaimInvitationResponse, ClaimInvitationError, ThrowOnError>({
            ...options,
            url: '/account/register/{token}'
        });
    }
    
}

export class TaxonomyGbifService {
    /**
     * List GBIF anchor clades
     */
    public static listAnchors<ThrowOnError extends boolean = false>(options?: Options<ListAnchorsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListAnchorsResponse, ListAnchorsError, ThrowOnError>({
            ...options,
            url: '/anchors/'
        });
    }
    
    /**
     * Import GBIF clade
     */
    public static importGbif<ThrowOnError extends boolean = false>(options: Options<ImportGbifData, ThrowOnError>) {
        return (options?.client ?? client).put<ImportGbifResponse, ImportGbifError, ThrowOnError>({
            ...options,
            url: '/import/taxonomy'
        });
    }
    
    /**
     * Monitor GBIF taxonomy imports
     */
    public static monitorGbif<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<MonitorGbifResponse, MonitorGbifError, ThrowOnError>({
            ...options,
            url: '/import/taxonomy/monitor'
        });
    }
    
}

export class HabitatsService {
    /**
     * List habitats
     */
    public static listHabitatGroups<ThrowOnError extends boolean = false>(options?: Options<ListHabitatGroupsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListHabitatGroupsResponse, ListHabitatGroupsError, ThrowOnError>({
            ...options,
            url: '/habitats'
        });
    }
    
    /**
     * Create habitat group
     */
    public static createHabitatGroup<ThrowOnError extends boolean = false>(options: Options<CreateHabitatGroupData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateHabitatGroupResponse, CreateHabitatGroupError, ThrowOnError>({
            ...options,
            url: '/habitats'
        });
    }
    
    /**
     * Delete habitat group
     */
    public static deleteHabitatGroup<ThrowOnError extends boolean = false>(options: Options<DeleteHabitatGroupData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteHabitatGroupResponse, DeleteHabitatGroupError, ThrowOnError>({
            ...options,
            url: '/habitats/{code}'
        });
    }
    
    /**
     * Update habitat group
     */
    public static updateHabitatGroup<ThrowOnError extends boolean = false>(options: Options<UpdateHabitatGroupData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateHabitatGroupResponse, UpdateHabitatGroupError, ThrowOnError>({
            ...options,
            url: '/habitats/{code}'
        });
    }
    
}

export class PeopleService {
    /**
     * List institutions
     */
    public static listInstitutions<ThrowOnError extends boolean = false>(options?: Options<ListInstitutionsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListInstitutionsResponse, ListInstitutionsError, ThrowOnError>({
            ...options,
            url: '/institutions'
        });
    }
    
    /**
     * Create institution
     */
    public static createInstitution<ThrowOnError extends boolean = false>(options: Options<CreateInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateInstitutionResponse, CreateInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions'
        });
    }
    
    /**
     * Delete institution
     */
    public static deleteInstitution<ThrowOnError extends boolean = false>(options: Options<DeleteInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteInstitutionResponse, DeleteInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions/{code}'
        });
    }
    
    /**
     * Update institution
     */
    public static updateInstitution<ThrowOnError extends boolean = false>(options: Options<UpdateInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateInstitutionResponse, UpdateInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions/{code}'
        });
    }
    
    /**
     * List persons
     */
    public static listPersons<ThrowOnError extends boolean = false>(options?: Options<ListPersonsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListPersonsResponse, ListPersonsError, ThrowOnError>({
            ...options,
            url: '/persons'
        });
    }
    
    /**
     * Create person
     */
    public static createPerson<ThrowOnError extends boolean = false>(options: Options<CreatePersonData, ThrowOnError>) {
        return (options?.client ?? client).post<CreatePersonResponse, CreatePersonError, ThrowOnError>({
            ...options,
            url: '/persons'
        });
    }
    
    /**
     * Delete person
     */
    public static deletePerson<ThrowOnError extends boolean = false>(options: Options<DeletePersonData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeletePersonResponse, DeletePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}'
        });
    }
    
    /**
     * Update person
     */
    public static updatePerson<ThrowOnError extends boolean = false>(options: Options<UpdatePersonData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdatePersonResponse, UpdatePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}'
        });
    }
    
    /**
     * Invite person
     * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
     */
    public static invitePerson<ThrowOnError extends boolean = false>(options: Options<InvitePersonData, ThrowOnError>) {
        return (options?.client ?? client).post<InvitePersonResponse, InvitePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}/invite'
        });
    }
    
}

export class InstitutionService {
    /**
     * List institutions
     */
    public static listInstitutions<ThrowOnError extends boolean = false>(options?: Options<ListInstitutionsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListInstitutionsResponse, ListInstitutionsError, ThrowOnError>({
            ...options,
            url: '/institutions'
        });
    }
    
    /**
     * Create institution
     */
    public static createInstitution<ThrowOnError extends boolean = false>(options: Options<CreateInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateInstitutionResponse, CreateInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions'
        });
    }
    
    /**
     * Delete institution
     */
    public static deleteInstitution<ThrowOnError extends boolean = false>(options: Options<DeleteInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteInstitutionResponse, DeleteInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions/{code}'
        });
    }
    
    /**
     * Update institution
     */
    public static updateInstitution<ThrowOnError extends boolean = false>(options: Options<UpdateInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateInstitutionResponse, UpdateInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions/{code}'
        });
    }
    
}

export class CountriesService {
    /**
     * List countries
     */
    public static listCountries<ThrowOnError extends boolean = false>(options?: Options<ListCountriesData, ThrowOnError>) {
        return (options?.client ?? client).get<ListCountriesResponse, ListCountriesError, ThrowOnError>({
            ...options,
            url: '/locations/countries'
        });
    }
    
}

export class PersonService {
    /**
     * List persons
     */
    public static listPersons<ThrowOnError extends boolean = false>(options?: Options<ListPersonsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListPersonsResponse, ListPersonsError, ThrowOnError>({
            ...options,
            url: '/persons'
        });
    }
    
    /**
     * Create person
     */
    public static createPerson<ThrowOnError extends boolean = false>(options: Options<CreatePersonData, ThrowOnError>) {
        return (options?.client ?? client).post<CreatePersonResponse, CreatePersonError, ThrowOnError>({
            ...options,
            url: '/persons'
        });
    }
    
    /**
     * Delete person
     */
    public static deletePerson<ThrowOnError extends boolean = false>(options: Options<DeletePersonData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeletePersonResponse, DeletePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}'
        });
    }
    
    /**
     * Update person
     */
    public static updatePerson<ThrowOnError extends boolean = false>(options: Options<UpdatePersonData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdatePersonResponse, UpdatePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}'
        });
    }
    
    /**
     * Invite person
     * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
     */
    public static invitePerson<ThrowOnError extends boolean = false>(options: Options<InvitePersonData, ThrowOnError>) {
        return (options?.client ?? client).post<InvitePersonResponse, InvitePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}/invite'
        });
    }
    
}

export class SettingsService {
    /**
     * Email settings
     */
    public static emailSettings<ThrowOnError extends boolean = false>(options?: Options<EmailSettingsData, ThrowOnError>) {
        return (options?.client ?? client).get<EmailSettingsResponse, EmailSettingsError, ThrowOnError>({
            ...options,
            url: '/settings/emailing'
        });
    }
    
    /**
     * Update email settings
     */
    public static updateEmailSettings<ThrowOnError extends boolean = false>(options: Options<UpdateEmailSettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<UpdateEmailSettingsResponse, UpdateEmailSettingsError, ThrowOnError>({
            ...options,
            url: '/settings/emailing'
        });
    }
    
    /**
     * Test SMTP connection
     */
    public static testSmtp<ThrowOnError extends boolean = false>(options: Options<TestSmtpData, ThrowOnError>) {
        return (options?.client ?? client).post<TestSmtpResponse, TestSmtpError, ThrowOnError>({
            ...options,
            url: '/settings/emailing/test-dial'
        });
    }
    
    /**
     * Set app icon
     */
    public static setAppIcon<ThrowOnError extends boolean = false>(options?: Options<SetAppIconData, ThrowOnError>) {
        return (options?.client ?? client).post<SetAppIconResponse, SetAppIconError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/settings/icon'
        });
    }
    
    /**
     * Instance settings
     */
    public static instanceSettings<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<InstanceSettingsResponse, InstanceSettingsError, ThrowOnError>({
            ...options,
            url: '/settings/instance'
        });
    }
    
    /**
     * Update instance settings
     */
    public static updateInstanceSettings<ThrowOnError extends boolean = false>(options: Options<UpdateInstanceSettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<UpdateInstanceSettingsResponse, UpdateInstanceSettingsError, ThrowOnError>({
            ...options,
            url: '/settings/instance'
        });
    }
    
    /**
     * Security settings
     */
    public static securitySettings<ThrowOnError extends boolean = false>(options?: Options<SecuritySettingsData, ThrowOnError>) {
        return (options?.client ?? client).get<SecuritySettingsResponse, SecuritySettingsError, ThrowOnError>({
            ...options,
            url: '/settings/security'
        });
    }
    
    /**
     * Update security settings
     */
    public static updateSecuritySettings<ThrowOnError extends boolean = false>(options: Options<UpdateSecuritySettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<UpdateSecuritySettingsResponse, UpdateSecuritySettingsError, ThrowOnError>({
            ...options,
            url: '/settings/security'
        });
    }
    
}

export class TaxonomyService {
    /**
     * Get taxonomy
     */
    public static getTaxonomy<ThrowOnError extends boolean = false>(options?: Options<GetTaxonomyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTaxonomyResponse, GetTaxonomyError, ThrowOnError>({
            ...options,
            url: '/taxonomy'
        });
    }
    
    /**
     * List taxa
     */
    public static listTaxa<ThrowOnError extends boolean = false>(options?: Options<ListTaxaData, ThrowOnError>) {
        return (options?.client ?? client).get<ListTaxaResponse, ListTaxaError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa'
        });
    }
    
    /**
     * Create taxon
     */
    public static createTaxon<ThrowOnError extends boolean = false>(options: Options<CreateTaxonData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateTaxonResponse, CreateTaxonError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa'
        });
    }
    
    /**
     * Delete taxon
     */
    public static deleteTaxon<ThrowOnError extends boolean = false>(options: Options<DeleteTaxonData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteTaxonResponse, DeleteTaxonError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa/{code}'
        });
    }
    
    /**
     * Get taxon
     */
    public static getTaxon<ThrowOnError extends boolean = false>(options: Options<GetTaxonData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTaxonResponse, GetTaxonError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa/{code}'
        });
    }
    
    /**
     * Update taxon
     */
    public static updateTaxon<ThrowOnError extends boolean = false>(options: Options<UpdateTaxonData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateTaxonResponse, UpdateTaxonError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa/{code}'
        });
    }
    
}