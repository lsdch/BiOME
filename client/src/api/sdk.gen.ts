// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import { type CurrentUserData, type CurrentUserError, type CurrentUserResponse2, type ConfirmEmailData, type ConfirmEmailError, type ConfirmEmailResponse, type ResendEmailVerificationData, type ResendEmailVerificationError, type ResendEmailVerificationResponse, type RequestPasswordResetData, type RequestPasswordResetError, type RequestPasswordResetResponse, type LoginData, type LoginError, type LoginResponse, type LogoutData, type LogoutError, type LogoutResponse, type UpdatePasswordData, type UpdatePasswordError, type UpdatePasswordResponse, type ValidatePasswordTokenData, type ValidatePasswordTokenError, type ValidatePasswordTokenResponse, type ResetPasswordData, type ResetPasswordError, type ResetPasswordResponse, type ListPendingUserRequestsData, type ListPendingUserRequestsError, type ListPendingUserRequestsResponse, type DeletePendingUserRequestData, type DeletePendingUserRequestError, type DeletePendingUserRequestResponse, type GetPendingUserRequestData, type GetPendingUserRequestError, type GetPendingUserRequestResponse, type RefreshSessionData, type RefreshSessionError, type RefreshSessionResponse, type RegisterData, type RegisterError, type RegisterResponse, type ClaimInvitationData, type ClaimInvitationError, type ClaimInvitationResponse, LoginResponseTransformer, ListPendingUserRequestsResponseTransformer, DeletePendingUserRequestResponseTransformer, GetPendingUserRequestResponseTransformer, RefreshSessionResponseTransformer, ClaimInvitationResponseTransformer, type ListCountriesData, type ListCountriesError, type ListCountriesResponse, type ListDatasetsData, type ListDatasetsError, type ListDatasetsResponse, type CreateDatasetData, type CreateDatasetError, type CreateDatasetResponse, type UpdateDatasetData, type UpdateDatasetError, type UpdateDatasetResponse, type GetDatasetData, type GetDatasetError, type GetDatasetResponse, ListDatasetsResponseTransformer, CreateDatasetResponseTransformer, UpdateDatasetResponseTransformer, GetDatasetResponseTransformer, type DeleteEventData, type DeleteEventError, type DeleteEventResponse, type UpdateEventData, type UpdateEventError, type UpdateEventResponse, type UpdateSpottingData, type UpdateSpottingError, type UpdateSpottingResponse, type ListProgramsData, type ListProgramsError, type ListProgramsResponse, type CreateProgramData, type CreateProgramError, type CreateProgramResponse, type DeleteProgramData, type DeleteProgramError, type DeleteProgramResponse, type UpdateProgramData, type UpdateProgramError, type UpdateProgramResponse, DeleteEventResponseTransformer, UpdateEventResponseTransformer, UpdateSpottingResponseTransformer, ListProgramsResponseTransformer, CreateProgramResponseTransformer, DeleteProgramResponseTransformer, UpdateProgramResponseTransformer, type ListHabitatGroupsData, type ListHabitatGroupsError, type ListHabitatGroupsResponse, type CreateHabitatGroupData, type CreateHabitatGroupError, type CreateHabitatGroupResponse, type DeleteHabitatGroupData, type DeleteHabitatGroupError, type DeleteHabitatGroupResponse, type UpdateHabitatGroupData, type UpdateHabitatGroupError, type UpdateHabitatGroupResponse, ListHabitatGroupsResponseTransformer, CreateHabitatGroupResponseTransformer, DeleteHabitatGroupResponseTransformer, UpdateHabitatGroupResponseTransformer, type ListInstitutionsData, type ListInstitutionsError, type ListInstitutionsResponse, type CreateInstitutionData, type CreateInstitutionError, type CreateInstitutionResponse, type DeleteInstitutionData, type DeleteInstitutionError, type DeleteInstitutionResponse, type UpdateInstitutionData, type UpdateInstitutionError, type UpdateInstitutionResponse, ListInstitutionsResponseTransformer, CreateInstitutionResponseTransformer, DeleteInstitutionResponseTransformer, UpdateInstitutionResponseTransformer, type ListSitesData, type ListSitesError, type ListSitesResponse, type CreateSiteData, type CreateSiteError, type CreateSiteResponse, type GetSiteData, type GetSiteError, type GetSiteResponse, type UpdateSiteData, type UpdateSiteError, type UpdateSiteResponse, type CreateEventData, type CreateEventError, type CreateEventResponse, ListSitesResponseTransformer, CreateSiteResponseTransformer, GetSiteResponseTransformer, UpdateSiteResponseTransformer, CreateEventResponseTransformer, type ListPersonsData, type ListPersonsError, type ListPersonsResponse, type CreatePersonData, type CreatePersonError, type CreatePersonResponse, type DeletePersonData, type DeletePersonError, type DeletePersonResponse, type UpdatePersonData, type UpdatePersonError, type UpdatePersonResponse, type InvitePersonData, type InvitePersonError, type InvitePersonResponse, ListPersonsResponseTransformer, CreatePersonResponseTransformer, DeletePersonResponseTransformer, UpdatePersonResponseTransformer, type CrossrefData, type CrossrefError, type CrossrefResponse, type ListArticlesData, type ListArticlesError, type ListArticlesResponse, type CreateArticleData, type CreateArticleError, type CreateArticleResponse, type DeleteArticleData, type DeleteArticleError, type DeleteArticleResponse, type UpdateArticleData, type UpdateArticleError, type UpdateArticleResponse, ListArticlesResponseTransformer, CreateArticleResponseTransformer, DeleteArticleResponseTransformer, UpdateArticleResponseTransformer, type ListBioMaterialData, type ListBioMaterialError, type ListBioMaterialResponse, type DeleteBioMaterialData, type DeleteBioMaterialError, type DeleteBioMaterialResponse, type GetBioMaterialData, type GetBioMaterialError, type GetBioMaterialResponse, ListBioMaterialResponseTransformer, DeleteBioMaterialResponseTransformer, GetBioMaterialResponseTransformer, type ListAbioticParametersData, type ListAbioticParametersError, type ListAbioticParametersResponse, type CreateAbioticParameterData, type CreateAbioticParameterError, type CreateAbioticParameterResponse, type DeleteAbioticParameterData, type DeleteAbioticParameterError, type DeleteAbioticParameterResponse, type UpdateAbioticParameterData, type UpdateAbioticParameterError, type UpdateAbioticParameterResponse, type GetAccessPointsData, type GetAccessPointsError, type GetAccessPointsResponse, type ListFixativesData, type ListFixativesError, type ListFixativesResponse, type CreateFixativeData, type CreateFixativeError, type CreateFixativeResponse, type DeleteFixativeData, type DeleteFixativeError, type DeleteFixativeResponse, type UpdateFixativeData, type UpdateFixativeError, type UpdateFixativeResponse, type ListSamplingMethodsData, type ListSamplingMethodsError, type ListSamplingMethodsResponse, type CreateSamplingMethodData, type CreateSamplingMethodError, type CreateSamplingMethodResponse, type DeleteSamplingMethodData, type DeleteSamplingMethodError, type DeleteSamplingMethodResponse, type UpdateSamplingMethodData, type UpdateSamplingMethodError, type UpdateSamplingMethodResponse, type CreateSamplingData, type CreateSamplingError, type CreateSamplingResponse, type DeleteSamplingData, type DeleteSamplingError, type DeleteSamplingResponse, type UpdateSamplingData, type UpdateSamplingError, type UpdateSamplingResponse, ListAbioticParametersResponseTransformer, CreateAbioticParameterResponseTransformer, DeleteAbioticParameterResponseTransformer, UpdateAbioticParameterResponseTransformer, ListFixativesResponseTransformer, CreateFixativeResponseTransformer, DeleteFixativeResponseTransformer, UpdateFixativeResponseTransformer, ListSamplingMethodsResponseTransformer, CreateSamplingMethodResponseTransformer, DeleteSamplingMethodResponseTransformer, UpdateSamplingMethodResponseTransformer, CreateSamplingResponseTransformer, DeleteSamplingResponseTransformer, UpdateSamplingResponseTransformer, type ListGenesData, type ListGenesError, type ListGenesResponse, type CreateGeneData, type CreateGeneError, type CreateGeneResponse, type DeleteGeneData, type DeleteGeneError, type DeleteGeneResponse, type UpdateGeneData, type UpdateGeneError, type UpdateGeneResponse, ListGenesResponseTransformer, CreateGeneResponseTransformer, DeleteGeneResponseTransformer, UpdateGeneResponseTransformer, type EmailSettingsData, type EmailSettingsError, type EmailSettingsResponse, type UpdateEmailSettingsData, type UpdateEmailSettingsError, type UpdateEmailSettingsResponse, type TestSmtpData, type TestSmtpError, type TestSmtpResponse, type SetAppIconData, type SetAppIconError, type SetAppIconResponse, type InstanceSettingsError, type InstanceSettingsResponse, type UpdateInstanceSettingsData, type UpdateInstanceSettingsError, type UpdateInstanceSettingsResponse, type SecuritySettingsData, type SecuritySettingsError, type SecuritySettingsResponse, type UpdateSecuritySettingsData, type UpdateSecuritySettingsError, type UpdateSecuritySettingsResponse, type GetTaxonomyData, type GetTaxonomyError, type GetTaxonomyResponse, type ListTaxaData, type ListTaxaError, type ListTaxaResponse, type CreateTaxonData, type CreateTaxonError, type CreateTaxonResponse, type DeleteTaxonData, type DeleteTaxonError, type DeleteTaxonResponse, type GetTaxonData, type GetTaxonError, type GetTaxonResponse, type UpdateTaxonData, type UpdateTaxonError, type UpdateTaxonResponse, GetTaxonomyResponseTransformer, ListTaxaResponseTransformer, CreateTaxonResponseTransformer, DeleteTaxonResponseTransformer, GetTaxonResponseTransformer, UpdateTaxonResponseTransformer, type ListAnchorsData, type ListAnchorsError, type ListAnchorsResponse, type ImportGbifData, type ImportGbifError, type ImportGbifResponse, type MonitorGbifError, type MonitorGbifResponse, ListAnchorsResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

export class AccountService {
    /**
     * Current user
     * Get infos of currently authenticated user account
     */
    public static currentUser<ThrowOnError extends boolean = false>(options?: Options<CurrentUserData, ThrowOnError>) {
        return (options?.client ?? client).get<CurrentUserResponse2, CurrentUserError, ThrowOnError>({
            ...options,
            url: '/account'
        });
    }
    
    /**
     * Confirm e-mail
     * Confirms the validity of an e-mail address associated to an account, using a token issued at the end of user registration.
     */
    public static confirmEmail<ThrowOnError extends boolean = false>(options?: Options<ConfirmEmailData, ThrowOnError>) {
        return (options?.client ?? client).get<ConfirmEmailResponse, ConfirmEmailError, ThrowOnError>({
            ...options,
            url: '/account/email-confirmation'
        });
    }
    
    /**
     * Resend e-mail verification link
     * Sends again a verification link for the provided e-mail address, if it matches a currently not verified user account.
     */
    public static resendEmailVerification<ThrowOnError extends boolean = false>(options: Options<ResendEmailVerificationData, ThrowOnError>) {
        return (options?.client ?? client).post<ResendEmailVerificationResponse, ResendEmailVerificationError, ThrowOnError>({
            ...options,
            url: '/account/email-confirmation/resend'
        });
    }
    
    /**
     * Request password reset
     * Requests sending a link containing a password reset token to your account email address. The link target can be provided by the client in the request body, or defaults to the API endpoint: `/api/v1/account/password-reset`. In this case, setting the new password is expected to be done programatically, e.g. through a curl request.
     */
    public static requestPasswordReset<ThrowOnError extends boolean = false>(options: Options<RequestPasswordResetData, ThrowOnError>) {
        return (options?.client ?? client).post<RequestPasswordResetResponse, RequestPasswordResetError, ThrowOnError>({
            ...options,
            url: '/account/forgotten-password'
        });
    }
    
    /**
     * Login
     * Authenticate using user credentials
     */
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
            ...options,
            url: '/account/login',
            responseTransformer: LoginResponseTransformer
        });
    }
    
    /**
     * Logout
     * Logout from current user session by revoking session cookies
     */
    public static logout<ThrowOnError extends boolean = false>(options: Options<LogoutData, ThrowOnError>) {
        return (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
            ...options,
            url: '/account/logout'
        });
    }
    
    /**
     * Update password
     * Updates password of currently authenticated user
     */
    public static updatePassword<ThrowOnError extends boolean = false>(options: Options<UpdatePasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<UpdatePasswordResponse, UpdatePasswordError, ThrowOnError>({
            ...options,
            url: '/account/password'
        });
    }
    
    /**
     * Validate password token
     * Verifies that the password token is valid and can be used to reset a password
     */
    public static validatePasswordToken<ThrowOnError extends boolean = false>(options: Options<ValidatePasswordTokenData, ThrowOnError>) {
        return (options?.client ?? client).get<ValidatePasswordTokenResponse, ValidatePasswordTokenError, ThrowOnError>({
            ...options,
            url: '/account/password-reset'
        });
    }
    
    /**
     * Reset password
     * Set a new password using a previously issued reset token
     */
    public static resetPassword<ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<ResetPasswordResponse, ResetPasswordError, ThrowOnError>({
            ...options,
            url: '/account/password-reset'
        });
    }
    
    /**
     * List pending user requests
     * Lists all account requests pending validation from an administrator
     */
    public static listPendingUserRequests<ThrowOnError extends boolean = false>(options?: Options<ListPendingUserRequestsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListPendingUserRequestsResponse, ListPendingUserRequestsError, ThrowOnError>({
            ...options,
            url: '/account/pending',
            responseTransformer: ListPendingUserRequestsResponseTransformer
        });
    }
    
    /**
     * Delete pending user request
     * Delete account request pending validation using the associated email
     */
    public static deletePendingUserRequest<ThrowOnError extends boolean = false>(options?: Options<DeletePendingUserRequestData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeletePendingUserRequestResponse, DeletePendingUserRequestError, ThrowOnError>({
            ...options,
            url: '/account/pending/{email}',
            responseTransformer: DeletePendingUserRequestResponseTransformer
        });
    }
    
    /**
     * Get pending user request
     * Get account request pending validation using the associated email
     */
    public static getPendingUserRequest<ThrowOnError extends boolean = false>(options?: Options<GetPendingUserRequestData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPendingUserRequestResponse, GetPendingUserRequestError, ThrowOnError>({
            ...options,
            url: '/account/pending/{email}',
            responseTransformer: GetPendingUserRequestResponseTransformer
        });
    }
    
    /**
     * Refresh auth token
     * Refresh session using refresh token
     */
    public static refreshSession<ThrowOnError extends boolean = false>(options: Options<RefreshSessionData, ThrowOnError>) {
        return (options?.client ?? client).post<RefreshSessionResponse, RefreshSessionError, ThrowOnError>({
            ...options,
            url: '/account/refresh',
            responseTransformer: RefreshSessionResponseTransformer
        });
    }
    
    /**
     * Register new account
     * Register a new account that is initially pending, and needs to be activated by an administrator. An email is sent to the registered e-mail address with a verification link. The target URL can be set by the client, otherwise it defaults to the API endpoint: `/api/v1/account/email-confirmation`
     */
    public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
        return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
            ...options,
            url: '/account/register'
        });
    }
    
    /**
     * Claim invitation
     * Register an account with pre-assigned role and identity, using an invitation token
     */
    public static claimInvitation<ThrowOnError extends boolean = false>(options: Options<ClaimInvitationData, ThrowOnError>) {
        return (options?.client ?? client).post<ClaimInvitationResponse, ClaimInvitationError, ThrowOnError>({
            ...options,
            url: '/account/register/{token}',
            responseTransformer: ClaimInvitationResponseTransformer
        });
    }
    
}

export class CountriesService {
    /**
     * List countries
     */
    public static listCountries<ThrowOnError extends boolean = false>(options?: Options<ListCountriesData, ThrowOnError>) {
        return (options?.client ?? client).get<ListCountriesResponse, ListCountriesError, ThrowOnError>({
            ...options,
            url: '/locations/countries'
        });
    }
    
}

export class DatasetsService {
    /**
     * List site datasets
     * List all site datasets
     */
    public static listDatasets<ThrowOnError extends boolean = false>(options?: Options<ListDatasetsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListDatasetsResponse, ListDatasetsError, ThrowOnError>({
            ...options,
            url: '/datasets',
            responseTransformer: ListDatasetsResponseTransformer
        });
    }
    
    /**
     * Create site dataset
     * Create a new site dataset with new or existing sites
     */
    public static createDataset<ThrowOnError extends boolean = false>(options: Options<CreateDatasetData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateDatasetResponse, CreateDatasetError, ThrowOnError>({
            ...options,
            url: '/datasets',
            responseTransformer: CreateDatasetResponseTransformer
        });
    }
    
    /**
     * Update site dataset
     * Update properties of a site dataset
     */
    public static updateDataset<ThrowOnError extends boolean = false>(options: Options<UpdateDatasetData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateDatasetResponse, UpdateDatasetError, ThrowOnError>({
            ...options,
            url: '/datasets/{slug}',
            responseTransformer: UpdateDatasetResponseTransformer
        });
    }
    
    /**
     * Get site dataset
     * Get infos for a site dataset
     */
    public static getDataset<ThrowOnError extends boolean = false>(options: Options<GetDatasetData, ThrowOnError>) {
        return (options?.client ?? client).post<GetDatasetResponse, GetDatasetError, ThrowOnError>({
            ...options,
            url: '/datasets/{slug}',
            responseTransformer: GetDatasetResponseTransformer
        });
    }
    
}

export class EventsService {
    /**
     * Delete event
     */
    public static deleteEvent<ThrowOnError extends boolean = false>(options: Options<DeleteEventData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteEventResponse, DeleteEventError, ThrowOnError>({
            ...options,
            url: '/events/{id}',
            responseTransformer: DeleteEventResponseTransformer
        });
    }
    
    /**
     * Update event
     */
    public static updateEvent<ThrowOnError extends boolean = false>(options: Options<UpdateEventData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateEventResponse, UpdateEventError, ThrowOnError>({
            ...options,
            url: '/events/{id}',
            responseTransformer: UpdateEventResponseTransformer
        });
    }
    
    /**
     * Update spotting
     */
    public static updateSpotting<ThrowOnError extends boolean = false>(options: Options<UpdateSpottingData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateSpottingResponse, UpdateSpottingError, ThrowOnError>({
            ...options,
            url: '/events/{id}/spottings',
            responseTransformer: UpdateSpottingResponseTransformer
        });
    }
    
    /**
     * List programs
     */
    public static listPrograms<ThrowOnError extends boolean = false>(options?: Options<ListProgramsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListProgramsResponse, ListProgramsError, ThrowOnError>({
            ...options,
            url: '/programs',
            responseTransformer: ListProgramsResponseTransformer
        });
    }
    
    /**
     * Create program
     */
    public static createProgram<ThrowOnError extends boolean = false>(options: Options<CreateProgramData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateProgramResponse, CreateProgramError, ThrowOnError>({
            ...options,
            url: '/programs',
            responseTransformer: CreateProgramResponseTransformer
        });
    }
    
    /**
     * Delete program
     */
    public static deleteProgram<ThrowOnError extends boolean = false>(options: Options<DeleteProgramData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteProgramResponse, DeleteProgramError, ThrowOnError>({
            ...options,
            url: '/programs/{code}',
            responseTransformer: DeleteProgramResponseTransformer
        });
    }
    
    /**
     * Update program
     */
    public static updateProgram<ThrowOnError extends boolean = false>(options: Options<UpdateProgramData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateProgramResponse, UpdateProgramError, ThrowOnError>({
            ...options,
            url: '/programs/{code}',
            responseTransformer: UpdateProgramResponseTransformer
        });
    }
    
}

export class HabitatsService {
    /**
     * List habitats
     */
    public static listHabitatGroups<ThrowOnError extends boolean = false>(options?: Options<ListHabitatGroupsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListHabitatGroupsResponse, ListHabitatGroupsError, ThrowOnError>({
            ...options,
            url: '/habitats',
            responseTransformer: ListHabitatGroupsResponseTransformer
        });
    }
    
    /**
     * Create habitat group
     */
    public static createHabitatGroup<ThrowOnError extends boolean = false>(options: Options<CreateHabitatGroupData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateHabitatGroupResponse, CreateHabitatGroupError, ThrowOnError>({
            ...options,
            url: '/habitats',
            responseTransformer: CreateHabitatGroupResponseTransformer
        });
    }
    
    /**
     * Delete habitat group
     */
    public static deleteHabitatGroup<ThrowOnError extends boolean = false>(options: Options<DeleteHabitatGroupData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteHabitatGroupResponse, DeleteHabitatGroupError, ThrowOnError>({
            ...options,
            url: '/habitats/{code}',
            responseTransformer: DeleteHabitatGroupResponseTransformer
        });
    }
    
    /**
     * Update habitat group
     */
    public static updateHabitatGroup<ThrowOnError extends boolean = false>(options: Options<UpdateHabitatGroupData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateHabitatGroupResponse, UpdateHabitatGroupError, ThrowOnError>({
            ...options,
            url: '/habitats/{code}',
            responseTransformer: UpdateHabitatGroupResponseTransformer
        });
    }
    
}

export class InstitutionService {
    /**
     * List institutions
     */
    public static listInstitutions<ThrowOnError extends boolean = false>(options?: Options<ListInstitutionsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListInstitutionsResponse, ListInstitutionsError, ThrowOnError>({
            ...options,
            url: '/institutions',
            responseTransformer: ListInstitutionsResponseTransformer
        });
    }
    
    /**
     * Create institution
     */
    public static createInstitution<ThrowOnError extends boolean = false>(options: Options<CreateInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateInstitutionResponse, CreateInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions',
            responseTransformer: CreateInstitutionResponseTransformer
        });
    }
    
    /**
     * Delete institution
     */
    public static deleteInstitution<ThrowOnError extends boolean = false>(options: Options<DeleteInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteInstitutionResponse, DeleteInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions/{code}',
            responseTransformer: DeleteInstitutionResponseTransformer
        });
    }
    
    /**
     * Update institution
     */
    public static updateInstitution<ThrowOnError extends boolean = false>(options: Options<UpdateInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateInstitutionResponse, UpdateInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions/{code}',
            responseTransformer: UpdateInstitutionResponseTransformer
        });
    }
    
}

export class LocationService {
    /**
     * List countries
     */
    public static listCountries<ThrowOnError extends boolean = false>(options?: Options<ListCountriesData, ThrowOnError>) {
        return (options?.client ?? client).get<ListCountriesResponse, ListCountriesError, ThrowOnError>({
            ...options,
            url: '/locations/countries'
        });
    }
    
    /**
     * List sites
     * List all registered sites
     */
    public static listSites<ThrowOnError extends boolean = false>(options?: Options<ListSitesData, ThrowOnError>) {
        return (options?.client ?? client).get<ListSitesResponse, ListSitesError, ThrowOnError>({
            ...options,
            url: '/sites',
            responseTransformer: ListSitesResponseTransformer
        });
    }
    
    /**
     * Create site
     * Create site infos using its code
     */
    public static createSite<ThrowOnError extends boolean = false>(options: Options<CreateSiteData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateSiteResponse, CreateSiteError, ThrowOnError>({
            ...options,
            url: '/sites',
            responseTransformer: CreateSiteResponseTransformer
        });
    }
    
    /**
     * Get site
     * Get site infos using its code
     */
    public static getSite<ThrowOnError extends boolean = false>(options: Options<GetSiteData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSiteResponse, GetSiteError, ThrowOnError>({
            ...options,
            url: '/sites/{code}',
            responseTransformer: GetSiteResponseTransformer
        });
    }
    
    /**
     * Update site
     * Update site infos using its code
     */
    public static updateSite<ThrowOnError extends boolean = false>(options: Options<UpdateSiteData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateSiteResponse, UpdateSiteError, ThrowOnError>({
            ...options,
            url: '/sites/{code}',
            responseTransformer: UpdateSiteResponseTransformer
        });
    }
    
    /**
     * Create event
     * Register event on a site identified by its code
     */
    public static createEvent<ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateEventResponse, CreateEventError, ThrowOnError>({
            ...options,
            url: '/sites/{code}/events',
            responseTransformer: CreateEventResponseTransformer
        });
    }
    
}

export class PeopleService {
    /**
     * List institutions
     */
    public static listInstitutions<ThrowOnError extends boolean = false>(options?: Options<ListInstitutionsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListInstitutionsResponse, ListInstitutionsError, ThrowOnError>({
            ...options,
            url: '/institutions',
            responseTransformer: ListInstitutionsResponseTransformer
        });
    }
    
    /**
     * Create institution
     */
    public static createInstitution<ThrowOnError extends boolean = false>(options: Options<CreateInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateInstitutionResponse, CreateInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions',
            responseTransformer: CreateInstitutionResponseTransformer
        });
    }
    
    /**
     * Delete institution
     */
    public static deleteInstitution<ThrowOnError extends boolean = false>(options: Options<DeleteInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteInstitutionResponse, DeleteInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions/{code}',
            responseTransformer: DeleteInstitutionResponseTransformer
        });
    }
    
    /**
     * Update institution
     */
    public static updateInstitution<ThrowOnError extends boolean = false>(options: Options<UpdateInstitutionData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateInstitutionResponse, UpdateInstitutionError, ThrowOnError>({
            ...options,
            url: '/institutions/{code}',
            responseTransformer: UpdateInstitutionResponseTransformer
        });
    }
    
    /**
     * List persons
     */
    public static listPersons<ThrowOnError extends boolean = false>(options?: Options<ListPersonsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListPersonsResponse, ListPersonsError, ThrowOnError>({
            ...options,
            url: '/persons',
            responseTransformer: ListPersonsResponseTransformer
        });
    }
    
    /**
     * Create person
     */
    public static createPerson<ThrowOnError extends boolean = false>(options: Options<CreatePersonData, ThrowOnError>) {
        return (options?.client ?? client).post<CreatePersonResponse, CreatePersonError, ThrowOnError>({
            ...options,
            url: '/persons',
            responseTransformer: CreatePersonResponseTransformer
        });
    }
    
    /**
     * Delete person
     */
    public static deletePerson<ThrowOnError extends boolean = false>(options: Options<DeletePersonData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeletePersonResponse, DeletePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}',
            responseTransformer: DeletePersonResponseTransformer
        });
    }
    
    /**
     * Update person
     */
    public static updatePerson<ThrowOnError extends boolean = false>(options: Options<UpdatePersonData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdatePersonResponse, UpdatePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}',
            responseTransformer: UpdatePersonResponseTransformer
        });
    }
    
    /**
     * Invite person
     * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
     */
    public static invitePerson<ThrowOnError extends boolean = false>(options: Options<InvitePersonData, ThrowOnError>) {
        return (options?.client ?? client).post<InvitePersonResponse, InvitePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}/invite'
        });
    }
    
}

export class PersonService {
    /**
     * List persons
     */
    public static listPersons<ThrowOnError extends boolean = false>(options?: Options<ListPersonsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListPersonsResponse, ListPersonsError, ThrowOnError>({
            ...options,
            url: '/persons',
            responseTransformer: ListPersonsResponseTransformer
        });
    }
    
    /**
     * Create person
     */
    public static createPerson<ThrowOnError extends boolean = false>(options: Options<CreatePersonData, ThrowOnError>) {
        return (options?.client ?? client).post<CreatePersonResponse, CreatePersonError, ThrowOnError>({
            ...options,
            url: '/persons',
            responseTransformer: CreatePersonResponseTransformer
        });
    }
    
    /**
     * Delete person
     */
    public static deletePerson<ThrowOnError extends boolean = false>(options: Options<DeletePersonData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeletePersonResponse, DeletePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}',
            responseTransformer: DeletePersonResponseTransformer
        });
    }
    
    /**
     * Update person
     */
    public static updatePerson<ThrowOnError extends boolean = false>(options: Options<UpdatePersonData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdatePersonResponse, UpdatePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}',
            responseTransformer: UpdatePersonResponseTransformer
        });
    }
    
    /**
     * Invite person
     * Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.
     */
    public static invitePerson<ThrowOnError extends boolean = false>(options: Options<InvitePersonData, ThrowOnError>) {
        return (options?.client ?? client).post<InvitePersonResponse, InvitePersonError, ThrowOnError>({
            ...options,
            url: '/persons/{id}/invite'
        });
    }
    
}

export class ReferencesService {
    /**
     * Retrieve article infos from DOI
     */
    public static crossref<ThrowOnError extends boolean = false>(options: Options<CrossrefData, ThrowOnError>) {
        return (options?.client ?? client).get<CrossrefResponse, CrossrefError, ThrowOnError>({
            ...options,
            url: '/crossref'
        });
    }
    
    /**
     * List articles
     */
    public static listArticles<ThrowOnError extends boolean = false>(options?: Options<ListArticlesData, ThrowOnError>) {
        return (options?.client ?? client).get<ListArticlesResponse, ListArticlesError, ThrowOnError>({
            ...options,
            url: '/references',
            responseTransformer: ListArticlesResponseTransformer
        });
    }
    
    /**
     * Create article
     */
    public static createArticle<ThrowOnError extends boolean = false>(options: Options<CreateArticleData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateArticleResponse, CreateArticleError, ThrowOnError>({
            ...options,
            url: '/references',
            responseTransformer: CreateArticleResponseTransformer
        });
    }
    
    /**
     * Delete article
     */
    public static deleteArticle<ThrowOnError extends boolean = false>(options: Options<DeleteArticleData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteArticleResponse, DeleteArticleError, ThrowOnError>({
            ...options,
            url: '/references/{code}',
            responseTransformer: DeleteArticleResponseTransformer
        });
    }
    
    /**
     * Update article
     */
    public static updateArticle<ThrowOnError extends boolean = false>(options: Options<UpdateArticleData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateArticleResponse, UpdateArticleError, ThrowOnError>({
            ...options,
            url: '/references/{code}',
            responseTransformer: UpdateArticleResponseTransformer
        });
    }
    
}

export class SamplesService {
    /**
     * List bio-material
     * Both internal and external
     */
    public static listBioMaterial<ThrowOnError extends boolean = false>(options?: Options<ListBioMaterialData, ThrowOnError>) {
        return (options?.client ?? client).get<ListBioMaterialResponse, ListBioMaterialError, ThrowOnError>({
            ...options,
            url: '/bio-material',
            responseTransformer: ListBioMaterialResponseTransformer
        });
    }
    
    /**
     * Delete bio-material
     * Delete any (internal/external) bio-material record by its code
     */
    public static deleteBioMaterial<ThrowOnError extends boolean = false>(options: Options<DeleteBioMaterialData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteBioMaterialResponse, DeleteBioMaterialError, ThrowOnError>({
            ...options,
            url: '/bio-material/{code}',
            responseTransformer: DeleteBioMaterialResponseTransformer
        });
    }
    
    /**
     * Get bio-material
     * Both internal and external
     */
    public static getBioMaterial<ThrowOnError extends boolean = false>(options: Options<GetBioMaterialData, ThrowOnError>) {
        return (options?.client ?? client).get<GetBioMaterialResponse, GetBioMaterialError, ThrowOnError>({
            ...options,
            url: '/bio-material/{code}',
            responseTransformer: GetBioMaterialResponseTransformer
        });
    }
    
}

export class SamplingService {
    /**
     * List abiotic parameters
     */
    public static listAbioticParameters<ThrowOnError extends boolean = false>(options?: Options<ListAbioticParametersData, ThrowOnError>) {
        return (options?.client ?? client).get<ListAbioticParametersResponse, ListAbioticParametersError, ThrowOnError>({
            ...options,
            url: '/abiotic',
            responseTransformer: ListAbioticParametersResponseTransformer
        });
    }
    
    /**
     * Create abiotic parameter
     */
    public static createAbioticParameter<ThrowOnError extends boolean = false>(options: Options<CreateAbioticParameterData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateAbioticParameterResponse, CreateAbioticParameterError, ThrowOnError>({
            ...options,
            url: '/abiotic',
            responseTransformer: CreateAbioticParameterResponseTransformer
        });
    }
    
    /**
     * Delete abiotic parameter
     */
    public static deleteAbioticParameter<ThrowOnError extends boolean = false>(options: Options<DeleteAbioticParameterData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteAbioticParameterResponse, DeleteAbioticParameterError, ThrowOnError>({
            ...options,
            url: '/abiotic/{code}',
            responseTransformer: DeleteAbioticParameterResponseTransformer
        });
    }
    
    /**
     * Update abiotic parameter
     */
    public static updateAbioticParameter<ThrowOnError extends boolean = false>(options: Options<UpdateAbioticParameterData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateAbioticParameterResponse, UpdateAbioticParameterError, ThrowOnError>({
            ...options,
            url: '/abiotic/{code}',
            responseTransformer: UpdateAbioticParameterResponseTransformer
        });
    }
    
    /**
     * List access points
     */
    public static getAccessPoints<ThrowOnError extends boolean = false>(options?: Options<GetAccessPointsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAccessPointsResponse, GetAccessPointsError, ThrowOnError>({
            ...options,
            url: '/access-points'
        });
    }
    
    /**
     * List fixatives
     */
    public static listFixatives<ThrowOnError extends boolean = false>(options?: Options<ListFixativesData, ThrowOnError>) {
        return (options?.client ?? client).get<ListFixativesResponse, ListFixativesError, ThrowOnError>({
            ...options,
            url: '/fixatives',
            responseTransformer: ListFixativesResponseTransformer
        });
    }
    
    /**
     * Create fixative
     */
    public static createFixative<ThrowOnError extends boolean = false>(options: Options<CreateFixativeData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateFixativeResponse, CreateFixativeError, ThrowOnError>({
            ...options,
            url: '/fixatives',
            responseTransformer: CreateFixativeResponseTransformer
        });
    }
    
    /**
     * Delete fixative
     */
    public static deleteFixative<ThrowOnError extends boolean = false>(options: Options<DeleteFixativeData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteFixativeResponse, DeleteFixativeError, ThrowOnError>({
            ...options,
            url: '/fixatives/{code}',
            responseTransformer: DeleteFixativeResponseTransformer
        });
    }
    
    /**
     * Update fixative
     */
    public static updateFixative<ThrowOnError extends boolean = false>(options: Options<UpdateFixativeData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateFixativeResponse, UpdateFixativeError, ThrowOnError>({
            ...options,
            url: '/fixatives/{code}',
            responseTransformer: UpdateFixativeResponseTransformer
        });
    }
    
    /**
     * List sampling methods
     */
    public static listSamplingMethods<ThrowOnError extends boolean = false>(options?: Options<ListSamplingMethodsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListSamplingMethodsResponse, ListSamplingMethodsError, ThrowOnError>({
            ...options,
            url: '/sampling-methods',
            responseTransformer: ListSamplingMethodsResponseTransformer
        });
    }
    
    /**
     * Create sampling method
     */
    public static createSamplingMethod<ThrowOnError extends boolean = false>(options: Options<CreateSamplingMethodData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateSamplingMethodResponse, CreateSamplingMethodError, ThrowOnError>({
            ...options,
            url: '/sampling-methods',
            responseTransformer: CreateSamplingMethodResponseTransformer
        });
    }
    
    /**
     * Delete sampling method
     */
    public static deleteSamplingMethod<ThrowOnError extends boolean = false>(options: Options<DeleteSamplingMethodData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteSamplingMethodResponse, DeleteSamplingMethodError, ThrowOnError>({
            ...options,
            url: '/sampling-methods/{code}',
            responseTransformer: DeleteSamplingMethodResponseTransformer
        });
    }
    
    /**
     * Update sampling method
     */
    public static updateSamplingMethod<ThrowOnError extends boolean = false>(options: Options<UpdateSamplingMethodData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateSamplingMethodResponse, UpdateSamplingMethodError, ThrowOnError>({
            ...options,
            url: '/sampling-methods/{code}',
            responseTransformer: UpdateSamplingMethodResponseTransformer
        });
    }
    
    /**
     * Create sampling action
     */
    public static createSampling<ThrowOnError extends boolean = false>(options: Options<CreateSamplingData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateSamplingResponse, CreateSamplingError, ThrowOnError>({
            ...options,
            url: '/samplings',
            responseTransformer: CreateSamplingResponseTransformer
        });
    }
    
    /**
     * Delete sampling action
     */
    public static deleteSampling<ThrowOnError extends boolean = false>(options: Options<DeleteSamplingData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteSamplingResponse, DeleteSamplingError, ThrowOnError>({
            ...options,
            url: '/samplings/{id}',
            responseTransformer: DeleteSamplingResponseTransformer
        });
    }
    
    /**
     * Update sampling action
     */
    public static updateSampling<ThrowOnError extends boolean = false>(options: Options<UpdateSamplingData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateSamplingResponse, UpdateSamplingError, ThrowOnError>({
            ...options,
            url: '/samplings/{id}',
            responseTransformer: UpdateSamplingResponseTransformer
        });
    }
    
}

export class SequencesService {
    /**
     * List genes
     */
    public static listGenes<ThrowOnError extends boolean = false>(options?: Options<ListGenesData, ThrowOnError>) {
        return (options?.client ?? client).get<ListGenesResponse, ListGenesError, ThrowOnError>({
            ...options,
            url: '/genes',
            responseTransformer: ListGenesResponseTransformer
        });
    }
    
    /**
     * Create gene
     */
    public static createGene<ThrowOnError extends boolean = false>(options: Options<CreateGeneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateGeneResponse, CreateGeneError, ThrowOnError>({
            ...options,
            url: '/genes',
            responseTransformer: CreateGeneResponseTransformer
        });
    }
    
    /**
     * Delete gene
     */
    public static deleteGene<ThrowOnError extends boolean = false>(options: Options<DeleteGeneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteGeneResponse, DeleteGeneError, ThrowOnError>({
            ...options,
            url: '/genes/{code}',
            responseTransformer: DeleteGeneResponseTransformer
        });
    }
    
    /**
     * Update gene
     */
    public static updateGene<ThrowOnError extends boolean = false>(options: Options<UpdateGeneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateGeneResponse, UpdateGeneError, ThrowOnError>({
            ...options,
            url: '/genes/{code}',
            responseTransformer: UpdateGeneResponseTransformer
        });
    }
    
}

export class SettingsService {
    /**
     * Email settings
     */
    public static emailSettings<ThrowOnError extends boolean = false>(options?: Options<EmailSettingsData, ThrowOnError>) {
        return (options?.client ?? client).get<EmailSettingsResponse, EmailSettingsError, ThrowOnError>({
            ...options,
            url: '/settings/emailing'
        });
    }
    
    /**
     * Update email settings
     */
    public static updateEmailSettings<ThrowOnError extends boolean = false>(options: Options<UpdateEmailSettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<UpdateEmailSettingsResponse, UpdateEmailSettingsError, ThrowOnError>({
            ...options,
            url: '/settings/emailing'
        });
    }
    
    /**
     * Test SMTP connection
     */
    public static testSmtp<ThrowOnError extends boolean = false>(options: Options<TestSmtpData, ThrowOnError>) {
        return (options?.client ?? client).post<TestSmtpResponse, TestSmtpError, ThrowOnError>({
            ...options,
            url: '/settings/emailing/test-dial'
        });
    }
    
    /**
     * Set app icon
     */
    public static setAppIcon<ThrowOnError extends boolean = false>(options?: Options<SetAppIconData, ThrowOnError>) {
        return (options?.client ?? client).post<SetAppIconResponse, SetAppIconError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/settings/icon'
        });
    }
    
    /**
     * Instance settings
     */
    public static instanceSettings<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<InstanceSettingsResponse, InstanceSettingsError, ThrowOnError>({
            ...options,
            url: '/settings/instance'
        });
    }
    
    /**
     * Update instance settings
     */
    public static updateInstanceSettings<ThrowOnError extends boolean = false>(options: Options<UpdateInstanceSettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<UpdateInstanceSettingsResponse, UpdateInstanceSettingsError, ThrowOnError>({
            ...options,
            url: '/settings/instance'
        });
    }
    
    /**
     * Security settings
     */
    public static securitySettings<ThrowOnError extends boolean = false>(options?: Options<SecuritySettingsData, ThrowOnError>) {
        return (options?.client ?? client).get<SecuritySettingsResponse, SecuritySettingsError, ThrowOnError>({
            ...options,
            url: '/settings/security'
        });
    }
    
    /**
     * Update security settings
     */
    public static updateSecuritySettings<ThrowOnError extends boolean = false>(options: Options<UpdateSecuritySettingsData, ThrowOnError>) {
        return (options?.client ?? client).post<UpdateSecuritySettingsResponse, UpdateSecuritySettingsError, ThrowOnError>({
            ...options,
            url: '/settings/security'
        });
    }
    
}

export class TaxonomyService {
    /**
     * Get taxonomy
     */
    public static getTaxonomy<ThrowOnError extends boolean = false>(options?: Options<GetTaxonomyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTaxonomyResponse, GetTaxonomyError, ThrowOnError>({
            ...options,
            url: '/taxonomy',
            responseTransformer: GetTaxonomyResponseTransformer
        });
    }
    
    /**
     * List taxa
     */
    public static listTaxa<ThrowOnError extends boolean = false>(options?: Options<ListTaxaData, ThrowOnError>) {
        return (options?.client ?? client).get<ListTaxaResponse, ListTaxaError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa',
            responseTransformer: ListTaxaResponseTransformer
        });
    }
    
    /**
     * Create taxon
     */
    public static createTaxon<ThrowOnError extends boolean = false>(options: Options<CreateTaxonData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateTaxonResponse, CreateTaxonError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa',
            responseTransformer: CreateTaxonResponseTransformer
        });
    }
    
    /**
     * Delete taxon
     */
    public static deleteTaxon<ThrowOnError extends boolean = false>(options: Options<DeleteTaxonData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteTaxonResponse, DeleteTaxonError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa/{code}',
            responseTransformer: DeleteTaxonResponseTransformer
        });
    }
    
    /**
     * Get taxon
     */
    public static getTaxon<ThrowOnError extends boolean = false>(options: Options<GetTaxonData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTaxonResponse, GetTaxonError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa/{code}',
            responseTransformer: GetTaxonResponseTransformer
        });
    }
    
    /**
     * Update taxon
     */
    public static updateTaxon<ThrowOnError extends boolean = false>(options: Options<UpdateTaxonData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateTaxonResponse, UpdateTaxonError, ThrowOnError>({
            ...options,
            url: '/taxonomy/taxa/{code}',
            responseTransformer: UpdateTaxonResponseTransformer
        });
    }
    
}

export class TaxonomyGbifService {
    /**
     * List GBIF anchor clades
     */
    public static listAnchors<ThrowOnError extends boolean = false>(options?: Options<ListAnchorsData, ThrowOnError>) {
        return (options?.client ?? client).get<ListAnchorsResponse, ListAnchorsError, ThrowOnError>({
            ...options,
            url: '/anchors/',
            responseTransformer: ListAnchorsResponseTransformer
        });
    }
    
    /**
     * Import GBIF clade
     */
    public static importGbif<ThrowOnError extends boolean = false>(options: Options<ImportGbifData, ThrowOnError>) {
        return (options?.client ?? client).put<ImportGbifResponse, ImportGbifError, ThrowOnError>({
            ...options,
            url: '/import/taxonomy'
        });
    }
    
    /**
     * Monitor GBIF taxonomy imports
     */
    public static monitorGbif<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<MonitorGbifResponse, MonitorGbifError, ThrowOnError>({
            ...options,
            url: '/import/taxonomy/monitor'
        });
    }
    
}