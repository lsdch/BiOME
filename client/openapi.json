{
	"components": {
		"schemas": {
			"AuthenticationResponse": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/AuthenticationResponse.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"User": {
						"$ref": "#/components/schemas/User"
					},
					"messages": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"token": {
						"description": "JSON Web Token",
						"examples": [
							"xxxxx.yyyyy.zzzzz"
						],
						"type": "string"
					}
				},
				"required": [
					"messages",
					"User",
					"token"
				],
				"type": "object"
			},
			"Country": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"examples": [
							"DE"
						],
						"type": "string"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"name": {
						"examples": [
							"Germany"
						],
						"type": "string"
					},
					"nbLocalities": {
						"format": "int64",
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"id",
					"name",
					"code",
					"nbLocalities"
				],
				"type": "object"
			},
			"CurrentUserResponse": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/CurrentUserResponse.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"token": {
						"description": "JSON Web Token",
						"examples": [
							"xxxxx.yyyyy.zzzzz"
						],
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"user",
					"token"
				],
				"type": "object"
			},
			"ErrorDetail": {
				"additionalProperties": false,
				"properties": {
					"location": {
						"description": "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
						"type": "string"
					},
					"message": {
						"description": "Error message text",
						"type": "string"
					},
					"value": {
						"description": "The value at the given location"
					}
				},
				"type": "object"
			},
			"ErrorModel": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ErrorModel.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"detail": {
						"description": "A human-readable explanation specific to this occurrence of the problem.",
						"examples": [
							"Property foo is required but is missing."
						],
						"type": "string"
					},
					"errors": {
						"description": "Optional list of individual error details",
						"items": {
							"$ref": "#/components/schemas/ErrorDetail"
						},
						"type": "array"
					},
					"instance": {
						"description": "A URI reference that identifies the specific occurrence of the problem.",
						"examples": [
							"https://example.com/error-log/abc123"
						],
						"format": "uri",
						"type": "string"
					},
					"status": {
						"description": "HTTP status code",
						"examples": [
							400
						],
						"format": "int64",
						"type": "integer"
					},
					"title": {
						"description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
						"examples": [
							"Bad Request"
						],
						"type": "string"
					},
					"type": {
						"default": "about:blank",
						"description": "A URI reference to human-readable documentation for the error.",
						"examples": [
							"https://example.com/errors/example"
						],
						"format": "uri",
						"type": "string"
					}
				},
				"type": "object"
			},
			"ImportProcess": {
				"additionalProperties": false,
				"properties": {
					"GBIF_ID": {
						"format": "int64",
						"type": "integer"
					},
					"done": {
						"type": "boolean"
					},
					"error": {},
					"expected": {
						"format": "int64",
						"type": "integer"
					},
					"imported": {
						"format": "int64",
						"type": "integer"
					},
					"name": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"type": "string"
					},
					"started": {
						"format": "date-time",
						"type": "string"
					}
				},
				"required": [
					"name",
					"GBIF_ID",
					"expected",
					"imported",
					"rank",
					"started",
					"done",
					"error"
				],
				"type": "object"
			},
			"ImportRequestGBIF": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ImportRequestGBIF.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"children": {
						"description": "Import whole clade, including the taxon descendants",
						"type": "boolean"
					},
					"key": {
						"description": "Target GBIF taxon key",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"key",
					"children"
				],
				"type": "object"
			},
			"Institution": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Institution.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"LEHNA"
						],
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/InstitutionKind",
						"examples": [
							"Lab"
						],
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"type": "string"
					},
					"people": {
						"description": "Known members of this institution",
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					}
				},
				"required": [
					"meta",
					"id",
					"name",
					"code",
					"kind"
				],
				"type": "object"
			},
			"InstitutionInner": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"examples": [
							"LEHNA"
						],
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/InstitutionKind",
						"examples": [
							"Lab"
						],
						"type": "string"
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"code",
					"kind"
				],
				"type": "object"
			},
			"InstitutionInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InstitutionInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"LEHNA"
						],
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/InstitutionKind",
						"examples": [
							"Lab"
						],
						"type": "string"
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"type": "string"
					}
				},
				"required": [
					"name",
					"code",
					"kind"
				],
				"type": "object"
			},
			"InstitutionKind": {
				"enum": [
					"Lab",
					"FundingAgency",
					"SequencingPlatform",
					"Other"
				],
				"title": "InstitutionKind",
				"type": "string"
			},
			"InstitutionUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InstitutionUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"LEHNA"
						],
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/InstitutionKind",
						"examples": [
							"Lab"
						],
						"type": "string"
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"type": "string"
					}
				},
				"type": "object"
			},
			"InvitationInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InvitationInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"dest": {
						"format": "email",
						"type": "string"
					},
					"handler": {
						"$ref": "#/components/schemas/URL",
						"description": "A URL with a path parameter '{token}', which implements the UI to validate the invitation token and fill a registration form.",
						"examples": [
							"http://example.com/register/{token}"
						]
					},
					"role": {
						"$ref": "#/components/schemas/UserRole",
						"type": "string"
					}
				},
				"required": [
					"dest",
					"role"
				],
				"type": "object"
			},
			"InvitationLink": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InvitationLink.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"invitation_link": {
						"$ref": "#/components/schemas/URL",
						"description": "The generated URL containing a registration token that can be shared to the invitee."
					}
				},
				"required": [
					"invitation_link"
				],
				"type": "object"
			},
			"Meta": {
				"additionalProperties": false,
				"properties": {
					"created": {
						"format": "date-time",
						"type": "string"
					},
					"created_by": {
						"$ref": "#/components/schemas/UserShortIdentity"
					},
					"created_by_user": {
						"$ref": "#/components/schemas/OptionalUser"
					},
					"last_updated": {
						"format": "date-time",
						"type": "string"
					},
					"modified": {
						"format": "date-time",
						"type": "string"
					},
					"updated_by": {
						"$ref": "#/components/schemas/UserShortIdentity"
					},
					"updated_by_user": {
						"$ref": "#/components/schemas/OptionalUser"
					}
				},
				"required": [
					"created",
					"modified",
					"last_updated",
					"created_by_user",
					"updated_by_user",
					"created_by",
					"updated_by"
				],
				"type": "object"
			},
			"OptionalPerson": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole",
						"type": "string"
					}
				},
				"required": [
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"OptionalUser": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_confirmed": {
						"type": "boolean"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"identity": {
						"$ref": "#/components/schemas/OptionalPerson"
					},
					"is_active": {
						"type": "boolean"
					},
					"login": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole",
						"type": "string"
					}
				},
				"required": [
					"identity",
					"id",
					"email",
					"login",
					"role",
					"email_confirmed",
					"is_active"
				],
				"type": "object"
			},
			"OptionalUserInner": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_confirmed": {
						"type": "boolean"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"is_active": {
						"type": "boolean"
					},
					"login": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole",
						"type": "string"
					}
				},
				"required": [
					"id",
					"email",
					"login",
					"role",
					"email_confirmed",
					"is_active"
				],
				"type": "object"
			},
			"PasswordInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PasswordInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"password_confirmation": {
						"type": "string"
					}
				},
				"required": [
					"password",
					"password_confirmation"
				],
				"type": "object"
			},
			"Person": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Person.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"institutions": {
						"items": {
							"$ref": "#/components/schemas/InstitutionInner"
						},
						"type": "array"
					},
					"last_name": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/OptionalUserInner"
					}
				},
				"required": [
					"institutions",
					"meta",
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PersonInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PersonInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"institutions": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"last_name": {
						"type": "string"
					}
				},
				"required": [
					"institutions",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PersonStruct": {
				"additionalProperties": false,
				"properties": {
					"first_name": {
						"type": "string"
					},
					"institution": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					}
				},
				"required": [
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PersonUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PersonUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"institutions": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"last_name": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"PersonUser": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/OptionalUserInner"
					}
				},
				"required": [
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"RegisterInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/RegisterInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"handler": {
						"$ref": "#/components/schemas/URL",
						"description": "A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter."
					},
					"identity": {
						"$ref": "#/components/schemas/PersonStruct"
					},
					"motive": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/UserInput"
					}
				},
				"required": [
					"user",
					"identity",
					"motive"
				],
				"type": "object"
			},
			"RequestPasswordResetInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/RequestPasswordResetInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"handler": {
						"$ref": "#/components/schemas/URL",
						"description": "A URL where a form to set the new password is available"
					}
				},
				"required": [
					"email"
				],
				"type": "object"
			},
			"ResendEmailConfirmationInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ResendEmailConfirmationInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"handler": {
						"$ref": "#/components/schemas/URL",
						"description": "A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter."
					}
				},
				"required": [
					"email"
				],
				"type": "object"
			},
			"Taxon": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Taxon.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						],
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						],
						"type": "string"
					}
				},
				"required": [
					"id",
					"GBIF_ID",
					"code",
					"authorship",
					"anchor",
					"comment",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						],
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						],
						"type": "string"
					}
				},
				"required": [
					"parent",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonRank": {
				"enum": [
					"Kingdom",
					"Phylum",
					"Class",
					"Family",
					"Genus",
					"Species",
					"Subspecies"
				],
				"title": "TaxonRank",
				"type": "string"
			},
			"TaxonStatus": {
				"enum": [
					"Accepted",
					"Synonym",
					"Unclassified"
				],
				"title": "TaxonStatus",
				"type": "string"
			},
			"TaxonUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"format": "int32",
						"type": "integer"
					},
					"authorship": {
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"parent": {
						"type": "string"
					},
					"rank": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"TaxonWithRelatives": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonWithRelatives.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"$ref": "#/components/schemas/TaxonWithRelativesParentStruct"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						],
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						],
						"type": "string"
					}
				},
				"required": [
					"parent",
					"id",
					"GBIF_ID",
					"code",
					"authorship",
					"anchor",
					"comment",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonWithRelativesParentStruct": {
				"additionalProperties": false,
				"properties": {
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						],
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						],
						"type": "string"
					}
				},
				"required": [
					"id",
					"GBIF_ID",
					"code",
					"authorship",
					"anchor",
					"comment",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"URL": {
				"format": "uri",
				"type": [
					"string",
					"null"
				]
			},
			"UpdatePasswordInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/UpdatePasswordInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"new_password": {
						"$ref": "#/components/schemas/PasswordInput"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"password",
					"new_password"
				],
				"type": "object"
			},
			"User": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_confirmed": {
						"type": "boolean"
					},
					"id": {
						"contentEncoding": "base64",
						"format": "uuid",
						"type": "string"
					},
					"identity": {
						"$ref": "#/components/schemas/OptionalPerson"
					},
					"is_active": {
						"type": "boolean"
					},
					"login": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole",
						"type": "string"
					}
				},
				"required": [
					"identity",
					"id",
					"email",
					"login",
					"role",
					"email_confirmed",
					"is_active"
				],
				"type": "object"
			},
			"UserCredentials": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/UserCredentials.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"identifier": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"password"
				],
				"type": "object"
			},
			"UserInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/UserInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"password_confirmation": {
						"type": "string"
					}
				},
				"required": [
					"login",
					"email",
					"password",
					"password_confirmation"
				],
				"type": "object"
			},
			"UserRole": {
				"enum": [
					"Visitor",
					"Contributor",
					"Maintainer",
					"Admin"
				],
				"title": "UserRole",
				"type": "string"
			},
			"UserShortIdentity": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"alias"
				],
				"type": "object"
			}
		},
		"securitySchemes": {
			"bearer": {
				"bearerFormat": "JWT",
				"scheme": "bearer",
				"type": "http"
			}
		}
	},
	"info": {
		"contact": {
			"email": "louis.duchemin@univ-lyon1.fr",
			"name": "Louis Duchemin"
		},
		"description": "DarCo Prototype API",
		"title": "Proto API",
		"version": "1.0"
	},
	"openapi": "3.1.0",
	"paths": {
		"/account": {
			"get": {
				"description": "Get infos of currently authenticated user account",
				"operationId": "CurrentUser",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentUserResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Authorization": {
								"schema": {
									"description": "Session JWT",
									"type": "string"
								}
							}
						}
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Current user",
				"tags": [
					"Account"
				]
			}
		},
		"/account/email-confirmation": {
			"get": {
				"description": "Confirms the validity of an e-mail address associated to an account, using a token issued at the end of user registration.",
				"operationId": "ConfirmEmail",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "token",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Set-Cookie": {
								"schema": {
									"description": "Session cookie storing JWT",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Confirm e-mail",
				"tags": [
					"Account"
				]
			}
		},
		"/account/email-confirmation/resend": {
			"post": {
				"description": "Sends again a verification link for the provided e-mail address, if it matches a currently not verified user account.",
				"operationId": "ResendEmailConfirmation",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResendEmailConfirmationInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Resend e-mail verification link",
				"tags": [
					"Account"
				]
			}
		},
		"/account/forgotten-password": {
			"post": {
				"description": "Requests sending a link containing a password reset token to your account email address. The link target can be provided by the client in the request body, or defaults to the API endpoint: `/api/v1/account/password-reset/{token}`. In this case, setting the new password is expected to be done programatically, e.g. through a curl request.",
				"operationId": "RequestPasswordReset",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestPasswordResetInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Request password reset",
				"tags": [
					"Account"
				]
			}
		},
		"/account/login": {
			"post": {
				"description": "Authenticate using user credentials",
				"operationId": "Login",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserCredentials"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Set-Cookie": {
								"schema": {
									"description": "Session cookie storing JWT",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Login",
				"tags": [
					"Account"
				]
			}
		},
		"/account/logout": {
			"post": {
				"description": "Logout from current user session by revoking session cookies",
				"operationId": "Logout",
				"responses": {
					"204": {
						"description": "No Content",
						"headers": {
							"Domain": {
								"schema": {
									"type": "string"
								}
							},
							"Expires": {
								"schema": {
									"type": "string"
								}
							},
							"HttpOnly": {
								"schema": {
									"type": "boolean"
								}
							},
							"MaxAge": {
								"schema": {
									"format": "int64",
									"type": "integer"
								}
							},
							"Name": {
								"schema": {
									"type": "string"
								}
							},
							"Path": {
								"schema": {
									"type": "string"
								}
							},
							"Raw": {
								"schema": {
									"type": "string"
								}
							},
							"RawExpires": {
								"schema": {
									"type": "string"
								}
							},
							"SameSite": {
								"schema": {
									"format": "int64",
									"type": "integer"
								}
							},
							"Secure": {
								"schema": {
									"type": "boolean"
								}
							},
							"Set-Cookie": {
								"schema": {
									"type": "string"
								}
							},
							"Unparsed": {
								"schema": {
									"type": "string"
								}
							},
							"Value": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Logout",
				"tags": [
					"Account"
				]
			}
		},
		"/account/password": {
			"post": {
				"description": "Updates password of currently authenticated user",
				"operationId": "UpdatePassword",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatePasswordInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update password",
				"tags": [
					"Account"
				]
			}
		},
		"/account/password-reset/{token}": {
			"get": {
				"description": "Verifies that the password token is valid and can be used to reset a password",
				"operationId": "ValidatePasswordToken",
				"parameters": [
					{
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Validate password token",
				"tags": [
					"Account"
				]
			},
			"post": {
				"description": "Set a new password using a previously issued reset token",
				"operationId": "ResetPassword",
				"parameters": [
					{
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PasswordInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Reset password",
				"tags": [
					"Account"
				]
			}
		},
		"/account/register": {
			"post": {
				"description": "Register a new account that is initially pending, and needs to be activated by an administrator. An email is sent to the registered e-mail address with a verification link. The target URL can be set by the client, otherwise it defaults to the API endpoint: `/api/v1/account/email-confirmation`",
				"operationId": "Register",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegisterInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Register new account",
				"tags": [
					"Account"
				]
			}
		},
		"/account/register/{token}": {
			"post": {
				"description": "Register an account with pre-assigned role and identity, using an invitation token",
				"operationId": "ClaimInvitation",
				"parameters": [
					{
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Set-Cookie": {
								"schema": {
									"description": "Session cookie storing JWT",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Claim invitation",
				"tags": [
					"Account"
				]
			}
		},
		"/anchors/": {
			"get": {
				"operationId": "ListAnchors",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Taxon"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List GBIF anchor clades",
				"tags": [
					"Taxonomy GBIF"
				]
			}
		},
		"/countries": {
			"get": {
				"operationId": "ListCountries",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Country"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List countries",
				"tags": [
					"Location",
					"Countries"
				]
			}
		},
		"/import/taxonomy": {
			"put": {
				"operationId": "ImportGBIF",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImportRequestGBIF"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "Import GBIF clade",
				"tags": [
					"Taxonomy GBIF"
				]
			}
		},
		"/import/taxonomy/monitor": {
			"get": {
				"operationId": "MonitorGBIF",
				"responses": {
					"200": {
						"content": {
							"text/event-stream": {
								"schema": {
									"description": "Each oneOf object in the array represents one possible Server Sent Events (SSE) message, serialized as UTF-8 text according to the SSE specification.",
									"items": {
										"oneOf": [
											{
												"properties": {
													"data": {
														"additionalProperties": {
															"$ref": "#/components/schemas/ImportProcess"
														},
														"type": "object"
													},
													"event": {
														"const": "state",
														"description": "The event name.",
														"type": "string"
													},
													"id": {
														"description": "The event ID.",
														"type": "integer"
													},
													"retry": {
														"description": "The retry time in milliseconds.",
														"type": "integer"
													}
												},
												"required": [
													"data",
													"event"
												],
												"title": "Event state",
												"type": "object"
											}
										]
									},
									"title": "Server Sent Events",
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "Monitor GBIF taxonomy imports",
				"tags": [
					"Taxonomy GBIF"
				]
			}
		},
		"/institutions": {
			"get": {
				"operationId": "ListInstitutions",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Institution"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List institutions",
				"tags": [
					"People",
					"Institution"
				]
			},
			"post": {
				"operationId": "CreateInstitution",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InstitutionInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Institution"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create institution",
				"tags": [
					"People",
					"Institution"
				]
			}
		},
		"/institutions/{code}": {
			"delete": {
				"operationId": "DeleteInstitution",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Institution"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete institution",
				"tags": [
					"People",
					"Institution"
				]
			},
			"patch": {
				"operationId": "UpdateInstitution",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InstitutionUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Institution"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update institution",
				"tags": [
					"People",
					"Institution"
				]
			}
		},
		"/persons": {
			"get": {
				"operationId": "ListPersons",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Person"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List persons",
				"tags": [
					"People",
					"Person"
				]
			},
			"post": {
				"operationId": "CreatePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create person",
				"tags": [
					"People",
					"Person"
				]
			}
		},
		"/persons/{id}": {
			"delete": {
				"operationId": "DeletePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"contentEncoding": "base64",
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete person",
				"tags": [
					"People",
					"Person"
				]
			},
			"patch": {
				"operationId": "UpdatePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"contentEncoding": "base64",
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update person",
				"tags": [
					"People",
					"Person"
				]
			}
		},
		"/persons/{id}/invite": {
			"post": {
				"description": "Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.",
				"operationId": "InvitePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"contentEncoding": "base64",
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InvitationInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvitationLink"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Invite person",
				"tags": [
					"People",
					"Person"
				]
			}
		},
		"/taxonomy": {
			"get": {
				"operationId": "ListTaxa",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "pattern",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "rank",
						"schema": {
							"$ref": "#/components/schemas/TaxonRank",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "status",
						"schema": {
							"$ref": "#/components/schemas/TaxonStatus",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "anchor",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Taxon"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List taxa",
				"tags": [
					"Taxonomy"
				]
			},
			"post": {
				"operationId": "CreateTaxon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TaxonInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaxonWithRelatives"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create taxon",
				"tags": [
					"Taxonomy"
				]
			}
		},
		"/taxonomy/{code}": {
			"delete": {
				"operationId": "DeleteTaxon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Taxon"
								}
							}
						},
						"description": "OK"
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"404": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Not Found"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete taxon",
				"tags": [
					"Taxonomy"
				]
			},
			"get": {
				"operationId": "GetTaxon",
				"parameters": [
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaxonWithRelatives"
								}
							}
						},
						"description": "OK"
					},
					"404": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Not Found"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get taxon",
				"tags": [
					"Taxonomy"
				]
			},
			"patch": {
				"operationId": "UpdateTaxon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TaxonUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaxonWithRelatives"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"404": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Not Found"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update taxon",
				"tags": [
					"Taxonomy"
				]
			}
		}
	},
	"servers": [
		{
			"url": "/api/v1"
		}
	]
}