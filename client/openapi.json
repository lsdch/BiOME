{
	"components": {
		"schemas": {
			"AbioticMeasurement": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"param": {
						"$ref": "#/components/schemas/AbioticParameter"
					},
					"value": {
						"format": "float",
						"type": "number"
					}
				},
				"required": [
					"id",
					"param",
					"value"
				],
				"type": "object"
			},
			"AbioticParameter": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/AbioticParameter.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"unit": {
						"type": "string"
					}
				},
				"required": [
					"unit",
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"AbioticParameterInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/AbioticParameterInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"unit": {
						"type": "string"
					}
				},
				"required": [
					"unit",
					"label",
					"code"
				],
				"type": "object"
			},
			"AbioticParameterUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/AbioticParameterUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"label": {
						"type": "string"
					},
					"unit": {
						"type": "string"
					}
				},
				"required": [
					"unit"
				],
				"type": "object"
			},
			"Article": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Article.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"authors": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"code": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"doi": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"journal": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"original_source": {
						"type": "boolean"
					},
					"title": {
						"type": "string"
					},
					"verbatim": {
						"type": "string"
					},
					"year": {
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"id",
					"code",
					"authors",
					"year",
					"original_source",
					"meta"
				],
				"type": "object"
			},
			"ArticleInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ArticleInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"authors": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"code": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"doi": {
						"type": "string"
					},
					"journal": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"verbatim": {
						"type": "string"
					},
					"year": {
						"format": "int32",
						"minimum": 1500,
						"type": "integer"
					}
				},
				"required": [
					"authors",
					"year"
				],
				"type": "object"
			},
			"ArticleUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ArticleUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"authors": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"code": {
						"type": "string"
					},
					"comments": {
						"type": [
							"string",
							"null"
						]
					},
					"doi": {
						"type": [
							"string",
							"null"
						]
					},
					"journal": {
						"type": [
							"string",
							"null"
						]
					},
					"title": {
						"type": [
							"string",
							"null"
						]
					},
					"verbatim": {
						"type": [
							"string",
							"null"
						]
					},
					"year": {
						"format": "int32",
						"minimum": 1500,
						"type": "integer"
					}
				},
				"type": "object"
			},
			"Assertion": {
				"additionalProperties": false,
				"properties": {
					"group": {
						"$ref": "#/components/schemas/Group"
					},
					"label": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"AuthenticationResponse": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/AuthenticationResponse.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"auth_token": {
						"description": "JSON Web Token",
						"examples": [
							"xxxxx.yyyyy.zzzzz"
						],
						"type": "string"
					},
					"auth_token_expiration": {
						"description": "Time at which auth token expires",
						"format": "date-time",
						"type": "string"
					},
					"messages": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"refresh_token": {
						"description": "Session refresh token",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"messages",
					"user",
					"auth_token",
					"refresh_token",
					"auth_token_expiration"
				],
				"type": "object"
			},
			"BibSearchResults": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/BibSearchResults.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/Message"
						},
						"type": "array"
					},
					"total": {
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"total",
					"items"
				],
				"type": "object"
			},
			"BioMatSortKey": {
				"enum": [
					"code",
					"site",
					"sampling_date",
					"identified_on",
					"taxon",
					"identified_by",
					"last_updated"
				],
				"title": "BioMatSortKey",
				"type": "string"
			},
			"BioMaterial": {
				"additionalProperties": false,
				"properties": {
					"category": {
						"$ref": "#/components/schemas/OccurrenceCategory"
					},
					"code": {
						"type": "string"
					},
					"code_history": {
						"items": {
							"$ref": "#/components/schemas/CodeHistory"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"external": {
						"$ref": "#/components/schemas/OptionalExternalBioMatSpecific"
					},
					"has_sequences": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identification": {
						"$ref": "#/components/schemas/Identification"
					},
					"is_congruent": {
						"type": "boolean"
					},
					"is_homogenous": {
						"type": "boolean"
					},
					"is_type": {
						"type": "boolean"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReference"
						},
						"type": "array"
					},
					"sampling": {
						"$ref": "#/components/schemas/SamplingInner"
					},
					"seq_consensus": {
						"$ref": "#/components/schemas/OptionalTaxon"
					}
				},
				"required": [
					"has_sequences",
					"is_homogenous",
					"is_congruent",
					"meta",
					"sampling",
					"identification",
					"id",
					"category",
					"is_type",
					"code"
				],
				"type": "object"
			},
			"BioMaterialWithDetails": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/BioMaterialWithDetails.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"category": {
						"$ref": "#/components/schemas/OccurrenceCategory"
					},
					"code": {
						"type": "string"
					},
					"code_history": {
						"items": {
							"$ref": "#/components/schemas/CodeHistory"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"event": {
						"$ref": "#/components/schemas/EventWithParticipants"
					},
					"external": {
						"$ref": "#/components/schemas/OptionalExternalBioMatSpecific"
					},
					"has_sequences": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identification": {
						"$ref": "#/components/schemas/Identification"
					},
					"is_congruent": {
						"type": "boolean"
					},
					"is_homogenous": {
						"type": "boolean"
					},
					"is_type": {
						"type": "boolean"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReference"
						},
						"type": "array"
					},
					"sampling": {
						"$ref": "#/components/schemas/Sampling"
					},
					"seq_consensus": {
						"$ref": "#/components/schemas/OptionalTaxon"
					}
				},
				"required": [
					"event",
					"has_sequences",
					"is_homogenous",
					"is_congruent",
					"meta",
					"sampling",
					"identification",
					"id",
					"category",
					"is_type",
					"code"
				],
				"type": "object"
			},
			"ClinicalTrailNumber": {
				"additionalProperties": false,
				"properties": {
					"clinical-trail-number": {
						"type": "string"
					},
					"registry": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"CodeHistory": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"type": "string"
					},
					"time": {
						"format": "date-time",
						"type": "string"
					}
				},
				"required": [
					"code",
					"time"
				],
				"type": "object"
			},
			"CompositeDate": {
				"additionalProperties": false,
				"properties": {
					"day": {
						"default": 1,
						"format": "int32",
						"maximum": 31,
						"minimum": 1,
						"type": "integer"
					},
					"month": {
						"default": 1,
						"format": "int32",
						"maximum": 12,
						"minimum": 1,
						"type": "integer"
					},
					"year": {
						"format": "int32",
						"maximum": 3000,
						"minimum": 1500,
						"type": "integer"
					}
				},
				"type": "object"
			},
			"ContentDomain": {
				"additionalProperties": false,
				"properties": {
					"crossmark-restriction": {
						"type": "boolean"
					},
					"domain": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"Coordinates": {
				"additionalProperties": false,
				"properties": {
					"latitude": {
						"examples": [
							43.5684
						],
						"format": "float",
						"maximum": 90,
						"minimum": -90,
						"type": "number"
					},
					"longitude": {
						"examples": [
							3.5678
						],
						"format": "float",
						"maximum": 180,
						"minimum": -180,
						"type": "number"
					},
					"precision": {
						"$ref": "#/components/schemas/CoordinatesPrecision",
						"description": "Where the coordinates point to"
					}
				},
				"required": [
					"precision",
					"latitude",
					"longitude"
				],
				"type": "object"
			},
			"CoordinatesPrecision": {
				"enum": [
					"\u003c100m",
					"\u003c1km",
					"\u003c10km",
					"10-100km",
					"Unknown"
				],
				"title": "CoordinatesPrecision",
				"type": "string"
			},
			"Country": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Country.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"DE"
						],
						"type": "string"
					},
					"continent": {
						"examples": [
							"Europe"
						],
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"name": {
						"examples": [
							"Germany"
						],
						"type": "string"
					},
					"subcontinent": {
						"examples": [
							"Western Europe"
						],
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"code",
					"continent",
					"subcontinent"
				],
				"type": "object"
			},
			"CountryWithSitesCount": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"examples": [
							"DE"
						],
						"type": "string"
					},
					"continent": {
						"examples": [
							"Europe"
						],
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"name": {
						"examples": [
							"Germany"
						],
						"type": "string"
					},
					"sites_count": {
						"format": "int64",
						"type": "integer"
					},
					"subcontinent": {
						"examples": [
							"Western Europe"
						],
						"type": "string"
					}
				},
				"required": [
					"sites_count",
					"id",
					"name",
					"code",
					"continent",
					"subcontinent"
				],
				"type": "object"
			},
			"CreateExternalBioMatInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/CreateExternalBioMatInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"bio_material": {
						"$ref": "#/components/schemas/ExternalBioMatInput"
					},
					"event": {
						"$ref": "#/components/schemas/EventInput"
					},
					"sampling": {
						"$ref": "#/components/schemas/SamplingInput"
					},
					"site": {
						"$ref": "#/components/schemas/SiteInput"
					}
				},
				"required": [
					"site",
					"event",
					"sampling",
					"bio_material"
				],
				"type": "object"
			},
			"CrossRefPerson": {
				"additionalProperties": false,
				"properties": {
					"ORCID": {
						"type": "string"
					},
					"affiliation": {
						"items": {
							"$ref": "#/components/schemas/Organization"
						},
						"type": "array"
					},
					"authenticated-orcid": {
						"type": "boolean"
					},
					"family": {
						"type": "string"
					},
					"given": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"prefix": {
						"type": "string"
					},
					"sequence": {
						"type": "string"
					},
					"suffix": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"CurrentUserResponse": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/CurrentUserResponse.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"auth_token": {
						"description": "JSON Web Token",
						"examples": [
							"xxxxx.yyyyy.zzzzz"
						],
						"type": "string"
					},
					"auth_token_expiration": {
						"description": "Time at which auth token expires",
						"format": "date-time",
						"type": "string"
					},
					"refresh_token": {
						"description": "Session refresh token",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"user",
					"auth_token",
					"refresh_token",
					"auth_token_expiration"
				],
				"type": "object"
			},
			"DataSource": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/DataSource.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"link_template": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"url": {
						"type": "string"
					}
				},
				"required": [
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"DataSourceInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/DataSourceInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"link_template": {
						"type": "string"
					},
					"url": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"code"
				],
				"type": "object"
			},
			"DataSourceUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/DataSourceUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"label": {
						"type": "string"
					},
					"link_template": {
						"type": [
							"string",
							"null"
						]
					},
					"url": {
						"type": [
							"string",
							"null"
						]
					}
				},
				"type": "object"
			},
			"Dataset": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Dataset.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"category": {
						"$ref": "#/components/schemas/DatasetCategory"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"maintainers": {
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"pinned": {
						"type": "boolean"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"maintainers",
					"meta",
					"id",
					"label",
					"slug",
					"pinned",
					"description",
					"category"
				],
				"type": "object"
			},
			"DatasetCategory": {
				"enum": [
					"Site",
					"Occurrence",
					"Seq"
				],
				"title": "DatasetCategory",
				"type": "string"
			},
			"DatasetInner": {
				"additionalProperties": false,
				"properties": {
					"category": {
						"$ref": "#/components/schemas/DatasetCategory"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"pinned": {
						"type": "boolean"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"label",
					"slug",
					"pinned",
					"description",
					"category"
				],
				"type": "object"
			},
			"DatasetUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/DatasetUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"label": {
						"maxLength": 32,
						"minLength": 4,
						"type": "string"
					},
					"maintainers": {
						"description": "Dataset maintainers identified by their person alias. Dataset creator is always a maintainer by default.",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"pinned": {
						"type": [
							"boolean",
							"null"
						]
					}
				},
				"type": "object"
			},
			"DateObject": {
				"additionalProperties": false,
				"properties": {
					"date-parts": {
						"items": {
							"items": {
								"format": "int64",
								"type": "integer"
							},
							"type": "array"
						},
						"type": "array"
					},
					"date-time": {
						"type": "string"
					},
					"timestamp": {
						"format": "int64",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"DatePrecision": {
				"enum": [
					"Day",
					"Month",
					"Year",
					"Unknown"
				],
				"title": "DatePrecision",
				"type": "string"
			},
			"DateRange": {
				"additionalProperties": false,
				"properties": {
					"end-date": {
						"$ref": "#/components/schemas/DateObject"
					},
					"start-date": {
						"$ref": "#/components/schemas/DateObject"
					}
				},
				"type": "object"
			},
			"DateWithPrecision": {
				"additionalProperties": false,
				"properties": {
					"date": {
						"format": "date-time",
						"type": "string"
					},
					"precision": {
						"$ref": "#/components/schemas/DatePrecision"
					}
				},
				"required": [
					"precision"
				],
				"type": "object"
			},
			"DateWithPrecisionInput": {
				"additionalProperties": false,
				"properties": {
					"date": {
						"$ref": "#/components/schemas/CompositeDate"
					},
					"precision": {
						"$ref": "#/components/schemas/DatePrecision"
					}
				},
				"required": [
					"date",
					"precision"
				],
				"type": "object"
			},
			"EmailSettings": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/EmailSettings.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"from_address": {
						"format": "email",
						"type": "string"
					},
					"from_name": {
						"type": "string"
					},
					"host": {
						"description": "SMTP domain that handles email sending",
						"format": "hostname",
						"type": "string"
					},
					"password": {
						"description": "SMTP password",
						"type": "string"
					},
					"port": {
						"description": "SMTP port",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					},
					"user": {
						"description": "SMTP login",
						"format": "uri",
						"type": "string"
					}
				},
				"required": [
					"from_name",
					"from_address",
					"host",
					"port",
					"user",
					"password"
				],
				"type": "object"
			},
			"EmailSettingsInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/EmailSettingsInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"from_address": {
						"format": "email",
						"type": "string"
					},
					"from_name": {
						"type": "string"
					},
					"host": {
						"description": "SMTP domain that handles email sending",
						"format": "hostname",
						"type": "string"
					},
					"password": {
						"description": "SMTP password",
						"type": "string"
					},
					"port": {
						"description": "SMTP port",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					},
					"user": {
						"description": "SMTP login",
						"format": "uri",
						"type": "string"
					}
				},
				"required": [
					"from_name",
					"from_address",
					"host",
					"port",
					"user",
					"password"
				],
				"type": "object"
			},
			"ErrorDetail": {
				"additionalProperties": false,
				"properties": {
					"location": {
						"description": "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
						"type": "string"
					},
					"message": {
						"description": "Error message text",
						"type": "string"
					},
					"value": {
						"description": "The value at the given location"
					}
				},
				"type": "object"
			},
			"ErrorModel": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ErrorModel.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"detail": {
						"description": "A human-readable explanation specific to this occurrence of the problem.",
						"examples": [
							"Property foo is required but is missing."
						],
						"type": "string"
					},
					"errors": {
						"description": "Optional list of individual error details",
						"items": {
							"$ref": "#/components/schemas/ErrorDetail"
						},
						"type": "array"
					},
					"instance": {
						"description": "A URI reference that identifies the specific occurrence of the problem.",
						"examples": [
							"https://example.com/error-log/abc123"
						],
						"format": "uri",
						"type": "string"
					},
					"status": {
						"description": "HTTP status code",
						"examples": [
							400
						],
						"format": "int64",
						"type": "integer"
					},
					"title": {
						"description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
						"examples": [
							"Bad Request"
						],
						"type": "string"
					},
					"type": {
						"default": "about:blank",
						"description": "A URI reference to human-readable documentation for the error.",
						"examples": [
							"https://example.com/errors/example"
						],
						"format": "uri",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Event": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Event.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"abiotic_measurements": {
						"items": {
							"$ref": "#/components/schemas/AbioticMeasurement"
						},
						"type": "array"
					},
					"code": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"performed_by": {
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					},
					"performed_by_groups": {
						"items": {
							"$ref": "#/components/schemas/OrganisationInner"
						},
						"type": "array"
					},
					"performed_on": {
						"$ref": "#/components/schemas/DateWithPrecision"
					},
					"samplings": {
						"items": {
							"$ref": "#/components/schemas/Sampling"
						},
						"type": "array"
					},
					"site": {
						"$ref": "#/components/schemas/SiteItem"
					},
					"spottings": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					}
				},
				"required": [
					"meta",
					"id",
					"site",
					"code",
					"performed_on"
				],
				"type": "object"
			},
			"EventInner": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"performed_on": {
						"$ref": "#/components/schemas/DateWithPrecision"
					},
					"site": {
						"$ref": "#/components/schemas/SiteItem"
					}
				},
				"required": [
					"id",
					"site",
					"code",
					"performed_on"
				],
				"type": "object"
			},
			"EventInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/EventInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"performed_by": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"performed_by_groups": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"performed_on": {
						"$ref": "#/components/schemas/DateWithPrecisionInput"
					}
				},
				"required": [
					"performed_on"
				],
				"type": "object"
			},
			"EventUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/EventUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"comments": {
						"type": [
							"string",
							"null"
						]
					},
					"performed_by": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"performed_by_groups": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"performed_on": {
						"$ref": "#/components/schemas/DateWithPrecisionInput"
					},
					"spottings": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					}
				},
				"type": "object"
			},
			"EventWithParticipants": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"performed_by": {
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					},
					"performed_by_groups": {
						"items": {
							"$ref": "#/components/schemas/OrganisationInner"
						},
						"type": "array"
					},
					"performed_on": {
						"$ref": "#/components/schemas/DateWithPrecision"
					},
					"site": {
						"$ref": "#/components/schemas/SiteItem"
					}
				},
				"required": [
					"id",
					"site",
					"code",
					"performed_on"
				],
				"type": "object"
			},
			"ExtSeqOrigin": {
				"enum": [
					"Lab",
					"DB",
					"PersCom"
				],
				"title": "ExtSeqOrigin",
				"type": "string"
			},
			"ExtSeqSpecificsBioMaterial": {
				"additionalProperties": false,
				"properties": {
					"origin": {
						"$ref": "#/components/schemas/ExtSeqOrigin"
					},
					"original_taxon": {
						"type": "string"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReference"
						},
						"type": "array"
					},
					"referenced_in": {
						"items": {
							"$ref": "#/components/schemas/SeqReference"
						},
						"type": "array"
					},
					"source_sample": {
						"$ref": "#/components/schemas/OptionalBioMaterial"
					},
					"specimen_identifier": {
						"type": "string"
					}
				},
				"required": [
					"origin",
					"specimen_identifier"
				],
				"type": "object"
			},
			"ExternalBioMatContent": {
				"additionalProperties": false,
				"properties": {
					"sequences": {
						"items": {
							"$ref": "#/components/schemas/ExternalBioMatSequence"
						},
						"type": "array"
					},
					"specimen": {
						"type": "string"
					}
				},
				"required": [
					"specimen",
					"sequences"
				],
				"type": "object"
			},
			"ExternalBioMatInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ExternalBioMatInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"description": "Unique code identifier for the bio material. Generated from taxon and sampling if not provided.",
						"examples": [
							"Genus_sp[SITE|2001-01]"
						],
						"type": "string"
					},
					"collection": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"content_description": {
						"description": "Description of the content of the bio material",
						"examples": [
							"2 females, 1 juvenile male"
						],
						"type": "string"
					},
					"identification": {
						"$ref": "#/components/schemas/IdentificationInput",
						"description": "Occurrence identification"
					},
					"is_type": {
						"description": "Flag indicating if the bio material is a type specimen, i.e. the reference specimen used to describe a new species.",
						"type": "boolean"
					},
					"original_link": {
						"type": "string"
					},
					"original_source": {
						"type": "string"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReferenceInput"
						},
						"type": "array"
					},
					"quantity": {
						"$ref": "#/components/schemas/Quantity"
					},
					"vouchers": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"quantity",
					"identification"
				],
				"type": "object"
			},
			"ExternalBioMatSequence": {
				"additionalProperties": false,
				"properties": {
					"accession_number": {
						"type": "string"
					},
					"category": {
						"$ref": "#/components/schemas/OccurrenceCategory"
					},
					"code": {
						"type": "string"
					},
					"code_history": {
						"items": {
							"$ref": "#/components/schemas/CodeHistory"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"gene": {
						"$ref": "#/components/schemas/Gene"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identification": {
						"$ref": "#/components/schemas/Identification"
					},
					"label": {
						"type": "string"
					},
					"legacy": {
						"$ref": "#/components/schemas/OptionalLegacySeqID"
					},
					"origin": {
						"$ref": "#/components/schemas/ExtSeqOrigin"
					},
					"original_taxon": {
						"type": "string"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/Article"
						},
						"type": "array"
					},
					"referenced_in": {
						"items": {
							"$ref": "#/components/schemas/SeqReference"
						},
						"type": "array"
					},
					"sequence": {
						"type": "string"
					},
					"specimen_identifier": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"category",
					"origin",
					"identification",
					"comments",
					"accession_number",
					"specimen_identifier",
					"original_taxon",
					"gene",
					"code"
				],
				"type": "object"
			},
			"ExternalBioMatSpecific": {
				"additionalProperties": false,
				"properties": {
					"archive": {
						"$ref": "#/components/schemas/SpecimenVoucher"
					},
					"comments": {
						"type": "string"
					},
					"content": {
						"items": {
							"$ref": "#/components/schemas/ExternalBioMatContent"
						},
						"type": "array"
					},
					"content_description": {
						"type": "string"
					},
					"original_link": {
						"type": "string"
					},
					"original_source": {
						"$ref": "#/components/schemas/OptionalDataSource"
					},
					"original_taxon": {
						"type": "string"
					},
					"quantity": {
						"$ref": "#/components/schemas/Quantity"
					}
				},
				"required": [
					"quantity",
					"archive",
					"comments"
				],
				"type": "object"
			},
			"ExternalBioMatUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ExternalBioMatUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"collection": {
						"type": [
							"string",
							"null"
						]
					},
					"comments": {
						"type": [
							"string",
							"null"
						]
					},
					"content_description": {
						"type": [
							"string",
							"null"
						]
					},
					"identification": {
						"$ref": "#/components/schemas/IdentificationUpdate"
					},
					"is_type": {
						"type": "boolean"
					},
					"original_link": {
						"type": [
							"string",
							"null"
						]
					},
					"original_source": {
						"type": [
							"string",
							"null"
						]
					},
					"original_taxon": {
						"type": [
							"string",
							"null"
						]
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReferenceInput"
						},
						"type": [
							"array",
							"null"
						]
					},
					"quantity": {
						"$ref": "#/components/schemas/Quantity"
					},
					"sampling_id": {
						"format": "uuid",
						"type": "string"
					},
					"vouchers": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"published_in",
					"sampling_id"
				],
				"type": "object"
			},
			"ExternalOccurrenceAtEventInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ExternalOccurrenceAtEventInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"biomaterial": {
						"$ref": "#/components/schemas/ExternalBioMatInput",
						"description": "New occurrence resulting from the sampling action"
					},
					"sampling": {
						"$ref": "#/components/schemas/SamplingInput",
						"description": "New sampling action during referenced event"
					}
				},
				"required": [
					"sampling",
					"biomaterial"
				],
				"type": "object"
			},
			"ExternalOccurrenceAtSiteInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ExternalOccurrenceAtSiteInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"biomaterial": {
						"$ref": "#/components/schemas/ExternalBioMatInput"
					},
					"event": {
						"$ref": "#/components/schemas/EventInput"
					},
					"sampling": {
						"$ref": "#/components/schemas/SamplingInput"
					}
				},
				"required": [
					"event",
					"sampling",
					"biomaterial"
				],
				"type": "object"
			},
			"Fixative": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Fixative.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"FixativeInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/FixativeInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"code"
				],
				"type": "object"
			},
			"FixativeUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/FixativeUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"label": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Funder": {
				"additionalProperties": false,
				"properties": {
					"DOI": {
						"type": "string"
					},
					"award": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"doi-asserted-by": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Gene": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Gene.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"is_MOTU_delimiter": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"is_MOTU_delimiter",
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"GeneInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/GeneInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"is_MOTU_delimiter": {
						"default": false,
						"type": "boolean"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"code"
				],
				"type": "object"
			},
			"GeneUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/GeneUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"is_MOTU_delimiter": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"GeoapifyResult": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/GeoapifyResult.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"country_code": {
						"type": "string"
					},
					"county": {
						"type": "string"
					},
					"formatted": {
						"type": "string"
					},
					"housenumber": {
						"type": "string"
					},
					"lat": {
						"format": "double",
						"type": "number"
					},
					"lon": {
						"format": "double",
						"type": "number"
					},
					"municipality": {
						"type": "string"
					},
					"postcode": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"street": {
						"type": "string"
					},
					"suburb": {
						"type": "string"
					}
				},
				"required": [
					"formatted",
					"municipality",
					"city",
					"county",
					"state",
					"country",
					"country_code",
					"lat",
					"lon",
					"postcode",
					"street",
					"housenumber",
					"suburb"
				],
				"type": "object"
			},
			"GeoapifyUsage": {
				"additionalProperties": false,
				"properties": {
					"date": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"requests": {
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"id",
					"date",
					"requests"
				],
				"type": "object"
			},
			"Group": {
				"additionalProperties": false,
				"properties": {
					"label": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Habitat": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"description": "Optional habitat description",
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"incompatible": {
						"items": {
							"$ref": "#/components/schemas/HabitatInner"
						},
						"type": "array"
					},
					"label": {
						"description": "A short label for the habitat.",
						"examples": [
							"Lotic"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"meta",
					"incompatible",
					"id",
					"label"
				],
				"type": "object"
			},
			"HabitatGroup": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/HabitatGroup.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"depends": {
						"$ref": "#/components/schemas/OptionalHabitatRecord"
					},
					"elements": {
						"items": {
							"$ref": "#/components/schemas/HabitatRecord"
						},
						"type": "array"
					},
					"exclusive_elements": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"description": "Name for the group of habitat tags",
						"examples": [
							"Water flow"
						],
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"id",
					"label",
					"exclusive_elements",
					"elements",
					"meta"
				],
				"type": "object"
			},
			"HabitatGroupInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/HabitatGroupInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"depends": {
						"description": "Habitat tag that this group is a refinement of",
						"examples": [
							"Aquatic, Surface"
						],
						"type": "string"
					},
					"elements": {
						"items": {
							"$ref": "#/components/schemas/HabitatInput"
						},
						"minItems": 1,
						"type": "array"
					},
					"exclusive_elements": {
						"type": "boolean"
					},
					"label": {
						"description": "Name for the group of habitat tags",
						"examples": [
							"Water flow"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					}
				},
				"required": [
					"label",
					"elements"
				],
				"type": "object"
			},
			"HabitatGroupUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/HabitatGroupUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"create_tags": {
						"items": {
							"$ref": "#/components/schemas/HabitatInput"
						},
						"type": "array"
					},
					"delete_tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"depends": {
						"type": [
							"string",
							"null"
						]
					},
					"exclusive_elements": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"update_tags": {
						"additionalProperties": {
							"$ref": "#/components/schemas/HabitatUpdate"
						},
						"type": "object"
					}
				},
				"type": "object"
			},
			"HabitatInner": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"description": "Optional habitat description",
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"description": "A short label for the habitat.",
						"examples": [
							"Lotic"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					}
				},
				"required": [
					"id",
					"label"
				],
				"type": "object"
			},
			"HabitatInput": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"description": "Optional habitat description",
						"type": "string"
					},
					"label": {
						"description": "A short label for the habitat.",
						"examples": [
							"Lotic"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					}
				},
				"required": [
					"label"
				],
				"type": "object"
			},
			"HabitatRecord": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"description": "Optional habitat description",
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"incompatible": {
						"items": {
							"$ref": "#/components/schemas/HabitatInner"
						},
						"type": "array"
					},
					"label": {
						"description": "A short label for the habitat.",
						"examples": [
							"Lotic"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					}
				},
				"required": [
					"incompatible",
					"id",
					"label"
				],
				"type": "object"
			},
			"HabitatUpdate": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"label": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Identification": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identified_by": {
						"$ref": "#/components/schemas/OptionalPersonInner"
					},
					"identified_on": {
						"$ref": "#/components/schemas/DateWithPrecision"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"taxon": {
						"$ref": "#/components/schemas/Taxon"
					}
				},
				"required": [
					"id",
					"taxon",
					"identified_on",
					"meta"
				],
				"type": "object"
			},
			"IdentificationInput": {
				"additionalProperties": false,
				"properties": {
					"identified_by": {
						"type": "string"
					},
					"identified_on": {
						"$ref": "#/components/schemas/DateWithPrecisionInput"
					},
					"taxon": {
						"type": "string"
					}
				},
				"required": [
					"taxon",
					"identified_by",
					"identified_on"
				],
				"type": "object"
			},
			"IdentificationUpdate": {
				"additionalProperties": false,
				"properties": {
					"identified_by": {
						"type": [
							"string",
							"null"
						]
					},
					"identified_on": {
						"$ref": "#/components/schemas/DateWithPrecisionInput"
					},
					"taxon": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Identifier": {
				"additionalProperties": false,
				"properties": {
					"asserted-by": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"id-type": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"ImportProcess": {
				"additionalProperties": false,
				"properties": {
					"GBIF_ID": {
						"format": "int64",
						"type": "integer"
					},
					"done": {
						"type": "boolean"
					},
					"error": {},
					"expected": {
						"format": "int64",
						"type": "integer"
					},
					"imported": {
						"format": "int64",
						"type": "integer"
					},
					"name": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank"
					},
					"started": {
						"format": "date-time",
						"type": "string"
					}
				},
				"required": [
					"name",
					"GBIF_ID",
					"expected",
					"imported",
					"rank",
					"started",
					"done",
					"error"
				],
				"type": "object"
			},
			"ImportRequestGBIF": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ImportRequestGBIF.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"children": {
						"description": "Import whole clade, including the taxon descendants",
						"type": "boolean"
					},
					"key": {
						"description": "Target GBIF taxon key",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"key",
					"children"
				],
				"type": "object"
			},
			"InstanceSettings": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InstanceSettings.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"allow_contributor_signup": {
						"description": "Whether requests to contribute to the database can be made.",
						"type": "boolean"
					},
					"description": {
						"type": "string"
					},
					"name": {
						"description": "The name of this database platform",
						"type": "string"
					},
					"public": {
						"description": "Whether the platform is accessible to unauthenticated users",
						"type": "boolean"
					}
				},
				"required": [
					"description",
					"name",
					"public",
					"allow_contributor_signup"
				],
				"type": "object"
			},
			"InstanceSettingsInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InstanceSettingsInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"allow_contributor_signup": {
						"description": "Whether requests to contribute to the database can be made.",
						"type": "boolean"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"name": {
						"description": "The name of this database platform",
						"type": "string"
					},
					"public": {
						"description": "Whether the platform is accessible to unauthenticated users",
						"type": "boolean"
					}
				},
				"required": [
					"name",
					"public",
					"allow_contributor_signup"
				],
				"type": "object"
			},
			"InvitationInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InvitationInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"description": "E-mail address of the recipient of the invitation",
						"format": "email",
						"type": "string"
					},
					"handler": {
						"$ref": "#/components/schemas/URL",
						"description": "A URL template with a {token} parameter, which implements the UI to validate the invitation token and fill a registration form.",
						"examples": [
							"http://example.com/register/{token}"
						],
						"format": "uri-template"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"email",
					"role"
				],
				"type": "object"
			},
			"InvitationLink": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InvitationLink.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"invitation_link": {
						"$ref": "#/components/schemas/URL",
						"description": "The generated URL containing a registration token that can be shared to the invitee."
					}
				},
				"required": [
					"invitation_link"
				],
				"type": "object"
			},
			"JournalIssue": {
				"additionalProperties": false,
				"properties": {
					"issue": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"LatLongCoords": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/LatLongCoords.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"latitude": {
						"examples": [
							43.5684
						],
						"format": "float",
						"maximum": 90,
						"minimum": -90,
						"type": "number"
					},
					"longitude": {
						"examples": [
							3.5678
						],
						"format": "float",
						"maximum": 180,
						"minimum": -180,
						"type": "number"
					}
				},
				"required": [
					"latitude",
					"longitude"
				],
				"type": "object"
			},
			"LegacySeqID": {
				"additionalProperties": false,
				"properties": {
					"alignment_code": {
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"id": {
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"id",
					"code",
					"alignment_code"
				],
				"type": "object"
			},
			"License": {
				"additionalProperties": false,
				"properties": {
					"URL": {
						"type": "string"
					},
					"content-version": {
						"type": "string"
					},
					"delay-in-days": {
						"format": "int64",
						"type": "integer"
					},
					"start": {
						"$ref": "#/components/schemas/DateObject"
					}
				},
				"type": "object"
			},
			"Lineage": {
				"additionalProperties": false,
				"properties": {
					"class": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"family": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"genus": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"kingdom": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"order": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"phylum": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"species": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"subspecies": {
						"$ref": "#/components/schemas/OptionalTaxon"
					}
				},
				"type": "object"
			},
			"Link": {
				"additionalProperties": false,
				"properties": {
					"URL": {
						"type": "string"
					},
					"content-type": {
						"type": "string"
					},
					"content-version": {
						"type": "string"
					},
					"intended-application": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"LogoutInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/LogoutInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"refresh_token": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Message": {
				"additionalProperties": false,
				"properties": {
					"URL": {
						"type": "string"
					},
					"abstract": {
						"type": "string"
					},
					"accepted": {
						"$ref": "#/components/schemas/DateObject"
					},
					"alternative-id": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"approved": {
						"$ref": "#/components/schemas/DateObject"
					},
					"archive": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"article-number": {
						"type": "string"
					},
					"assertion": {
						"items": {
							"$ref": "#/components/schemas/Assertion"
						},
						"type": "array"
					},
					"author": {
						"items": {
							"$ref": "#/components/schemas/CrossRefPerson"
						},
						"type": "array"
					},
					"chair": {
						"items": {
							"$ref": "#/components/schemas/CrossRefPerson"
						},
						"type": "array"
					},
					"clinical-trail-number": {
						"$ref": "#/components/schemas/ClinicalTrailNumber"
					},
					"component-number": {
						"type": "string"
					},
					"container-title": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"content-created": {
						"$ref": "#/components/schemas/DateObject"
					},
					"content-domain": {
						"$ref": "#/components/schemas/ContentDomain"
					},
					"content-updated": {
						"$ref": "#/components/schemas/DateObject"
					},
					"created": {
						"$ref": "#/components/schemas/DateObject"
					},
					"degree": {
						"type": "string"
					},
					"deposited": {
						"$ref": "#/components/schemas/DateObject"
					},
					"doi": {
						"type": "string"
					},
					"edition-number": {
						"type": "string"
					},
					"editor": {
						"items": {
							"$ref": "#/components/schemas/CrossRefPerson"
						},
						"type": "array"
					},
					"free-to-read": {
						"$ref": "#/components/schemas/DateRange"
					},
					"funder": {
						"items": {
							"$ref": "#/components/schemas/Funder"
						},
						"type": "array"
					},
					"group-title": {
						"type": "string"
					},
					"indexed": {
						"$ref": "#/components/schemas/DateObject"
					},
					"institution": {
						"items": {
							"$ref": "#/components/schemas/Organization"
						},
						"type": "array"
					},
					"isbn": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"isbn-type": {
						"items": {
							"$ref": "#/components/schemas/Identifier"
						},
						"type": "array"
					},
					"issn": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"issn-type": {
						"items": {
							"$ref": "#/components/schemas/Identifier"
						},
						"type": "array"
					},
					"issue": {
						"type": "string"
					},
					"issued": {
						"$ref": "#/components/schemas/DateObject"
					},
					"journal-issue": {
						"$ref": "#/components/schemas/JournalIssue"
					},
					"language": {
						"type": "string"
					},
					"license": {
						"items": {
							"$ref": "#/components/schemas/License"
						},
						"type": "array"
					},
					"link": {
						"items": {
							"$ref": "#/components/schemas/Link"
						},
						"type": "array"
					},
					"member": {
						"type": "string"
					},
					"original-title": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"page": {
						"type": "string"
					},
					"part-number": {
						"type": "string"
					},
					"posted": {
						"$ref": "#/components/schemas/DateObject"
					},
					"prefix": {
						"type": "string"
					},
					"published": {
						"$ref": "#/components/schemas/DateObject"
					},
					"published-online": {
						"$ref": "#/components/schemas/DateObject"
					},
					"published-other": {
						"$ref": "#/components/schemas/DateObject"
					},
					"published-print": {
						"$ref": "#/components/schemas/DateObject"
					},
					"publisher": {
						"type": "string"
					},
					"publisher-location": {
						"type": "string"
					},
					"reference": {
						"items": {
							"$ref": "#/components/schemas/Reference"
						},
						"type": "array"
					},
					"reference-count": {
						"format": "int64",
						"type": "integer"
					},
					"relation": {
						"additionalProperties": {
							"items": {
								"$ref": "#/components/schemas/Property"
							},
							"type": "array"
						},
						"type": "object"
					},
					"review": {
						"$ref": "#/components/schemas/Review"
					},
					"score": {
						"format": "float",
						"type": "number"
					},
					"short-container-title": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"short-title": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"source": {
						"type": "string"
					},
					"standards-body": {
						"items": {
							"$ref": "#/components/schemas/Organization"
						},
						"type": "array"
					},
					"subject": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"subtitle": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"title": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"translator": {
						"items": {
							"$ref": "#/components/schemas/CrossRefPerson"
						},
						"type": "array"
					},
					"type": {
						"type": "string"
					},
					"update-policy": {
						"type": "string"
					},
					"updated-to": {
						"items": {
							"$ref": "#/components/schemas/Updated"
						},
						"type": "array"
					},
					"volume": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Meta": {
				"additionalProperties": false,
				"properties": {
					"created": {
						"format": "date-time",
						"type": "string"
					},
					"created_by": {
						"$ref": "#/components/schemas/OptionalUserShortIdentity"
					},
					"last_updated": {
						"format": "date-time",
						"type": "string"
					},
					"modified": {
						"format": "date-time",
						"type": "string"
					},
					"updated_by": {
						"$ref": "#/components/schemas/OptionalUserShortIdentity"
					}
				},
				"required": [
					"created",
					"last_updated"
				],
				"type": "object"
			},
			"OccurrenceAtSite": {
				"additionalProperties": false,
				"properties": {
					"category": {
						"$ref": "#/components/schemas/OccurrenceCategory"
					},
					"code": {
						"type": "string"
					},
					"element": {
						"$ref": "#/components/schemas/OccurrenceElement"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"sampling_date": {
						"$ref": "#/components/schemas/DateWithPrecision"
					},
					"taxon": {
						"$ref": "#/components/schemas/TaxonInner"
					}
				},
				"required": [
					"id",
					"code",
					"taxon",
					"sampling_date",
					"category",
					"element"
				],
				"type": "object"
			},
			"OccurrenceCategory": {
				"enum": [
					"Internal",
					"External"
				],
				"title": "OccurrenceCategory",
				"type": "string"
			},
			"OccurrenceDataset": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/OccurrenceDataset.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"category": {
						"$ref": "#/components/schemas/DatasetCategory"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"is_congruent": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"maintainers": {
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"occurrences": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceWithCategory"
						},
						"type": "array"
					},
					"pinned": {
						"type": "boolean"
					},
					"sites": {
						"items": {
							"$ref": "#/components/schemas/SiteItem"
						},
						"type": "array"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"sites",
					"occurrences",
					"is_congruent",
					"maintainers",
					"meta",
					"id",
					"label",
					"slug",
					"pinned",
					"description",
					"category"
				],
				"type": "object"
			},
			"OccurrenceDatasetListItem": {
				"additionalProperties": false,
				"properties": {
					"category": {
						"$ref": "#/components/schemas/DatasetCategory"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"is_congruent": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"maintainers": {
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"occurrences": {
						"format": "int64",
						"type": "integer"
					},
					"pinned": {
						"type": "boolean"
					},
					"sites": {
						"format": "int64",
						"type": "integer"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"sites",
					"occurrences",
					"is_congruent",
					"maintainers",
					"meta",
					"id",
					"label",
					"slug",
					"pinned",
					"description",
					"category"
				],
				"type": "object"
			},
			"OccurrenceElement": {
				"enum": [
					"BioMaterial",
					"Sequence"
				],
				"title": "OccurrenceElement",
				"type": "string"
			},
			"OccurrenceOverviewItem": {
				"additionalProperties": false,
				"properties": {
					"name": {
						"type": "string"
					},
					"occurrences": {
						"format": "int32",
						"type": "integer"
					},
					"parent_name": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank"
					}
				},
				"required": [
					"name",
					"parent_name",
					"occurrences",
					"rank"
				],
				"type": "object"
			},
			"OccurrenceReference": {
				"additionalProperties": false,
				"properties": {
					"authors": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"code": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"doi": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"journal": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"original": {
						"type": "boolean"
					},
					"original_source": {
						"type": "boolean"
					},
					"title": {
						"type": "string"
					},
					"verbatim": {
						"type": "string"
					},
					"year": {
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"id",
					"code",
					"authors",
					"year",
					"original_source",
					"meta"
				],
				"type": "object"
			},
			"OccurrenceReferenceInput": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"type": "string"
					},
					"original": {
						"type": "boolean"
					}
				},
				"required": [
					"code"
				],
				"type": "object"
			},
			"OccurrenceWithCategory": {
				"additionalProperties": false,
				"properties": {
					"category": {
						"$ref": "#/components/schemas/OccurrenceCategory"
					},
					"comments": {
						"type": "string"
					},
					"element": {
						"$ref": "#/components/schemas/OccurrenceElement"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identification": {
						"$ref": "#/components/schemas/Identification"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReference"
						},
						"type": "array"
					},
					"sampling": {
						"$ref": "#/components/schemas/SamplingInner"
					}
				},
				"required": [
					"category",
					"element",
					"id",
					"comments",
					"sampling",
					"identification"
				],
				"type": "object"
			},
			"OptionalBioMaterial": {
				"additionalProperties": false,
				"properties": {
					"category": {
						"$ref": "#/components/schemas/OccurrenceCategory"
					},
					"code": {
						"type": "string"
					},
					"code_history": {
						"items": {
							"$ref": "#/components/schemas/CodeHistory"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"external": {
						"$ref": "#/components/schemas/OptionalExternalBioMatSpecific"
					},
					"has_sequences": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identification": {
						"$ref": "#/components/schemas/Identification"
					},
					"is_congruent": {
						"type": "boolean"
					},
					"is_homogenous": {
						"type": "boolean"
					},
					"is_type": {
						"type": "boolean"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReference"
						},
						"type": "array"
					},
					"sampling": {
						"$ref": "#/components/schemas/SamplingInner"
					},
					"seq_consensus": {
						"$ref": "#/components/schemas/OptionalTaxon"
					}
				},
				"required": [
					"has_sequences",
					"is_homogenous",
					"is_congruent",
					"meta",
					"sampling",
					"identification",
					"id",
					"category",
					"is_type",
					"code"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalCountry": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Country.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"DE"
						],
						"type": "string"
					},
					"continent": {
						"examples": [
							"Europe"
						],
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"name": {
						"examples": [
							"Germany"
						],
						"type": "string"
					},
					"subcontinent": {
						"examples": [
							"Western Europe"
						],
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"code",
					"continent",
					"subcontinent"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalDataSource": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/DataSource.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"link_template": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"url": {
						"type": "string"
					}
				},
				"required": [
					"meta",
					"id",
					"label",
					"code"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalExtSeqSpecificsBioMaterial": {
				"additionalProperties": false,
				"properties": {
					"origin": {
						"$ref": "#/components/schemas/ExtSeqOrigin"
					},
					"original_taxon": {
						"type": "string"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReference"
						},
						"type": "array"
					},
					"referenced_in": {
						"items": {
							"$ref": "#/components/schemas/SeqReference"
						},
						"type": "array"
					},
					"source_sample": {
						"$ref": "#/components/schemas/OptionalBioMaterial"
					},
					"specimen_identifier": {
						"type": "string"
					}
				},
				"required": [
					"origin",
					"specimen_identifier"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalExternalBioMatSpecific": {
				"additionalProperties": false,
				"properties": {
					"archive": {
						"$ref": "#/components/schemas/SpecimenVoucher"
					},
					"comments": {
						"type": "string"
					},
					"content": {
						"items": {
							"$ref": "#/components/schemas/ExternalBioMatContent"
						},
						"type": "array"
					},
					"content_description": {
						"type": "string"
					},
					"original_link": {
						"type": "string"
					},
					"original_source": {
						"$ref": "#/components/schemas/OptionalDataSource"
					},
					"original_taxon": {
						"type": "string"
					},
					"quantity": {
						"$ref": "#/components/schemas/Quantity"
					}
				},
				"required": [
					"quantity",
					"archive",
					"comments"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalHabitatRecord": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"description": "Optional habitat description",
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"incompatible": {
						"items": {
							"$ref": "#/components/schemas/HabitatInner"
						},
						"type": "array"
					},
					"label": {
						"description": "A short label for the habitat.",
						"examples": [
							"Lotic"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					}
				},
				"required": [
					"incompatible",
					"id",
					"label"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalLegacySeqID": {
				"additionalProperties": false,
				"properties": {
					"alignment_code": {
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"id": {
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"id",
					"code",
					"alignment_code"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalPersonInner": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalTaxon": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Taxon.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalUserInner": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_confirmed": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"id",
					"email",
					"login",
					"role",
					"email_confirmed"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalUserShortIdentity": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"login",
					"name",
					"alias"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OrgKind": {
				"enum": [
					"Lab",
					"FundingAgency",
					"SequencingPlatform",
					"Other"
				],
				"title": "OrgKind",
				"type": "string"
			},
			"Organisation": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Organisation.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"LEHNA"
						],
						"maxLength": 12,
						"minLength": 2,
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/OrgKind",
						"examples": [
							"Lab"
						]
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"maxLength": 128,
						"minLength": 10,
						"type": "string"
					},
					"people": {
						"description": "Known members of this organisation",
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					}
				},
				"required": [
					"meta",
					"id",
					"name",
					"code",
					"kind"
				],
				"type": "object"
			},
			"OrganisationInner": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"examples": [
							"LEHNA"
						],
						"maxLength": 12,
						"minLength": 2,
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/OrgKind",
						"examples": [
							"Lab"
						]
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"maxLength": 128,
						"minLength": 10,
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"code",
					"kind"
				],
				"type": "object"
			},
			"OrganisationInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/OrganisationInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"LEHNA"
						],
						"maxLength": 12,
						"minLength": 2,
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/OrgKind",
						"examples": [
							"Lab"
						]
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"maxLength": 128,
						"minLength": 10,
						"type": "string"
					}
				},
				"required": [
					"name",
					"code",
					"kind"
				],
				"type": "object"
			},
			"OrganisationUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/OrganisationUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"LEHNA"
						],
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": [
							"string",
							"null"
						]
					},
					"kind": {
						"$ref": "#/components/schemas/OrgKind",
						"examples": [
							"Lab"
						]
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"type": "string"
					}
				},
				"type": "object"
			},
			"Organization": {
				"additionalProperties": false,
				"properties": {
					"acronym": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"department": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"id": {
						"items": {
							"$ref": "#/components/schemas/Identifier"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					},
					"place": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"PaginatedListBioMaterialWithDetails": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PaginatedListBioMaterialWithDetails.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/BioMaterialWithDetails"
						},
						"type": "array"
					},
					"total_count": {
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"items",
					"total_count"
				],
				"type": "object"
			},
			"PasswordInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PasswordInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"password": {
						"description": "Your new password",
						"type": "string"
					},
					"password_confirmation": {
						"description": "New password confirmation",
						"type": "string"
					}
				},
				"required": [
					"password",
					"password_confirmation"
				],
				"type": "object"
			},
			"PasswordResetRequest": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PasswordResetRequest.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"handler": {
						"description": "A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.",
						"format": "uri",
						"type": "string"
					}
				},
				"required": [
					"email"
				],
				"type": "object"
			},
			"PendingUserRequest": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PendingUserRequest.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"created_on": {
						"format": "date-time",
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_verified": {
						"type": "boolean"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"motive": {
						"type": "string"
					},
					"organisation": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"full_name",
					"created_on",
					"email_verified",
					"email",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PendingUserRequestInput": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"motive": {
						"type": "string"
					},
					"organisation": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"Person": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Person.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"organisations": {
						"items": {
							"$ref": "#/components/schemas/OrganisationInner"
						},
						"type": "array"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					},
					"user": {
						"$ref": "#/components/schemas/OptionalUserInner"
					}
				},
				"required": [
					"organisations",
					"meta",
					"user",
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PersonInner": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PersonInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PersonInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"organisations": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PersonUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PersonUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": [
							"string",
							"null"
						]
					},
					"contact": {
						"type": [
							"string",
							"null"
						]
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"organisations": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"PersonUser": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					},
					"user": {
						"$ref": "#/components/schemas/OptionalUserInner"
					}
				},
				"required": [
					"user",
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"Program": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Program.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"datasets": {
						"items": {
							"$ref": "#/components/schemas/DatasetInner"
						},
						"type": "array"
					},
					"description": {
						"type": "string"
					},
					"end_year": {
						"examples": [
							2025
						],
						"format": "int64",
						"type": "integer"
					},
					"funding_agencies": {
						"items": {
							"$ref": "#/components/schemas/OrganisationInner"
						},
						"type": "array"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"managers": {
						"items": {
							"$ref": "#/components/schemas/PersonInner"
						},
						"minItems": 1,
						"type": "array"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"start_year": {
						"examples": [
							2019
						],
						"format": "int64",
						"minimum": 1900,
						"type": "integer"
					}
				},
				"required": [
					"managers",
					"funding_agencies",
					"datasets",
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"ProgramInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ProgramInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"PHD_ALICE"
						],
						"type": "string"
					},
					"datasets": {
						"examples": [
							[
								"dataset1"
							]
						],
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"description": {
						"type": "string"
					},
					"end_year": {
						"examples": [
							2025
						],
						"format": "int32",
						"type": "integer"
					},
					"funding_agencies": {
						"examples": [
							[
								"CNRS"
							]
						],
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"label": {
						"examples": [
							"Alice's PhD"
						],
						"type": "string"
					},
					"managers": {
						"examples": [
							[
								"adoe",
								"fmalard"
							]
						],
						"items": {
							"type": "string"
						},
						"minItems": 1,
						"type": "array"
					},
					"start_year": {
						"examples": [
							2022
						],
						"format": "int32",
						"minimum": 1900,
						"type": "integer"
					}
				},
				"required": [
					"label",
					"code",
					"managers"
				],
				"type": "object"
			},
			"ProgramUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ProgramUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"PHD_ALICE"
						],
						"type": "string"
					},
					"datasets": {
						"examples": [
							[
								"dataset1"
							]
						],
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"end_year": {
						"examples": [
							2025
						],
						"format": "int32",
						"type": [
							"integer",
							"null"
						]
					},
					"funding_agencies": {
						"examples": [
							[
								"CNRS"
							]
						],
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"label": {
						"examples": [
							"Alice's PhD"
						],
						"type": "string"
					},
					"managers": {
						"examples": [
							[
								"adoe",
								"fmalard"
							]
						],
						"items": {
							"type": "string"
						},
						"minItems": 1,
						"type": [
							"array",
							"null"
						]
					},
					"start_year": {
						"examples": [
							2022
						],
						"format": "int32",
						"minimum": 1900,
						"type": [
							"integer",
							"null"
						]
					}
				},
				"type": "object"
			},
			"Property": {
				"additionalProperties": false,
				"properties": {
					"asserted-by": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"id-type": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Quantity": {
				"enum": [
					"Unknown",
					"One",
					"Several",
					"Dozen",
					"Tens",
					"Hundred"
				],
				"title": "Quantity",
				"type": "string"
			},
			"Reference": {
				"additionalProperties": false,
				"properties": {
					"article-title": {
						"type": "string"
					},
					"author": {
						"type": "string"
					},
					"component": {
						"type": "string"
					},
					"doi": {
						"type": "string"
					},
					"doi-asserted-by": {
						"type": "string"
					},
					"edition": {
						"type": "string"
					},
					"first-page": {
						"type": "string"
					},
					"isbn": {
						"type": "string"
					},
					"isbn-type": {
						"type": "string"
					},
					"issn": {
						"type": "string"
					},
					"issn-type": {
						"type": "string"
					},
					"issue": {
						"type": "string"
					},
					"journal-title": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"series-title": {
						"type": "string"
					},
					"standard-designator": {
						"type": "string"
					},
					"standards-body": {
						"type": "string"
					},
					"unstructured": {
						"type": "string"
					},
					"volume": {
						"type": "string"
					},
					"volume-title": {
						"type": "string"
					},
					"year": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"RefreshTokenBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/RefreshTokenBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"refresh_token": {
						"type": "string"
					}
				},
				"required": [
					"refresh_token"
				],
				"type": "object"
			},
			"RegisterInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/RegisterInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/PendingUserRequestInput"
					},
					"verification_path": {
						"type": "string"
					}
				},
				"required": [
					"data",
					"verification_path"
				],
				"type": "object"
			},
			"ResendEmailVerificationInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ResendEmailVerificationInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"verification_url": {
						"description": "A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.",
						"format": "uri",
						"type": "string"
					}
				},
				"required": [
					"email",
					"verification_url"
				],
				"type": "object"
			},
			"ReverseGeocodeInputBody": {
				"additionalProperties": true,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ReverseGeocodeInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"latitude": {
						"examples": [
							43.5684
						],
						"format": "float",
						"maximum": 90,
						"minimum": -90,
						"type": "number"
					},
					"longitude": {
						"examples": [
							3.5678
						],
						"format": "float",
						"maximum": 180,
						"minimum": -180,
						"type": "number"
					}
				},
				"required": [
					"latitude",
					"longitude"
				],
				"type": "object"
			},
			"Review": {
				"additionalProperties": false,
				"properties": {
					"competing-interest-statement": {
						"type": "string"
					},
					"language": {
						"type": "string"
					},
					"recommendation": {
						"type": "string"
					},
					"revision-round": {
						"type": "string"
					},
					"running-number": {
						"type": "string"
					},
					"stage": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Sampling": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Sampling.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"access_points": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"code": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"duration": {
						"description": "Sampling duration in minutes",
						"format": "int64",
						"type": "integer"
					},
					"fixatives": {
						"items": {
							"$ref": "#/components/schemas/Fixative"
						},
						"type": "array"
					},
					"habitats": {
						"items": {
							"$ref": "#/components/schemas/Habitat"
						},
						"type": "array"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"methods": {
						"items": {
							"$ref": "#/components/schemas/SamplingMethod"
						},
						"type": "array"
					},
					"occurring_taxa": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					},
					"samples": {
						"items": {
							"$ref": "#/components/schemas/BioMaterial"
						},
						"type": "array"
					},
					"target": {
						"$ref": "#/components/schemas/SamplingTarget"
					}
				},
				"required": [
					"meta",
					"id",
					"code",
					"target"
				],
				"type": "object"
			},
			"SamplingInner": {
				"additionalProperties": false,
				"properties": {
					"access_points": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"code": {
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"duration": {
						"description": "Sampling duration in minutes",
						"format": "int64",
						"type": "integer"
					},
					"fixatives": {
						"items": {
							"$ref": "#/components/schemas/Fixative"
						},
						"type": "array"
					},
					"habitats": {
						"items": {
							"$ref": "#/components/schemas/Habitat"
						},
						"type": "array"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"methods": {
						"items": {
							"$ref": "#/components/schemas/SamplingMethod"
						},
						"type": "array"
					},
					"target": {
						"$ref": "#/components/schemas/SamplingTarget"
					}
				},
				"required": [
					"id",
					"code",
					"target"
				],
				"type": "object"
			},
			"SamplingInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"access_points": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"duration": {
						"description": "Sampling duration in minutes",
						"format": "int32",
						"type": "integer"
					},
					"fixatives": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"habitats": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"methods": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"target": {
						"$ref": "#/components/schemas/SamplingTargetInput"
					}
				},
				"required": [
					"target"
				],
				"type": "object"
			},
			"SamplingInputWithEvent": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingInputWithEvent.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"access_points": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"duration": {
						"description": "Sampling duration in minutes",
						"format": "int32",
						"type": "integer"
					},
					"event_id": {
						"type": "string"
					},
					"fixatives": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"habitats": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"methods": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"target": {
						"$ref": "#/components/schemas/SamplingTargetInput"
					}
				},
				"required": [
					"event_id",
					"target"
				],
				"type": "object"
			},
			"SamplingMethod": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingMethod.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"SamplingMethodInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingMethodInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"code"
				],
				"type": "object"
			},
			"SamplingMethodUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingMethodUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"label": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"SamplingTarget": {
				"additionalProperties": false,
				"properties": {
					"kind": {
						"$ref": "#/components/schemas/SamplingTargetKind"
					},
					"taxa": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					}
				},
				"required": [
					"kind"
				],
				"type": "object"
			},
			"SamplingTargetInput": {
				"additionalProperties": false,
				"properties": {
					"kind": {
						"$ref": "#/components/schemas/SamplingTargetKind"
					},
					"taxa": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"kind"
				],
				"type": "object"
			},
			"SamplingTargetKind": {
				"enum": [
					"Community",
					"Unknown",
					"Taxa"
				],
				"title": "SamplingTargetKind",
				"type": "string"
			},
			"SamplingUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"access_points": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"comments": {
						"type": [
							"string",
							"null"
						]
					},
					"duration": {
						"description": "Sampling duration in minutes",
						"format": "int32",
						"type": [
							"integer",
							"null"
						]
					},
					"fixatives": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"habitats": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"methods": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"target": {
						"$ref": "#/components/schemas/SamplingTargetInput"
					}
				},
				"required": [
					"target"
				],
				"type": "object"
			},
			"SecuritySettings": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SecuritySettings.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"invitation_token_lifetime": {
						"description": "Invitation token lifetime in days",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					},
					"min_password_strength": {
						"description": "The level of complexity required for account passwords.",
						"format": "int32",
						"maximum": 5,
						"minimum": 3,
						"type": "integer"
					},
					"refresh_token_lifetime": {
						"description": "User session lifetime in hours",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					}
				},
				"required": [
					"min_password_strength",
					"refresh_token_lifetime",
					"invitation_token_lifetime"
				],
				"type": "object"
			},
			"SecuritySettingsInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SecuritySettingsInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"invitation_token_lifetime": {
						"description": "Invitation token lifetime in days",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					},
					"min_password_strength": {
						"description": "The level of complexity required for account passwords.",
						"format": "int32",
						"maximum": 5,
						"minimum": 3,
						"type": "integer"
					},
					"refresh_token_lifetime": {
						"description": "User session lifetime in hours",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					}
				},
				"required": [
					"min_password_strength",
					"refresh_token_lifetime",
					"invitation_token_lifetime"
				],
				"type": "object"
			},
			"SeqReference": {
				"additionalProperties": false,
				"properties": {
					"accession": {
						"type": "string"
					},
					"db": {
						"$ref": "#/components/schemas/DataSource"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"is_origin": {
						"type": "boolean"
					}
				},
				"required": [
					"id",
					"db",
					"accession",
					"is_origin"
				],
				"type": "object"
			},
			"Sequence": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Sequence.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"category": {
						"$ref": "#/components/schemas/OccurrenceCategory"
					},
					"code": {
						"type": "string"
					},
					"code_history": {
						"items": {
							"$ref": "#/components/schemas/CodeHistory"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"event": {
						"$ref": "#/components/schemas/EventInner"
					},
					"external": {
						"$ref": "#/components/schemas/OptionalExtSeqSpecificsBioMaterial"
					},
					"gene": {
						"$ref": "#/components/schemas/Gene"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identification": {
						"$ref": "#/components/schemas/Identification"
					},
					"label": {
						"type": "string"
					},
					"legacy": {
						"$ref": "#/components/schemas/OptionalLegacySeqID"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReference"
						},
						"type": "array"
					},
					"sampling": {
						"$ref": "#/components/schemas/SamplingInner"
					},
					"sequence": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"event",
					"meta",
					"sampling",
					"identification",
					"gene",
					"category",
					"code"
				],
				"type": "object"
			},
			"SequenceDataset": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SequenceDataset.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"category": {
						"$ref": "#/components/schemas/DatasetCategory"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"maintainers": {
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"pinned": {
						"type": "boolean"
					},
					"sequences": {
						"items": {
							"$ref": "#/components/schemas/Sequence"
						},
						"type": "array"
					},
					"sites": {
						"items": {
							"$ref": "#/components/schemas/SiteItem"
						},
						"type": "array"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"sites",
					"sequences",
					"maintainers",
					"meta",
					"id",
					"label",
					"slug",
					"pinned",
					"description",
					"category"
				],
				"type": "object"
			},
			"SequenceWithDetails": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SequenceWithDetails.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"category": {
						"$ref": "#/components/schemas/OccurrenceCategory"
					},
					"code": {
						"type": "string"
					},
					"code_history": {
						"items": {
							"$ref": "#/components/schemas/CodeHistory"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"event": {
						"$ref": "#/components/schemas/EventInner"
					},
					"external": {
						"$ref": "#/components/schemas/OptionalExtSeqSpecificsBioMaterial"
					},
					"gene": {
						"$ref": "#/components/schemas/Gene"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identification": {
						"$ref": "#/components/schemas/Identification"
					},
					"label": {
						"type": "string"
					},
					"legacy": {
						"$ref": "#/components/schemas/OptionalLegacySeqID"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"published_in": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceReference"
						},
						"type": "array"
					},
					"sampling": {
						"$ref": "#/components/schemas/Sampling"
					},
					"sequence": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"event",
					"meta",
					"sampling",
					"identification",
					"gene",
					"category",
					"code"
				],
				"type": "object"
			},
			"ServiceSettings": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ServiceSettings.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"geoapify_api_key": {
						"type": "string"
					}
				},
				"required": [
					"geoapify_api_key"
				],
				"type": "object"
			},
			"ServiceSettingsUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ServiceSettingsUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"geoapify_api_key": {
						"type": [
							"string",
							"null"
						]
					}
				},
				"required": [
					"geoapify_api_key"
				],
				"type": "object"
			},
			"Site": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Site.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"altitude": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"maxLength": 8,
						"minLength": 4,
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates"
					},
					"country": {
						"$ref": "#/components/schemas/OptionalCountry"
					},
					"datasets": {
						"items": {
							"$ref": "#/components/schemas/DatasetInner"
						},
						"type": "array"
					},
					"description": {
						"type": "string"
					},
					"events": {
						"items": {
							"$ref": "#/components/schemas/Event"
						},
						"type": "array"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"locality": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"minLength": 4,
						"type": "string"
					},
					"user_defined_locality": {
						"type": "boolean"
					}
				},
				"required": [
					"meta",
					"id",
					"code",
					"coordinates",
					"user_defined_locality"
				],
				"type": "object"
			},
			"SiteDataset": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SiteDataset.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"category": {
						"$ref": "#/components/schemas/DatasetCategory"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"maintainers": {
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"pinned": {
						"type": "boolean"
					},
					"sites": {
						"items": {
							"$ref": "#/components/schemas/SiteItem"
						},
						"type": "array"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"sites",
					"maintainers",
					"meta",
					"id",
					"label",
					"slug",
					"pinned",
					"description",
					"category"
				],
				"type": "object"
			},
			"SiteDatasetInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SiteDatasetInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"label": {
						"maxLength": 32,
						"minLength": 4,
						"type": "string"
					},
					"maintainers": {
						"description": "Dataset maintainers identified by their person alias. Dataset creator is always a maintainer by default.",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"new_sites": {
						"description": "New sites to include in the dataset",
						"items": {
							"$ref": "#/components/schemas/SiteInput"
						},
						"type": "array"
					},
					"pinned": {
						"type": "boolean"
					},
					"sites": {
						"description": "Existing site codes to include in the dataset",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"slug",
					"maintainers"
				],
				"type": "object"
			},
			"SiteInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SiteInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"altitude": {
						"description": "Site altitude in meters",
						"format": "int32",
						"type": "integer"
					},
					"code": {
						"description": "A short unique uppercase alphanumeric identifier",
						"examples": [
							"SITE89"
						],
						"maxLength": 10,
						"minLength": 4,
						"pattern": "[A-Z0-9]+",
						"patternDescription": "alphanum",
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates",
						"description": "Site coordinates in decimal degrees"
					},
					"country_code": {
						"description": "ISO 3166-1 alpha-3 country code",
						"examples": [
							"FRA"
						],
						"format": "country-code",
						"pattern": "[A-Z]{3}",
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"locality": {
						"description": "Nearest populated place",
						"type": "string"
					},
					"name": {
						"description": "A short descriptive name",
						"minLength": 4,
						"type": "string"
					},
					"user_defined_locality": {
						"description": "Signals if locality was manually entered by user, and automatically inferred from coordinates",
						"type": "boolean"
					}
				},
				"required": [
					"code",
					"coordinates"
				],
				"type": "object"
			},
			"SiteItem": {
				"additionalProperties": false,
				"properties": {
					"altitude": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"maxLength": 8,
						"minLength": 4,
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates"
					},
					"country": {
						"$ref": "#/components/schemas/OptionalCountry"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"locality": {
						"type": "string"
					},
					"name": {
						"minLength": 4,
						"type": "string"
					},
					"user_defined_locality": {
						"type": "boolean"
					}
				},
				"required": [
					"id",
					"code",
					"coordinates",
					"user_defined_locality"
				],
				"type": "object"
			},
			"SiteUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SiteUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"altitude": {
						"description": "Site altitude in meters",
						"format": "int32",
						"type": [
							"integer",
							"null"
						]
					},
					"code": {
						"description": "A short unique uppercase alphanumeric identifier",
						"examples": [
							"SITE89"
						],
						"maxLength": 10,
						"minLength": 4,
						"pattern": "[A-Z0-9]+",
						"patternDescription": "alphanum",
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates",
						"description": "Site coordinates in decimal degrees"
					},
					"country_code": {
						"examples": [
							"FR"
						],
						"format": "country-code",
						"pattern": "[A-Z]{2}",
						"type": [
							"string",
							"null"
						]
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"locality": {
						"description": "Nearest populated place",
						"type": [
							"string",
							"null"
						]
					},
					"name": {
						"minLength": 4,
						"type": [
							"string",
							"null"
						]
					},
					"user_defined_locality": {
						"description": "Signals whether locality was manually entered by user, and automatically inferred from coordinates",
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"SiteWithDistance": {
				"additionalProperties": false,
				"properties": {
					"altitude": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"maxLength": 8,
						"minLength": 4,
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates"
					},
					"country": {
						"$ref": "#/components/schemas/OptionalCountry"
					},
					"description": {
						"type": "string"
					},
					"distance": {
						"format": "double",
						"type": "number"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"locality": {
						"type": "string"
					},
					"name": {
						"minLength": 4,
						"type": "string"
					},
					"user_defined_locality": {
						"type": "boolean"
					}
				},
				"required": [
					"distance",
					"id",
					"code",
					"coordinates",
					"user_defined_locality"
				],
				"type": "object"
			},
			"SiteWithOccurrences": {
				"additionalProperties": false,
				"properties": {
					"altitude": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"maxLength": 8,
						"minLength": 4,
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates"
					},
					"country": {
						"$ref": "#/components/schemas/OptionalCountry"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"locality": {
						"type": "string"
					},
					"name": {
						"minLength": 4,
						"type": "string"
					},
					"occurrences": {
						"items": {
							"$ref": "#/components/schemas/OccurrenceAtSite"
						},
						"type": "array"
					},
					"user_defined_locality": {
						"type": "boolean"
					}
				},
				"required": [
					"occurrences",
					"id",
					"code",
					"coordinates",
					"user_defined_locality"
				],
				"type": "object"
			},
			"SiteWithScore": {
				"additionalProperties": false,
				"properties": {
					"altitude": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"maxLength": 8,
						"minLength": 4,
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates"
					},
					"country": {
						"$ref": "#/components/schemas/OptionalCountry"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"locality": {
						"type": "string"
					},
					"name": {
						"minLength": 4,
						"type": "string"
					},
					"score": {
						"format": "float",
						"type": "number"
					},
					"user_defined_locality": {
						"type": "boolean"
					}
				},
				"required": [
					"score",
					"id",
					"code",
					"coordinates",
					"user_defined_locality"
				],
				"type": "object"
			},
			"SitesProximityQuery": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SitesProximityQuery.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"latitude": {
						"examples": [
							43.5684
						],
						"format": "float",
						"maximum": 90,
						"minimum": -90,
						"type": "number"
					},
					"limit": {
						"format": "int64",
						"type": "integer"
					},
					"longitude": {
						"examples": [
							3.5678
						],
						"format": "float",
						"maximum": 180,
						"minimum": -180,
						"type": "number"
					},
					"radius": {
						"description": "Radius in meters",
						"examples": [
							20000
						],
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"radius",
					"latitude",
					"longitude"
				],
				"type": "object"
			},
			"SpecimenVoucher": {
				"additionalProperties": false,
				"properties": {
					"collection": {
						"type": "string"
					},
					"vouchers": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"collection",
					"vouchers"
				],
				"type": "object"
			},
			"Status": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Status.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"available": {
						"type": "boolean"
					},
					"has_api_key": {
						"type": "boolean"
					},
					"limit": {
						"format": "int64",
						"type": "integer"
					},
					"requests": {
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"available",
					"has_api_key",
					"requests",
					"limit"
				],
				"type": "object"
			},
			"Taxon": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Taxon.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonInner": {
				"additionalProperties": false,
				"properties": {
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"code": {
						"examples": [
							"Asellus_aquaticus"
						],
						"minLength": 4,
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"parent",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonRank": {
				"enum": [
					"Kingdom",
					"Phylum",
					"Class",
					"Order",
					"Family",
					"Genus",
					"Species",
					"Subspecies"
				],
				"title": "TaxonRank",
				"type": "string"
			},
			"TaxonStatus": {
				"enum": [
					"Accepted",
					"Unreferenced",
					"Unclassified"
				],
				"title": "TaxonStatus",
				"type": "string"
			},
			"TaxonUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"authorship": {
						"type": [
							"string",
							"null"
						]
					},
					"code": {
						"type": "string"
					},
					"comment": {
						"type": [
							"string",
							"null"
						]
					},
					"name": {
						"type": "string"
					},
					"parent": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank"
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus"
					}
				},
				"type": "object"
			},
			"TaxonWithLineage": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonWithLineage.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"lineage": {
						"$ref": "#/components/schemas/Lineage"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"lineage",
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonWithParentRef": {
				"additionalProperties": false,
				"properties": {
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"parent",
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonWithRelatives": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonWithRelatives.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"Taxonomy": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Taxonomy.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/Taxonomy"
						},
						"type": "array"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"URL": {
				"description": "A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.",
				"format": "uri",
				"type": "string"
			},
			"UpdatePasswordInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/UpdatePasswordInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"new_password": {
						"$ref": "#/components/schemas/PasswordInput"
					},
					"password": {
						"description": "Your current password",
						"type": "string"
					}
				},
				"required": [
					"password",
					"new_password"
				],
				"type": "object"
			},
			"Updated": {
				"additionalProperties": false,
				"properties": {
					"doi": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"updated": {
						"$ref": "#/components/schemas/DateObject"
					}
				},
				"type": "object"
			},
			"User": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_confirmed": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identity": {
						"$ref": "#/components/schemas/PersonInner"
					},
					"login": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"identity",
					"id",
					"email",
					"login",
					"role",
					"email_confirmed"
				],
				"type": "object"
			},
			"UserCredentials": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/UserCredentials.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"identifier": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"password"
				],
				"type": "object"
			},
			"UserInner": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_confirmed": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"id",
					"email",
					"login",
					"role",
					"email_confirmed"
				],
				"type": "object"
			},
			"UserInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/UserInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"password": {
						"description": "Your new password",
						"type": "string"
					},
					"password_confirmation": {
						"description": "New password confirmation",
						"type": "string"
					}
				},
				"required": [
					"login",
					"email",
					"password",
					"password_confirmation"
				],
				"type": "object"
			},
			"UserRole": {
				"enum": [
					"Visitor",
					"Contributor",
					"Maintainer",
					"Admin"
				],
				"title": "UserRole",
				"type": "string"
			},
			"UserShortIdentity": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"login",
					"name",
					"alias"
				],
				"type": "object"
			},
			"Works": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Works.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"message": {
						"$ref": "#/components/schemas/Message"
					},
					"message-type": {
						"type": "string"
					},
					"message-version": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				},
				"type": "object"
			}
		},
		"securitySchemes": {
			"bearer": {
				"bearerFormat": "JWT",
				"scheme": "bearer",
				"type": "http"
			},
			"cookieAuth": {
				"in": "cookie",
				"name": "auth_token",
				"type": "apiKey"
			}
		}
	},
	"info": {
		"contact": {
			"email": "louis.duchemin@univ-lyon1.fr",
			"name": "Louis Duchemin"
		},
		"description": "BiOME API: Biodiversity and Occurrences for Molecular Ecology",
		"title": "BiOME API",
		"version": "0.0"
	},
	"openapi": "3.1.0",
	"paths": {
		"/abiotic": {
			"get": {
				"operationId": "ListAbioticParameters",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/AbioticParameter"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List abiotic parameters",
				"tags": [
					"Sampling"
				]
			},
			"post": {
				"operationId": "CreateAbioticParameter",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AbioticParameterInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AbioticParameter"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create abiotic parameter",
				"tags": [
					"Sampling"
				]
			}
		},
		"/abiotic/{code}": {
			"delete": {
				"operationId": "DeleteAbioticParameter",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AbioticParameter"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete abiotic parameter",
				"tags": [
					"Sampling"
				]
			},
			"patch": {
				"operationId": "UpdateAbioticParameter",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AbioticParameterUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AbioticParameter"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update abiotic parameter",
				"tags": [
					"Sampling"
				]
			}
		},
		"/access-points": {
			"get": {
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "List access points",
				"tags": [
					"Sampling"
				]
			}
		},
		"/account": {
			"get": {
				"description": "Get infos of currently authenticated user account",
				"operationId": "CurrentUser",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentUserResponse"
								}
							}
						},
						"description": "The currently authenticated user"
					},
					"204": {
						"description": "No active user session"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Current user",
				"tags": [
					"Account"
				]
			}
		},
		"/account/email-confirmation": {
			"get": {
				"description": "Confirms the validity of an e-mail address associated to an account, using a token issued at the end of user registration.",
				"operationId": "ConfirmEmail",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "token",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content",
						"headers": {
							"Message": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Confirm e-mail",
				"tags": [
					"Account"
				]
			}
		},
		"/account/email-confirmation/resend": {
			"post": {
				"description": "Sends again a verification link for the provided e-mail address, if it matches a currently not verified user account.",
				"operationId": "ResendEmailVerification",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResendEmailVerificationInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Resend e-mail verification link",
				"tags": [
					"Account"
				]
			}
		},
		"/account/forgotten-password": {
			"post": {
				"description": "Requests sending a link containing a password reset token to your account email address. The link target can be provided by the client in the request body, or defaults to the API endpoint: `/api/v1/account/password-reset`. In this case, setting the new password is expected to be done programatically, e.g. through a curl request.",
				"operationId": "RequestPasswordReset",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PasswordResetRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Request password reset",
				"tags": [
					"Account"
				]
			}
		},
		"/account/login": {
			"post": {
				"description": "Authenticate using user credentials",
				"operationId": "Login",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserCredentials"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Set-Cookie": {
								"schema": {
									"description": "Session cookie storing JWT",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Login",
				"tags": [
					"Account"
				]
			}
		},
		"/account/logout": {
			"post": {
				"description": "Logout from current user session by revoking session cookies",
				"operationId": "Logout",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogoutInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content",
						"headers": {
							"Domain": {
								"schema": {
									"type": "string"
								}
							},
							"Expires": {
								"schema": {
									"type": "string"
								}
							},
							"HttpOnly": {
								"schema": {
									"type": "boolean"
								}
							},
							"MaxAge": {
								"schema": {
									"format": "int64",
									"type": "integer"
								}
							},
							"Name": {
								"schema": {
									"type": "string"
								}
							},
							"Partitioned": {
								"schema": {
									"type": "boolean"
								}
							},
							"Path": {
								"schema": {
									"type": "string"
								}
							},
							"Quoted": {
								"schema": {
									"type": "boolean"
								}
							},
							"Raw": {
								"schema": {
									"type": "string"
								}
							},
							"RawExpires": {
								"schema": {
									"type": "string"
								}
							},
							"SameSite": {
								"schema": {
									"format": "int64",
									"type": "integer"
								}
							},
							"Secure": {
								"schema": {
									"type": "boolean"
								}
							},
							"Set-Cookie": {
								"schema": {
									"type": "string"
								}
							},
							"Unparsed": {
								"schema": {
									"type": "string"
								}
							},
							"Value": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Logout",
				"tags": [
					"Account"
				]
			}
		},
		"/account/password": {
			"post": {
				"description": "Updates password of currently authenticated user",
				"operationId": "UpdatePassword",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatePasswordInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update password",
				"tags": [
					"Account"
				]
			}
		},
		"/account/password-reset": {
			"get": {
				"description": "Verifies that the password token is valid and can be used to reset a password",
				"operationId": "ValidatePasswordToken",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Validate password token",
				"tags": [
					"Account"
				]
			},
			"post": {
				"description": "Set a new password using a previously issued reset token",
				"operationId": "ResetPassword",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PasswordInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Reset password",
				"tags": [
					"Account"
				]
			}
		},
		"/account/pending": {
			"get": {
				"description": "Lists all account requests pending validation from an administrator",
				"operationId": "ListPendingUserRequests",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/PendingUserRequest"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List pending user requests",
				"tags": [
					"Account"
				]
			}
		},
		"/account/pending/{email}": {
			"delete": {
				"description": "Delete account request pending validation using the associated email",
				"operationId": "DeletePendingUserRequest",
				"parameters": [
					{
						"in": "path",
						"name": "email",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PendingUserRequest"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete pending user request",
				"tags": [
					"Account"
				]
			},
			"get": {
				"description": "Get account request pending validation using the associated email",
				"operationId": "GetPendingUserRequest",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PendingUserRequest"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get pending user request",
				"tags": [
					"Account"
				]
			}
		},
		"/account/refresh": {
			"post": {
				"description": "Refresh session using refresh token",
				"operationId": "RefreshSession",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RefreshTokenBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Set-Cookie": {
								"schema": {
									"description": "Session cookie storing JWT",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Refresh auth token",
				"tags": [
					"Account"
				]
			}
		},
		"/account/register": {
			"post": {
				"description": "Register a new account that is initially pending, and needs to be activated by an administrator. An email is sent to the registered e-mail address with a verification link. The target URL can be set by the client, otherwise it defaults to the API endpoint: `/api/v1/account/email-confirmation`",
				"operationId": "Register",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegisterInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						},
						"description": "Created"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Register new account",
				"tags": [
					"Account"
				]
			}
		},
		"/account/register/{token}": {
			"post": {
				"description": "Register an account with pre-assigned role and identity, using an invitation token",
				"operationId": "ClaimInvitation",
				"parameters": [
					{
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Set-Cookie": {
								"schema": {
									"description": "Session cookie storing JWT",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Claim invitation",
				"tags": [
					"Account"
				]
			}
		},
		"/anchors/": {
			"get": {
				"operationId": "ListAnchors",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TaxonWithParentRef"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List GBIF anchor clades",
				"tags": [
					"Taxonomy GBIF"
				]
			}
		},
		"/bio-material": {
			"get": {
				"description": "Both internal and external",
				"operationId": "ListBioMaterial",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "limit",
						"schema": {
							"format": "int64",
							"type": "integer"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "offset",
						"schema": {
							"format": "int64",
							"type": "integer"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "sort",
						"schema": {
							"$ref": "#/components/schemas/BioMatSortKey"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "order",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "search",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "owned",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "category",
						"schema": {
							"$ref": "#/components/schemas/OccurrenceCategory"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "taxon",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "whole_clade",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "has_sequences",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "is_type",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedListBioMaterialWithDetails"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List bio-material",
				"tags": [
					"Occurrences"
				]
			}
		},
		"/bio-material/external": {
			"patch": {
				"operationId": "UpdateExternalBioMat",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ExternalBioMatUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BioMaterialWithDetails"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update external bio-material",
				"tags": [
					"Occurrences"
				]
			},
			"post": {
				"operationId": "CreateExternalBioMat",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateExternalBioMatInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BioMaterialWithDetails"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create external bio-material",
				"tags": [
					"Occurrences"
				]
			}
		},
		"/bio-material/{code}": {
			"delete": {
				"description": "Delete any (internal/external) bio-material record by its code",
				"operationId": "DeleteBioMaterial",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BioMaterialWithDetails"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete bio-material",
				"tags": [
					"Occurrences"
				]
			},
			"get": {
				"description": "Both internal and external",
				"operationId": "GetBioMaterial",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BioMaterialWithDetails"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get bio-material",
				"tags": [
					"Occurrences"
				]
			}
		},
		"/crossref": {
			"get": {
				"operationId": "CrossRef",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "doi",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Works"
								}
							}
						},
						"description": "OK"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "Retrieve article infos from DOI",
				"tags": [
					"References"
				]
			},
			"post": {
				"operationId": "CrossRefBibSearch",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BibSearchResults"
								}
							}
						},
						"description": "OK"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "Retrieve article infos from query string",
				"tags": [
					"References"
				]
			}
		},
		"/data-sources": {
			"get": {
				"operationId": "ListDataSources",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/DataSource"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List external data sources",
				"tags": [
					"Data sources"
				]
			},
			"post": {
				"operationId": "CreateDataSource",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataSourceInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataSource"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Register external data source",
				"tags": [
					"Data sources"
				]
			}
		},
		"/data-sources/{code}": {
			"delete": {
				"operationId": "DeleteDataSource",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataSource"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete external data source",
				"tags": [
					"Data sources"
				]
			},
			"patch": {
				"operationId": "UpdateDataSource",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataSourceUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataSource"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update external data source",
				"tags": [
					"Data sources"
				]
			}
		},
		"/datasets": {
			"get": {
				"description": "List all datasets with optional filters and category discriminator",
				"operationId": "ListDatasets",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "pinned",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "category",
						"schema": {
							"$ref": "#/components/schemas/DatasetCategory"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "orderBy",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "limit",
						"schema": {
							"format": "int64",
							"minimum": 1,
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Dataset"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List all datasets",
				"tags": [
					"Datasets"
				]
			}
		},
		"/datasets/edit/{slug}": {
			"patch": {
				"description": "Update dataset metadata",
				"operationId": "UpdateDataset",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DatasetUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Dataset"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update dataset",
				"tags": [
					"Datasets"
				]
			}
		},
		"/datasets/occurrence": {
			"get": {
				"description": "List all occurrence datasets",
				"operationId": "ListOccurrenceDatasets",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OccurrenceDatasetListItem"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List occurrence datasets",
				"tags": [
					"Datasets"
				]
			}
		},
		"/datasets/occurrence/{slug}": {
			"get": {
				"description": "Get infos for an occurrence dataset",
				"operationId": "GetOccurrenceDataset",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OccurrenceDataset"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get occurrence dataset",
				"tags": [
					"Datasets"
				]
			}
		},
		"/datasets/pin/{slug}": {
			"patch": {
				"description": "Pin or unpin dataset from from dashboard priority display",
				"operationId": "TogglePinDataset",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Dataset"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Pin/unpin dataset",
				"tags": [
					"Datasets"
				]
			}
		},
		"/datasets/sequences": {
			"get": {
				"description": "List all sequence datasets",
				"operationId": "ListSequenceDatasets",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SequenceDataset"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List sequence datasets",
				"tags": [
					"Datasets"
				]
			}
		},
		"/datasets/sequences/{slug}": {
			"get": {
				"description": "Get infos for an sequence dataset",
				"operationId": "GetSequenceDataset",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SequenceDataset"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get sequence dataset",
				"tags": [
					"Datasets"
				]
			}
		},
		"/datasets/sites": {
			"get": {
				"description": "List all site datasets",
				"operationId": "ListSiteDatasets",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SiteDataset"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List site datasets",
				"tags": [
					"Datasets"
				]
			},
			"post": {
				"description": "Create a new site dataset with new or existing sites",
				"operationId": "CreateSiteDataset",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SiteDatasetInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SiteDataset"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create site dataset",
				"tags": [
					"Datasets"
				]
			}
		},
		"/datasets/sites/{slug}": {
			"get": {
				"description": "Get infos for a site dataset",
				"operationId": "GetSiteDataset",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SiteDataset"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get site dataset",
				"tags": [
					"Datasets"
				]
			}
		},
		"/events/{id}": {
			"delete": {
				"operationId": "DeleteEvent",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Event"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete event",
				"tags": [
					"Events"
				]
			},
			"patch": {
				"operationId": "UpdateEvent",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EventUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Event"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update event",
				"tags": [
					"Events"
				]
			}
		},
		"/events/{id}/occurrences/external": {
			"post": {
				"description": "Register new occurrence resulting from the event, including sampling specification and biomaterial identification",
				"operationId": "EventAddExternalOccurrence",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"description": "Event ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"description": "Event ID",
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ExternalOccurrenceAtEventInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BioMaterialWithDetails"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Add occurrence from event",
				"tags": [
					"Occurrences",
					"Events"
				]
			}
		},
		"/events/{id}/samplings": {
			"post": {
				"operationId": "CreateSamplingAtEvent",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SamplingInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sampling"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create sampling at event",
				"tags": [
					"Events"
				]
			}
		},
		"/events/{id}/spottings": {
			"put": {
				"operationId": "UpdateSpotting",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Taxon"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update spotting",
				"tags": [
					"Events"
				]
			}
		},
		"/fixatives": {
			"get": {
				"operationId": "ListFixatives",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Fixative"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List fixatives",
				"tags": [
					"Sampling"
				]
			},
			"post": {
				"operationId": "CreateFixative",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FixativeInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Fixative"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create fixative",
				"tags": [
					"Sampling"
				]
			}
		},
		"/fixatives/{code}": {
			"delete": {
				"operationId": "DeleteFixative",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Fixative"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete fixative",
				"tags": [
					"Sampling"
				]
			},
			"patch": {
				"operationId": "UpdateFixative",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FixativeUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Fixative"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update fixative",
				"tags": [
					"Sampling"
				]
			}
		},
		"/genes": {
			"get": {
				"operationId": "ListGenes",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Gene"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List genes",
				"tags": [
					"Sequences"
				]
			},
			"post": {
				"operationId": "CreateGene",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GeneInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Gene"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create gene",
				"tags": [
					"Sequences"
				]
			}
		},
		"/genes/{code}": {
			"delete": {
				"operationId": "DeleteGene",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Gene"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete gene",
				"tags": [
					"Sequences"
				]
			},
			"patch": {
				"operationId": "UpdateGene",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GeneUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Gene"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update gene",
				"tags": [
					"Sequences"
				]
			}
		},
		"/geoapify/reverse-geocode": {
			"post": {
				"operationId": "ReverseGeocode",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReverseGeocodeInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GeoapifyResult"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Reverse geocode coordinates using Geoapify API",
				"tags": [
					"Services"
				]
			}
		},
		"/geoapify/status": {
			"get": {
				"operationId": "GetGeoapifyStatus",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Status"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get Geoapify API status",
				"tags": [
					"Services"
				]
			}
		},
		"/geoapify/usage": {
			"get": {
				"operationId": "ListGeoapifyUsage",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/GeoapifyUsage"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List Geoapify usage",
				"tags": [
					"Services"
				]
			}
		},
		"/habitats": {
			"get": {
				"operationId": "ListHabitatGroups",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/HabitatGroup"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List habitats",
				"tags": [
					"Sampling"
				]
			},
			"post": {
				"operationId": "CreateHabitatGroup",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HabitatGroupInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HabitatGroup"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create habitat group",
				"tags": [
					"Sampling"
				]
			}
		},
		"/habitats/{code}": {
			"delete": {
				"operationId": "DeleteHabitatGroup",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HabitatGroup"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete habitat group",
				"tags": [
					"Sampling"
				]
			}
		},
		"/habitats/{label}": {
			"patch": {
				"operationId": "UpdateHabitatGroup",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "label",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HabitatGroupUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HabitatGroup"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update habitat group",
				"tags": [
					"Sampling"
				]
			}
		},
		"/import/taxonomy": {
			"put": {
				"operationId": "ImportGBIF",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImportRequestGBIF"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "Import GBIF clade",
				"tags": [
					"Taxonomy GBIF"
				]
			}
		},
		"/import/taxonomy/monitor": {
			"get": {
				"operationId": "MonitorGBIF",
				"responses": {
					"200": {
						"content": {
							"text/event-stream": {
								"schema": {
									"description": "Each oneOf object in the array represents one possible Server Sent Events (SSE) message, serialized as UTF-8 text according to the SSE specification.",
									"items": {
										"oneOf": [
											{
												"properties": {
													"data": {
														"additionalProperties": {
															"$ref": "#/components/schemas/ImportProcess"
														},
														"type": "object"
													},
													"event": {
														"const": "state",
														"description": "The event name.",
														"type": "string"
													},
													"id": {
														"description": "The event ID.",
														"type": "integer"
													},
													"retry": {
														"description": "The retry time in milliseconds.",
														"type": "integer"
													}
												},
												"required": [
													"data",
													"event"
												],
												"title": "Event state",
												"type": "object"
											}
										]
									},
									"title": "Server Sent Events",
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "Monitor GBIF taxonomy imports",
				"tags": [
					"Taxonomy GBIF"
				]
			}
		},
		"/locations/coordinates": {
			"post": {
				"operationId": "coordinatesToCountry",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LatLongCoords"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Country"
								}
							}
						},
						"description": "The country that contains the coordinates"
					},
					"204": {
						"description": "No country matches the provided coordinates"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get country from WGS84 coordinates",
				"tags": [
					"Location"
				]
			}
		},
		"/locations/coordinates/proximity": {
			"post": {
				"operationId": "sitesProximity",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SitesProximityQuery"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SiteWithDistance"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List sites within a radius of a point",
				"tags": [
					"Location"
				]
			}
		},
		"/locations/countries": {
			"get": {
				"operationId": "ListCountries",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Country"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List countries",
				"tags": [
					"Location"
				]
			}
		},
		"/locations/countries/sites-count": {
			"get": {
				"operationId": "getSitesCountByCountry",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CountryWithSitesCount"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get country list with sites count",
				"tags": [
					"Location"
				]
			}
		},
		"/locations/search": {
			"get": {
				"description": "Search sites by name, code or locality fuzzy matching a query. Returns a list of sites sorted by similarity.",
				"operationId": "searchSites",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "threshold",
						"schema": {
							"format": "float",
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SiteWithScore"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Search sites",
				"tags": [
					"Location"
				]
			}
		},
		"/occurrences/by-site": {
			"get": {
				"operationId": "OccurrencesBySite",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "datasets",
						"schema": {
							"items": {
								"type": "string"
							},
							"type": "array"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "countries",
						"schema": {
							"items": {
								"type": "string"
							},
							"type": "array"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SiteWithOccurrences"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Occurrences by site",
				"tags": [
					"Occurrences"
				]
			}
		},
		"/occurrences/overview": {
			"get": {
				"operationId": "OccurrenceOverview",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/OccurrenceOverviewItem"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Occurrences overview",
				"tags": [
					"Occurrences"
				]
			}
		},
		"/organisations": {
			"get": {
				"operationId": "ListOrganisations",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Organisation"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List organisations",
				"tags": [
					"People"
				]
			},
			"post": {
				"operationId": "CreateOrganisation",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrganisationInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Organisation"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create organisation",
				"tags": [
					"People"
				]
			}
		},
		"/organisations/{code}": {
			"delete": {
				"operationId": "DeleteOrganisation",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Organisation"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete organisation",
				"tags": [
					"People"
				]
			},
			"patch": {
				"operationId": "UpdateOrganisation",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrganisationUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Organisation"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update organisation",
				"tags": [
					"People"
				]
			}
		},
		"/persons": {
			"get": {
				"operationId": "ListPersons",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Person"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List persons",
				"tags": [
					"People"
				]
			},
			"post": {
				"operationId": "CreatePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create person",
				"tags": [
					"People"
				]
			}
		},
		"/persons/{id}": {
			"delete": {
				"operationId": "DeletePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete person",
				"tags": [
					"People"
				]
			},
			"patch": {
				"operationId": "UpdatePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update person",
				"tags": [
					"People"
				]
			}
		},
		"/persons/{id}/invite": {
			"post": {
				"description": "Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.",
				"operationId": "InvitePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InvitationInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvitationLink"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Invite person",
				"tags": [
					"People"
				]
			}
		},
		"/programs": {
			"get": {
				"operationId": "ListPrograms",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Program"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List programs",
				"tags": [
					"Datasets"
				]
			},
			"post": {
				"operationId": "CreateProgram",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProgramInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Program"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create program",
				"tags": [
					"Datasets"
				]
			}
		},
		"/programs/{code}": {
			"delete": {
				"operationId": "DeleteProgram",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Program"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete program",
				"tags": [
					"Datasets"
				]
			},
			"patch": {
				"operationId": "UpdateProgram",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProgramUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Program"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update program",
				"tags": [
					"Datasets"
				]
			}
		},
		"/references": {
			"get": {
				"operationId": "ListArticles",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Article"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List articles",
				"tags": [
					"References"
				]
			},
			"post": {
				"operationId": "CreateArticle",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ArticleInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Article"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create article",
				"tags": [
					"References"
				]
			}
		},
		"/references/{code}": {
			"delete": {
				"operationId": "DeleteArticle",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Article"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete article",
				"tags": [
					"References"
				]
			},
			"patch": {
				"operationId": "UpdateArticle",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ArticleUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Article"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update article",
				"tags": [
					"References"
				]
			}
		},
		"/sampling-methods": {
			"get": {
				"operationId": "ListSamplingMethods",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SamplingMethod"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List sampling methods",
				"tags": [
					"Sampling"
				]
			},
			"post": {
				"operationId": "CreateSamplingMethod",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SamplingMethodInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SamplingMethod"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create sampling method",
				"tags": [
					"Sampling"
				]
			}
		},
		"/sampling-methods/{code}": {
			"delete": {
				"operationId": "DeleteSamplingMethod",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SamplingMethod"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete sampling method",
				"tags": [
					"Sampling"
				]
			},
			"patch": {
				"operationId": "UpdateSamplingMethod",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SamplingMethodUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SamplingMethod"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update sampling method",
				"tags": [
					"Sampling"
				]
			}
		},
		"/samplings": {
			"post": {
				"operationId": "CreateSampling",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SamplingInputWithEvent"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sampling"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create sampling action",
				"tags": [
					"Sampling"
				]
			}
		},
		"/samplings/{id}": {
			"delete": {
				"operationId": "DeleteSampling",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sampling"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete sampling action",
				"tags": [
					"Sampling"
				]
			},
			"patch": {
				"operationId": "UpdateSampling",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SamplingUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sampling"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update sampling action",
				"tags": [
					"Sampling"
				]
			}
		},
		"/samplings/{id}/occurrences/external": {
			"post": {
				"description": "Register new occurrence resulting from the sampling action",
				"operationId": "SamplingAddExternalOccurrence",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ExternalBioMatInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BioMaterialWithDetails"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Add occurrence from sampling",
				"tags": [
					"Occurrences",
					"Sampling"
				]
			}
		},
		"/sequences": {
			"get": {
				"operationId": "ListSequences",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Sequence"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List sequences",
				"tags": [
					"Sequences"
				]
			}
		},
		"/sequences/{code}": {
			"delete": {
				"operationId": "DeleteSequence",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sequence"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete sequence",
				"tags": [
					"Sequences"
				]
			},
			"get": {
				"operationId": "GetSequence",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SequenceWithDetails"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get sequence",
				"tags": [
					"Sequences"
				]
			}
		},
		"/settings/emailing": {
			"get": {
				"operationId": "EmailSettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EmailSettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Email settings",
				"tags": [
					"Settings"
				]
			},
			"post": {
				"operationId": "UpdateEmailSettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EmailSettingsInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EmailSettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update email settings",
				"tags": [
					"Settings"
				]
			}
		},
		"/settings/emailing/test-dial": {
			"post": {
				"operationId": "TestSMTP",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EmailSettingsInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Test SMTP connection",
				"tags": [
					"Settings"
				]
			}
		},
		"/settings/icon": {
			"post": {
				"operationId": "SetAppIcon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"encoding": {
								"icon": {
									"contentType": "image/png,image/jpeg"
								}
							},
							"schema": {
								"properties": {
									"icon": {
										"contentEncoding": "binary",
										"contentMediaType": "application/octet-stream",
										"format": "binary",
										"type": "string"
									}
								},
								"required": [
									"icon"
								],
								"type": "object"
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "No Content",
						"headers": {
							"Location": {
								"schema": {
									"format": "uri",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Set app icon",
				"tags": [
					"Settings"
				]
			}
		},
		"/settings/instance": {
			"get": {
				"operationId": "InstanceSettings",
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InstanceSettings"
								}
							}
						},
						"description": "OK"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Instance settings",
				"tags": [
					"Settings"
				]
			},
			"post": {
				"operationId": "UpdateInstanceSettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InstanceSettingsInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InstanceSettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update instance settings",
				"tags": [
					"Settings"
				]
			}
		},
		"/settings/security": {
			"get": {
				"operationId": "SecuritySettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecuritySettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Security settings",
				"tags": [
					"Settings"
				]
			},
			"post": {
				"operationId": "UpdateSecuritySettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SecuritySettingsInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecuritySettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update security settings",
				"tags": [
					"Settings"
				]
			}
		},
		"/settings/services": {
			"get": {
				"operationId": "ServiceSettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceSettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Service settings",
				"tags": [
					"Settings"
				]
			},
			"patch": {
				"operationId": "UpdateServiceSettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ServiceSettingsUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceSettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update service settings",
				"tags": [
					"Settings"
				]
			}
		},
		"/sites": {
			"get": {
				"description": "List all registered sites",
				"operationId": "ListSites",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "datasets",
						"schema": {
							"items": {
								"type": "string"
							},
							"type": "array"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "countries",
						"schema": {
							"items": {
								"type": "string"
							},
							"type": "array"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Site"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List sites",
				"tags": [
					"Location"
				]
			},
			"post": {
				"description": "Create site infos using its code",
				"operationId": "CreateSite",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SiteInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Site"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create site",
				"tags": [
					"Location"
				]
			}
		},
		"/sites/{code}": {
			"get": {
				"description": "Get site infos using its code",
				"operationId": "GetSite",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Site"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get site",
				"tags": [
					"Location"
				]
			},
			"patch": {
				"description": "Update site infos using its code",
				"operationId": "UpdateSite",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SiteUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Site"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update site",
				"tags": [
					"Location"
				]
			}
		},
		"/sites/{code}/events": {
			"get": {
				"operationId": "ListSiteEvents",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Event"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List site events",
				"tags": [
					"Location"
				]
			},
			"post": {
				"description": "Register event on a site identified by its code",
				"operationId": "CreateEvent",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EventInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Event"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create event",
				"tags": [
					"Location"
				]
			}
		},
		"/sites/{code}/occurrences/external": {
			"post": {
				"description": "Register new occurrence at site, including event + sampling specification and biomaterial identification",
				"operationId": "SiteAddExternalOccurrence",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ExternalOccurrenceAtSiteInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BioMaterialWithDetails"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Add occurrence at site",
				"tags": [
					"Occurrences",
					"Location"
				]
			}
		},
		"/taxonomy": {
			"get": {
				"operationId": "GetTaxonomy",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"description": "Taxon code or UUID",
						"explode": false,
						"in": "query",
						"name": "identifier",
						"schema": {
							"description": "Taxon code or UUID",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "max-depth",
						"schema": {
							"$ref": "#/components/schemas/TaxonRank"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Taxonomy"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get taxonomy",
				"tags": [
					"Taxonomy"
				]
			}
		},
		"/taxonomy/taxa": {
			"get": {
				"operationId": "ListTaxa",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "pattern",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "ranks",
						"schema": {
							"items": {
								"$ref": "#/components/schemas/TaxonRank"
							},
							"type": "array"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "status",
						"schema": {
							"$ref": "#/components/schemas/TaxonStatus"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "anchor",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "parent",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "limit",
						"schema": {
							"format": "int64",
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TaxonWithParentRef"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List taxa",
				"tags": [
					"Taxonomy"
				]
			},
			"post": {
				"operationId": "CreateTaxon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TaxonInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaxonWithRelatives"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create taxon",
				"tags": [
					"Taxonomy"
				]
			}
		},
		"/taxonomy/taxa/{code}": {
			"delete": {
				"operationId": "DeleteTaxon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaxonWithRelatives"
								}
							}
						},
						"description": "OK"
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"404": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Not Found"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete taxon",
				"tags": [
					"Taxonomy"
				]
			},
			"get": {
				"operationId": "GetTaxon",
				"parameters": [
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaxonWithLineage"
								}
							}
						},
						"description": "OK"
					},
					"404": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Not Found"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get taxon",
				"tags": [
					"Taxonomy"
				]
			},
			"patch": {
				"operationId": "UpdateTaxon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TaxonUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Taxon"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"404": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Not Found"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update taxon",
				"tags": [
					"Taxonomy"
				]
			}
		}
	},
	"security": [
		{
			"bearer": []
		},
		{
			"cookieAuth": []
		}
	],
	"servers": [
		{
			"url": "/api/v1"
		}
	]
}