{
	"components": {
		"schemas": {
			"AbioticMeasurement": {
				"additionalProperties": false,
				"properties": {
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"param": {
						"$ref": "#/components/schemas/AbioticParameter"
					},
					"value": {
						"format": "float",
						"type": "number"
					}
				},
				"required": [
					"id",
					"param",
					"value"
				],
				"type": "object"
			},
			"AbioticParameter": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/AbioticParameter.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"unit": {
						"type": "string"
					}
				},
				"required": [
					"unit",
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"AbioticParameterInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/AbioticParameterInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"unit": {
						"type": "string"
					}
				},
				"required": [
					"unit",
					"label",
					"code"
				],
				"type": "object"
			},
			"AuthenticationResponse": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/AuthenticationResponse.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"auth_token": {
						"description": "JSON Web Token",
						"examples": [
							"xxxxx.yyyyy.zzzzz"
						],
						"type": "string"
					},
					"auth_token_expiration": {
						"description": "Time at which auth token expires",
						"format": "date-time",
						"type": "string"
					},
					"messages": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"refresh_token": {
						"description": "Session refresh token",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"messages",
					"user",
					"auth_token",
					"refresh_token",
					"auth_token_expiration"
				],
				"type": "object"
			},
			"Coordinates": {
				"additionalProperties": false,
				"properties": {
					"latitude": {
						"examples": [
							39.1137
						],
						"format": "float",
						"maximum": 90,
						"minimum": -90,
						"type": "number"
					},
					"longitude": {
						"examples": [
							9.5064
						],
						"format": "float",
						"maximum": 180,
						"minimum": -180,
						"type": "number"
					},
					"precision": {
						"$ref": "#/components/schemas/CoordinatesPrecision",
						"description": "Where the coordinates point to"
					}
				},
				"required": [
					"precision",
					"latitude",
					"longitude"
				],
				"type": "object"
			},
			"CoordinatesPrecision": {
				"enum": [
					"\u003c100m",
					"\u003c1km",
					"\u003c10km",
					"10-100km",
					"Unknown"
				],
				"title": "CoordinatesPrecision",
				"type": "string"
			},
			"Country": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"examples": [
							"DE"
						],
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"name": {
						"examples": [
							"Germany"
						],
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"code"
				],
				"type": "object"
			},
			"CurrentUserResponse": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/CurrentUserResponse.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"auth_token": {
						"description": "JSON Web Token",
						"examples": [
							"xxxxx.yyyyy.zzzzz"
						],
						"type": "string"
					},
					"auth_token_expiration": {
						"description": "Time at which auth token expires",
						"format": "date-time",
						"type": "string"
					},
					"refresh_token": {
						"description": "Session refresh token",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"user",
					"auth_token",
					"refresh_token",
					"auth_token_expiration"
				],
				"type": "object"
			},
			"Dataset": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Dataset.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"maintainers": {
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"sites": {
						"items": {
							"$ref": "#/components/schemas/SiteItem"
						},
						"type": "array"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"sites",
					"maintainers",
					"meta",
					"id",
					"label",
					"slug",
					"description"
				],
				"type": "object"
			},
			"DatasetInner": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"label",
					"slug",
					"description"
				],
				"type": "object"
			},
			"DatasetInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/DatasetInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"label": {
						"maxLength": 32,
						"minLength": 4,
						"type": "string"
					},
					"maintainers": {
						"description": "Dataset maintainers identified by their person alias. Dataset creator is always a maintainer by default.",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"new_sites": {
						"description": "New sites to include in the dataset",
						"items": {
							"$ref": "#/components/schemas/SiteInput"
						},
						"type": "array"
					},
					"sites": {
						"description": "Existing site codes to include in the dataset",
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"label",
					"maintainers"
				],
				"type": "object"
			},
			"DatasetUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/DatasetUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"label": {
						"maxLength": 32,
						"minLength": 4,
						"type": "string"
					},
					"maintainers": {
						"description": "Dataset maintainers identified by their person alias. Dataset creator is always a maintainer by default.",
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"DatePrecision": {
				"enum": [
					"Day",
					"Month",
					"Year",
					"Unknown"
				],
				"title": "DatePrecision",
				"type": "string"
			},
			"DateWithPrecision": {
				"additionalProperties": false,
				"properties": {
					"date": {
						"format": "date-time",
						"type": "string"
					},
					"precision": {
						"$ref": "#/components/schemas/DatePrecision"
					}
				},
				"required": [
					"precision"
				],
				"type": "object"
			},
			"EmailSettings": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/EmailSettings.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"from_address": {
						"format": "email",
						"type": "string"
					},
					"from_name": {
						"type": "string"
					},
					"host": {
						"description": "SMTP domain that handles email sending",
						"format": "hostname",
						"type": "string"
					},
					"password": {
						"description": "SMTP password",
						"type": "string"
					},
					"port": {
						"description": "SMTP port",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					},
					"user": {
						"description": "SMTP login",
						"format": "uri",
						"type": "string"
					}
				},
				"required": [
					"from_name",
					"from_address",
					"host",
					"port",
					"user",
					"password"
				],
				"type": "object"
			},
			"EmailSettingsInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/EmailSettingsInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"from_address": {
						"format": "email",
						"type": "string"
					},
					"from_name": {
						"type": "string"
					},
					"host": {
						"description": "SMTP domain that handles email sending",
						"format": "hostname",
						"type": "string"
					},
					"password": {
						"description": "SMTP password",
						"type": "string"
					},
					"port": {
						"description": "SMTP port",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					},
					"user": {
						"description": "SMTP login",
						"format": "uri",
						"type": "string"
					}
				},
				"required": [
					"from_name",
					"from_address",
					"host",
					"port",
					"user",
					"password"
				],
				"type": "object"
			},
			"ErrorDetail": {
				"additionalProperties": false,
				"properties": {
					"location": {
						"description": "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
						"type": "string"
					},
					"message": {
						"description": "Error message text",
						"type": "string"
					},
					"value": {
						"description": "The value at the given location"
					}
				},
				"type": "object"
			},
			"ErrorModel": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ErrorModel.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"detail": {
						"description": "A human-readable explanation specific to this occurrence of the problem.",
						"examples": [
							"Property foo is required but is missing."
						],
						"type": "string"
					},
					"errors": {
						"description": "Optional list of individual error details",
						"items": {
							"$ref": "#/components/schemas/ErrorDetail"
						},
						"type": "array"
					},
					"instance": {
						"description": "A URI reference that identifies the specific occurrence of the problem.",
						"examples": [
							"https://example.com/error-log/abc123"
						],
						"format": "uri",
						"type": "string"
					},
					"status": {
						"description": "HTTP status code",
						"examples": [
							400
						],
						"format": "int64",
						"type": "integer"
					},
					"title": {
						"description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
						"examples": [
							"Bad Request"
						],
						"type": "string"
					},
					"type": {
						"default": "about:blank",
						"description": "A URI reference to human-readable documentation for the error.",
						"examples": [
							"https://example.com/errors/example"
						],
						"format": "uri",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Event": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Event.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"abiotic_measurements": {
						"items": {
							"$ref": "#/components/schemas/AbioticMeasurement"
						},
						"type": "array"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"performed_by": {
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"minLength": 1,
						"type": "array"
					},
					"performed_on": {
						"$ref": "#/components/schemas/DateWithPrecision"
					},
					"programs": {
						"items": {
							"$ref": "#/components/schemas/ProgramInner"
						},
						"type": "array"
					},
					"samplings": {
						"items": {
							"$ref": "#/components/schemas/Sampling"
						},
						"type": "array"
					},
					"site": {
						"$ref": "#/components/schemas/SiteInfo"
					},
					"spotting": {
						"$ref": "#/components/schemas/Spotting"
					}
				},
				"required": [
					"id",
					"site",
					"performed_by",
					"performed_on",
					"abiotic_measurements",
					"samplings",
					"spotting",
					"meta"
				],
				"type": "object"
			},
			"EventUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/EventUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"performed_by": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"performed_on": {
						"$ref": "#/components/schemas/DateWithPrecision"
					},
					"programs": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					}
				},
				"required": [
					"performed_on",
					"programs"
				],
				"type": "object"
			},
			"Fixative": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Fixative.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"FixativeInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/FixativeInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"code"
				],
				"type": "object"
			},
			"Gene": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Gene.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"is_MOTU_delimiter": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"is_MOTU_delimiter",
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"GeneInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/GeneInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"is_MOTU_delimiter": {
						"default": false,
						"type": "boolean"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"code"
				],
				"type": "object"
			},
			"Habitat": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"description": "Optional habitat description",
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"incompatible": {
						"items": {
							"$ref": "#/components/schemas/HabitatRecord"
						},
						"type": "array"
					},
					"label": {
						"description": "A short label for the habitat.",
						"examples": [
							"Lotic"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"meta",
					"id",
					"label"
				],
				"type": "object"
			},
			"HabitatGroup": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/HabitatGroup.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"depends": {
						"$ref": "#/components/schemas/OptionalHabitatRecord"
					},
					"elements": {
						"items": {
							"$ref": "#/components/schemas/HabitatRecord"
						},
						"type": "array"
					},
					"exclusive_elements": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"description": "Name for the group of habitat tags",
						"examples": [
							"Water flow"
						],
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"id",
					"label",
					"exclusive_elements",
					"depends",
					"elements",
					"meta"
				],
				"type": "object"
			},
			"HabitatGroupInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/HabitatGroupInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"depends": {
						"description": "Habitat tag that this group is a refinement of",
						"examples": [
							"Aquatic, Surface"
						],
						"type": "string"
					},
					"elements": {
						"items": {
							"$ref": "#/components/schemas/HabitatInput"
						},
						"minItems": 1,
						"type": "array"
					},
					"exclusive_elements": {
						"type": "boolean"
					},
					"label": {
						"description": "Name for the group of habitat tags",
						"examples": [
							"Water flow"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					}
				},
				"required": [
					"label",
					"elements"
				],
				"type": "object"
			},
			"HabitatGroupUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/HabitatGroupUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"create_tags": {
						"items": {
							"$ref": "#/components/schemas/HabitatInput"
						},
						"type": "array"
					},
					"delete_tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"depends": {
						"type": [
							"string",
							"null"
						]
					},
					"exclusive_elements": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"update_tags": {
						"additionalProperties": {
							"$ref": "#/components/schemas/HabitatUpdate"
						},
						"type": "object"
					}
				},
				"type": "object"
			},
			"HabitatInput": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"description": "Optional habitat description",
						"type": "string"
					},
					"label": {
						"description": "A short label for the habitat.",
						"examples": [
							"Lotic"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					}
				},
				"required": [
					"label"
				],
				"type": "object"
			},
			"HabitatRecord": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"description": "Optional habitat description",
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"incompatible": {
						"items": {
							"$ref": "#/components/schemas/HabitatRecord"
						},
						"type": "array"
					},
					"label": {
						"description": "A short label for the habitat.",
						"examples": [
							"Lotic"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					}
				},
				"required": [
					"id",
					"label"
				],
				"type": "object"
			},
			"HabitatUpdate": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"label": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"ImportProcess": {
				"additionalProperties": false,
				"properties": {
					"GBIF_ID": {
						"format": "int64",
						"type": "integer"
					},
					"done": {
						"type": "boolean"
					},
					"error": {},
					"expected": {
						"format": "int64",
						"type": "integer"
					},
					"imported": {
						"format": "int64",
						"type": "integer"
					},
					"name": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank"
					},
					"started": {
						"format": "date-time",
						"type": "string"
					}
				},
				"required": [
					"name",
					"GBIF_ID",
					"expected",
					"imported",
					"rank",
					"started",
					"done",
					"error"
				],
				"type": "object"
			},
			"ImportRequestGBIF": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ImportRequestGBIF.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"children": {
						"description": "Import whole clade, including the taxon descendants",
						"type": "boolean"
					},
					"key": {
						"description": "Target GBIF taxon key",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"key",
					"children"
				],
				"type": "object"
			},
			"InstanceSettings": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InstanceSettings.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"allow_contributor_signup": {
						"description": "Whether requests to contribute to the database can be made.",
						"type": "boolean"
					},
					"description": {
						"type": "string"
					},
					"name": {
						"description": "The name of this database platform",
						"type": "string"
					},
					"public": {
						"description": "Whether the platform is accessible to unauthenticated users",
						"type": "boolean"
					}
				},
				"required": [
					"description",
					"name",
					"public",
					"allow_contributor_signup"
				],
				"type": "object"
			},
			"InstanceSettingsInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InstanceSettingsInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"allow_contributor_signup": {
						"description": "Whether requests to contribute to the database can be made.",
						"type": "boolean"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"name": {
						"description": "The name of this database platform",
						"type": "string"
					},
					"public": {
						"description": "Whether the platform is accessible to unauthenticated users",
						"type": "boolean"
					}
				},
				"required": [
					"name",
					"public",
					"allow_contributor_signup"
				],
				"type": "object"
			},
			"Institution": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Institution.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"LEHNA"
						],
						"maxLength": 12,
						"minLength": 2,
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/InstitutionKind",
						"examples": [
							"Lab"
						]
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"maxLength": 128,
						"minLength": 10,
						"type": "string"
					},
					"people": {
						"description": "Known members of this institution",
						"items": {
							"$ref": "#/components/schemas/PersonUser"
						},
						"type": "array"
					}
				},
				"required": [
					"meta",
					"id",
					"name",
					"code",
					"kind"
				],
				"type": "object"
			},
			"InstitutionInner": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"examples": [
							"LEHNA"
						],
						"maxLength": 12,
						"minLength": 2,
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/InstitutionKind",
						"examples": [
							"Lab"
						]
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"maxLength": 128,
						"minLength": 10,
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"code",
					"kind"
				],
				"type": "object"
			},
			"InstitutionInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InstitutionInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"LEHNA"
						],
						"maxLength": 12,
						"minLength": 2,
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": "string"
					},
					"kind": {
						"$ref": "#/components/schemas/InstitutionKind",
						"examples": [
							"Lab"
						]
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"maxLength": 128,
						"minLength": 10,
						"type": "string"
					}
				},
				"required": [
					"name",
					"code",
					"kind"
				],
				"type": "object"
			},
			"InstitutionKind": {
				"enum": [
					"Lab",
					"FundingAgency",
					"SequencingPlatform",
					"Other"
				],
				"title": "InstitutionKind",
				"type": "string"
			},
			"InstitutionUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InstitutionUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"LEHNA"
						],
						"type": "string"
					},
					"description": {
						"examples": [
							"Where this database was born."
						],
						"type": [
							"string",
							"null"
						]
					},
					"kind": {
						"$ref": "#/components/schemas/InstitutionKind",
						"examples": [
							"Lab"
						],
						"type": [
							"",
							"null"
						]
					},
					"name": {
						"examples": [
							"Laboratoire d'Écologie des Hydrosystèmes Naturels et Anthropisés"
						],
						"type": "string"
					}
				},
				"type": "object"
			},
			"InvitationInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InvitationInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"description": "E-mail address of the recipient of the invitation",
						"format": "email",
						"type": "string"
					},
					"handler": {
						"$ref": "#/components/schemas/URL",
						"description": "A URL template with a {token} parameter, which implements the UI to validate the invitation token and fill a registration form.",
						"examples": [
							"http://example.com/register/{token}"
						],
						"format": "uri-template"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"email",
					"role"
				],
				"type": "object"
			},
			"InvitationLink": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/InvitationLink.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"invitation_link": {
						"$ref": "#/components/schemas/URL",
						"description": "The generated URL containing a registration token that can be shared to the invitee."
					}
				},
				"required": [
					"invitation_link"
				],
				"type": "object"
			},
			"Lineage": {
				"additionalProperties": false,
				"properties": {
					"class": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"family": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"genus": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"kingdom": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"order": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"phylum": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"species": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"subspecies": {
						"$ref": "#/components/schemas/OptionalTaxon"
					}
				},
				"type": "object"
			},
			"LogoutInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/LogoutInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"refresh_token": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Meta": {
				"additionalProperties": false,
				"properties": {
					"created": {
						"format": "date-time",
						"type": "string"
					},
					"created_by": {
						"$ref": "#/components/schemas/UserShortIdentity"
					},
					"last_updated": {
						"format": "date-time",
						"type": "string"
					},
					"modified": {
						"format": "date-time",
						"type": "string"
					},
					"updated_by": {
						"$ref": "#/components/schemas/UserShortIdentity"
					}
				},
				"required": [
					"created",
					"last_updated"
				],
				"type": "object"
			},
			"OptionalHabitatRecord": {
				"additionalProperties": false,
				"properties": {
					"description": {
						"description": "Optional habitat description",
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"incompatible": {
						"items": {
							"$ref": "#/components/schemas/HabitatRecord"
						},
						"type": "array"
					},
					"label": {
						"description": "A short label for the habitat.",
						"examples": [
							"Lotic"
						],
						"maxLength": 32,
						"minLength": 3,
						"type": "string"
					}
				},
				"required": [
					"id",
					"label"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalPerson": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"OptionalTaxon": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Taxon.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": [
					"object",
					"null"
				]
			},
			"OptionalUserInner": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_confirmed": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"id",
					"email",
					"login",
					"role",
					"email_confirmed"
				],
				"type": [
					"object",
					"null"
				]
			},
			"PasswordInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PasswordInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"password": {
						"description": "Your new password",
						"type": "string"
					},
					"password_confirmation": {
						"description": "New password confirmation",
						"type": "string"
					}
				},
				"required": [
					"password",
					"password_confirmation"
				],
				"type": "object"
			},
			"PasswordResetRequest": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PasswordResetRequest.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"handler": {
						"description": "A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.",
						"format": "uri",
						"type": "string"
					}
				},
				"required": [
					"email"
				],
				"type": "object"
			},
			"PendingUserRequest": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PendingUserRequest.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"created_on": {
						"format": "date-time",
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_verified": {
						"type": "boolean"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"institution": {
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"motive": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"full_name",
					"created_on",
					"email_verified",
					"email",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PendingUserRequestInput": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"institution": {
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"motive": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"Person": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Person.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"institutions": {
						"items": {
							"$ref": "#/components/schemas/InstitutionInner"
						},
						"type": "array"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					},
					"user": {
						"$ref": "#/components/schemas/OptionalUserInner"
					}
				},
				"required": [
					"institutions",
					"meta",
					"user",
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PersonInner": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PersonInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PersonInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"institutions": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					}
				},
				"required": [
					"institutions",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"PersonUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/PersonUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": [
							"string",
							"null"
						]
					},
					"contact": {
						"type": [
							"string",
							"null"
						]
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"institutions": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					}
				},
				"type": "object"
			},
			"PersonUser": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"contact": {
						"format": "email",
						"type": "string"
					},
					"first_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"last_name": {
						"maxLength": 32,
						"minLength": 2,
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					},
					"user": {
						"$ref": "#/components/schemas/OptionalUserInner"
					}
				},
				"required": [
					"user",
					"id",
					"full_name",
					"alias",
					"contact",
					"comment",
					"first_name",
					"last_name"
				],
				"type": "object"
			},
			"Program": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Program.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"end_year": {
						"examples": [
							2025
						],
						"format": "int64",
						"type": "integer"
					},
					"funding_agencies": {
						"items": {
							"$ref": "#/components/schemas/InstitutionInner"
						},
						"type": "array"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"managers": {
						"items": {
							"$ref": "#/components/schemas/PersonInner"
						},
						"minItems": 1,
						"type": "array"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"start_year": {
						"examples": [
							2019
						],
						"format": "int64",
						"minimum": 1900,
						"type": "integer"
					}
				},
				"required": [
					"managers",
					"funding_agencies",
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"ProgramInner": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"end_year": {
						"examples": [
							2025
						],
						"format": "int64",
						"type": "integer"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"start_year": {
						"examples": [
							2019
						],
						"format": "int64",
						"minimum": 1900,
						"type": "integer"
					}
				},
				"required": [
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"ProgramInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ProgramInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"PHD_ALICE"
						],
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"end_year": {
						"examples": [
							2025
						],
						"format": "int32",
						"type": "integer"
					},
					"funding_agencies": {
						"examples": [
							[
								"CNRS"
							]
						],
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"label": {
						"examples": [
							"Alice's PhD"
						],
						"type": "string"
					},
					"managers": {
						"examples": [
							[
								"adoe",
								"fmalard"
							]
						],
						"items": {
							"type": "string"
						},
						"minItems": 1,
						"type": "array"
					},
					"start_year": {
						"examples": [
							2022
						],
						"format": "int32",
						"minimum": 1900,
						"type": "integer"
					}
				},
				"required": [
					"label",
					"code",
					"managers"
				],
				"type": "object"
			},
			"ProgramUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ProgramUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"examples": [
							"PHD_ALICE"
						],
						"type": "string"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"end_year": {
						"examples": [
							2025
						],
						"format": "int32",
						"type": [
							"integer",
							"null"
						]
					},
					"funding_agencies": {
						"examples": [
							[
								"CNRS"
							]
						],
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"label": {
						"examples": [
							"Alice's PhD"
						],
						"type": "string"
					},
					"managers": {
						"examples": [
							[
								"adoe",
								"fmalard"
							]
						],
						"items": {
							"type": "string"
						},
						"minItems": 1,
						"type": [
							"array",
							"null"
						]
					},
					"start_year": {
						"examples": [
							2022
						],
						"format": "int32",
						"minimum": 1900,
						"type": [
							"integer",
							"null"
						]
					}
				},
				"type": "object"
			},
			"RefreshTokenBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/RefreshTokenBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"refresh_token": {
						"type": "string"
					}
				},
				"required": [
					"refresh_token"
				],
				"type": "object"
			},
			"RegisterInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/RegisterInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/PendingUserRequestInput"
					},
					"verification_path": {
						"type": "string"
					}
				},
				"required": [
					"data",
					"verification_path"
				],
				"type": "object"
			},
			"ResendEmailVerificationInputBody": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/ResendEmailVerificationInputBody.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"verification_url": {
						"description": "A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.",
						"format": "uri",
						"type": "string"
					}
				},
				"required": [
					"email",
					"verification_url"
				],
				"type": "object"
			},
			"Sampling": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Sampling.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"access_points": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"duration": {
						"description": "Sampling duration in minutes",
						"format": "int64",
						"type": "integer"
					},
					"fixatives": {
						"items": {
							"$ref": "#/components/schemas/Fixative"
						},
						"type": "array"
					},
					"habitats": {
						"items": {
							"$ref": "#/components/schemas/Habitat"
						},
						"type": "array"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"methods": {
						"items": {
							"$ref": "#/components/schemas/SamplingMethod"
						},
						"type": "array"
					},
					"target": {
						"$ref": "#/components/schemas/SamplingTarget"
					}
				},
				"required": [
					"id",
					"target",
					"methods",
					"fixatives",
					"habitats",
					"access_points",
					"meta"
				],
				"type": "object"
			},
			"SamplingInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"access_points": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"comments": {
						"type": "string"
					},
					"duration": {
						"description": "Sampling duration in minutes",
						"format": "int32",
						"type": "integer"
					},
					"event_id": {
						"type": "string"
					},
					"fixatives": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"habitats": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"methods": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"target_kind": {
						"$ref": "#/components/schemas/SamplingTargetKind"
					},
					"target_taxa": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"event_id",
					"target_kind"
				],
				"type": "object"
			},
			"SamplingMethod": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingMethod.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					}
				},
				"required": [
					"meta",
					"id",
					"label",
					"code"
				],
				"type": "object"
			},
			"SamplingMethodInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingMethodInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"code"
				],
				"type": "object"
			},
			"SamplingTarget": {
				"additionalProperties": false,
				"properties": {
					"kind": {
						"$ref": "#/components/schemas/SamplingTargetKind"
					},
					"target_taxa": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					}
				},
				"required": [
					"kind"
				],
				"type": "object"
			},
			"SamplingTargetKind": {
				"enum": [
					"Community",
					"Unknown",
					"Taxa"
				],
				"title": "SamplingTargetKind",
				"type": "string"
			},
			"SamplingUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SamplingUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"access_points": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"comments": {
						"type": [
							"string",
							"null"
						]
					},
					"duration": {
						"description": "Sampling duration in minutes",
						"format": "int32",
						"type": [
							"integer",
							"null"
						]
					},
					"fixatives": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"habitats": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"methods": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					},
					"target_kind": {
						"$ref": "#/components/schemas/SamplingTargetKind"
					},
					"target_taxa": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					}
				},
				"type": "object"
			},
			"SecuritySettings": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SecuritySettings.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"invitation_token_lifetime": {
						"description": "Invitation token lifetime in days",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					},
					"min_password_strength": {
						"description": "The level of complexity required for account passwords.",
						"format": "int32",
						"maximum": 5,
						"minimum": 3,
						"type": "integer"
					},
					"refresh_token_lifetime": {
						"description": "User session lifetime in hours",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					}
				},
				"required": [
					"min_password_strength",
					"refresh_token_lifetime",
					"invitation_token_lifetime"
				],
				"type": "object"
			},
			"SecuritySettingsInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SecuritySettingsInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"invitation_token_lifetime": {
						"description": "Invitation token lifetime in days",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					},
					"min_password_strength": {
						"description": "The level of complexity required for account passwords.",
						"format": "int32",
						"maximum": 5,
						"minimum": 3,
						"type": "integer"
					},
					"refresh_token_lifetime": {
						"description": "User session lifetime in hours",
						"format": "int32",
						"minimum": 1,
						"type": "integer"
					}
				},
				"required": [
					"min_password_strength",
					"refresh_token_lifetime",
					"invitation_token_lifetime"
				],
				"type": "object"
			},
			"Site": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Site.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"access_point": {
						"type": "string"
					},
					"altitude": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"maxLength": 8,
						"minLength": 4,
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates"
					},
					"country": {
						"$ref": "#/components/schemas/Country"
					},
					"datasets": {
						"items": {
							"$ref": "#/components/schemas/DatasetInner"
						},
						"type": "array"
					},
					"description": {
						"type": "string"
					},
					"events": {
						"items": {
							"$ref": "#/components/schemas/Event"
						},
						"type": "array"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"locality": {
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"minLength": 4,
						"type": "string"
					}
				},
				"required": [
					"datasets",
					"events",
					"meta",
					"id",
					"name",
					"code",
					"description",
					"coordinates",
					"country"
				],
				"type": "object"
			},
			"SiteInfo": {
				"additionalProperties": false,
				"properties": {
					"code": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"code"
				],
				"type": "object"
			},
			"SiteInput": {
				"additionalProperties": false,
				"properties": {
					"altitude": {
						"description": "Site altitude in meters",
						"format": "int32",
						"type": "integer"
					},
					"code": {
						"description": "A short unique uppercase alphanumeric identifier",
						"examples": [
							"SITE89"
						],
						"maxLength": 10,
						"minLength": 4,
						"pattern": "[A-Z0-9]+",
						"patternDescription": "alphanum",
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates",
						"description": "Site coordinates in decimal degrees"
					},
					"country_code": {
						"examples": [
							"FR"
						],
						"format": "country-code",
						"pattern": "[A-Z]{2}",
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"locality": {
						"description": "Nearest populated place",
						"type": "string"
					},
					"name": {
						"minLength": 4,
						"type": "string"
					}
				},
				"required": [
					"name",
					"code",
					"coordinates",
					"country_code"
				],
				"type": "object"
			},
			"SiteItem": {
				"additionalProperties": false,
				"properties": {
					"access_point": {
						"type": "string"
					},
					"altitude": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"maxLength": 8,
						"minLength": 4,
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates"
					},
					"country": {
						"$ref": "#/components/schemas/Country"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"locality": {
						"type": "string"
					},
					"name": {
						"minLength": 4,
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"code",
					"description",
					"coordinates",
					"country"
				],
				"type": "object"
			},
			"SiteUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SiteUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"altitude": {
						"description": "Site altitude in meters",
						"format": "int32",
						"type": [
							"integer",
							"null"
						]
					},
					"code": {
						"description": "A short unique uppercase alphanumeric identifier",
						"examples": [
							"SITE89"
						],
						"maxLength": 10,
						"minLength": 4,
						"pattern": "[A-Z0-9]+",
						"patternDescription": "alphanum",
						"type": "string"
					},
					"coordinates": {
						"$ref": "#/components/schemas/Coordinates",
						"description": "Site coordinates in decimal degrees"
					},
					"country_code": {
						"examples": [
							"FR"
						],
						"format": "country-code",
						"pattern": "[A-Z]{2}",
						"type": "string"
					},
					"description": {
						"type": [
							"string",
							"null"
						]
					},
					"locality": {
						"description": "Nearest populated place",
						"type": [
							"string",
							"null"
						]
					},
					"name": {
						"minLength": 4,
						"type": "string"
					}
				},
				"required": [
					"name",
					"code",
					"coordinates",
					"country_code"
				],
				"type": "object"
			},
			"Spotting": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Spotting.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"comments": {
						"type": "string"
					},
					"target_taxa": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"SpottingUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/SpottingUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"comments": {
						"type": [
							"string",
							"null"
						]
					},
					"target_taxa": {
						"items": {
							"type": "string"
						},
						"type": [
							"array",
							"null"
						]
					}
				},
				"type": "object"
			},
			"Taxon": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Taxon.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"code": {
						"examples": [
							"Asellus_aquaticus"
						],
						"minLength": 4,
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"parent",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonRank": {
				"enum": [
					"Kingdom",
					"Phylum",
					"Class",
					"Order",
					"Family",
					"Genus",
					"Species",
					"Subspecies"
				],
				"title": "TaxonRank",
				"type": "string"
			},
			"TaxonStatus": {
				"enum": [
					"Accepted",
					"Unreferenced",
					"Unclassified"
				],
				"title": "TaxonStatus",
				"type": "string"
			},
			"TaxonUpdate": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonUpdate.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"authorship": {
						"type": [
							"string",
							"null"
						]
					},
					"code": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"parent": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank"
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus"
					}
				},
				"type": "object"
			},
			"TaxonWithLineage": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonWithLineage.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"lineage": {
						"$ref": "#/components/schemas/Lineage"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"lineage",
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonWithParentRef": {
				"additionalProperties": false,
				"properties": {
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"type": "string"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"parent",
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"TaxonWithRelatives": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/TaxonWithRelatives.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/Taxon"
						},
						"type": "array"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"Taxonomy": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/Taxonomy.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"GBIF_ID": {
						"examples": [
							2206247
						],
						"format": "int64",
						"type": "integer"
					},
					"anchor": {
						"type": "boolean"
					},
					"authorship": {
						"examples": [
							"(Linnaeus, 1758)"
						],
						"type": "string"
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/Taxonomy"
						},
						"type": "array"
					},
					"children_count": {
						"format": "int64",
						"type": "integer"
					},
					"code": {
						"examples": [
							"ASEaquaticus"
						],
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"meta": {
						"$ref": "#/components/schemas/Meta"
					},
					"name": {
						"examples": [
							"Asellus aquaticus"
						],
						"type": "string"
					},
					"parent": {
						"$ref": "#/components/schemas/OptionalTaxon"
					},
					"rank": {
						"$ref": "#/components/schemas/TaxonRank",
						"examples": [
							"Species"
						]
					},
					"status": {
						"$ref": "#/components/schemas/TaxonStatus",
						"examples": [
							"Accepted"
						]
					}
				},
				"required": [
					"id",
					"code",
					"anchor",
					"children_count",
					"meta",
					"name",
					"status",
					"rank"
				],
				"type": "object"
			},
			"URL": {
				"description": "A URL used to generate the verification link, which can be set by the web client. Verification token will be added as a URL query parameter.",
				"format": "uri",
				"type": "string"
			},
			"UpdatePasswordInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/UpdatePasswordInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"new_password": {
						"$ref": "#/components/schemas/PasswordInput"
					},
					"password": {
						"description": "Your current password",
						"type": "string"
					}
				},
				"required": [
					"password",
					"new_password"
				],
				"type": "object"
			},
			"User": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_confirmed": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"identity": {
						"$ref": "#/components/schemas/OptionalPerson"
					},
					"login": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"identity",
					"id",
					"email",
					"login",
					"role",
					"email_confirmed"
				],
				"type": "object"
			},
			"UserCredentials": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/UserCredentials.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"identifier": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"password"
				],
				"type": "object"
			},
			"UserInner": {
				"additionalProperties": false,
				"properties": {
					"email": {
						"format": "email",
						"type": "string"
					},
					"email_confirmed": {
						"type": "boolean"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"role": {
						"$ref": "#/components/schemas/UserRole"
					}
				},
				"required": [
					"id",
					"email",
					"login",
					"role",
					"email_confirmed"
				],
				"type": "object"
			},
			"UserInput": {
				"additionalProperties": false,
				"properties": {
					"$schema": {
						"description": "A URL to the JSON Schema for this object.",
						"examples": [
							"/api/v1/schemas/UserInput.json"
						],
						"format": "uri",
						"readOnly": true,
						"type": "string"
					},
					"email": {
						"format": "email",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"password": {
						"description": "Your new password",
						"type": "string"
					},
					"password_confirmation": {
						"description": "New password confirmation",
						"type": "string"
					}
				},
				"required": [
					"login",
					"email",
					"password",
					"password_confirmation"
				],
				"type": "object"
			},
			"UserRole": {
				"enum": [
					"Visitor",
					"Contributor",
					"Maintainer",
					"Admin"
				],
				"title": "UserRole",
				"type": "string"
			},
			"UserShortIdentity": {
				"additionalProperties": false,
				"properties": {
					"alias": {
						"type": "string"
					},
					"id": {
						"format": "uuid",
						"type": "string"
					},
					"login": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"login",
					"name",
					"alias"
				],
				"type": [
					"object",
					"null"
				]
			}
		},
		"securitySchemes": {
			"bearer": {
				"bearerFormat": "JWT",
				"scheme": "bearer",
				"type": "http"
			},
			"cookieAuth": {
				"in": "cookie",
				"name": "auth_token",
				"type": "apiKey"
			}
		}
	},
	"info": {
		"contact": {
			"email": "louis.duchemin@univ-lyon1.fr",
			"name": "Louis Duchemin"
		},
		"description": "DarCo API",
		"title": "DarCo API",
		"version": "1.0"
	},
	"openapi": "3.1.0",
	"paths": {
		"/abiotic": {
			"get": {
				"operationId": "ListAbioticParameters",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/AbioticParameter"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List abiotic parameters",
				"tags": [
					"Sampling"
				]
			},
			"post": {
				"operationId": "CreateAbioticParameter",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AbioticParameterInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AbioticParameter"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create abiotic parameter",
				"tags": [
					"Sampling"
				]
			}
		},
		"/access-points": {
			"get": {
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "List access points",
				"tags": [
					"Sampling"
				]
			}
		},
		"/account": {
			"get": {
				"description": "Get infos of currently authenticated user account",
				"operationId": "CurrentUser",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentUserResponse"
								}
							}
						},
						"description": "The currently authenticated user"
					},
					"204": {
						"description": "No active user session"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Current user",
				"tags": [
					"Account"
				]
			}
		},
		"/account/email-confirmation": {
			"get": {
				"description": "Confirms the validity of an e-mail address associated to an account, using a token issued at the end of user registration.",
				"operationId": "ConfirmEmail",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "token",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content",
						"headers": {
							"Message": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Confirm e-mail",
				"tags": [
					"Account"
				]
			}
		},
		"/account/email-confirmation/resend": {
			"post": {
				"description": "Sends again a verification link for the provided e-mail address, if it matches a currently not verified user account.",
				"operationId": "ResendEmailVerification",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResendEmailVerificationInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Resend e-mail verification link",
				"tags": [
					"Account"
				]
			}
		},
		"/account/forgotten-password": {
			"post": {
				"description": "Requests sending a link containing a password reset token to your account email address. The link target can be provided by the client in the request body, or defaults to the API endpoint: `/api/v1/account/password-reset`. In this case, setting the new password is expected to be done programatically, e.g. through a curl request.",
				"operationId": "RequestPasswordReset",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PasswordResetRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Request password reset",
				"tags": [
					"Account"
				]
			}
		},
		"/account/login": {
			"post": {
				"description": "Authenticate using user credentials",
				"operationId": "Login",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserCredentials"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Set-Cookie": {
								"schema": {
									"description": "Session cookie storing JWT",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Login",
				"tags": [
					"Account"
				]
			}
		},
		"/account/logout": {
			"post": {
				"description": "Logout from current user session by revoking session cookies",
				"operationId": "Logout",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogoutInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content",
						"headers": {
							"Domain": {
								"schema": {
									"type": "string"
								}
							},
							"Expires": {
								"schema": {
									"type": "string"
								}
							},
							"HttpOnly": {
								"schema": {
									"type": "boolean"
								}
							},
							"MaxAge": {
								"schema": {
									"format": "int64",
									"type": "integer"
								}
							},
							"Name": {
								"schema": {
									"type": "string"
								}
							},
							"Partitioned": {
								"schema": {
									"type": "boolean"
								}
							},
							"Path": {
								"schema": {
									"type": "string"
								}
							},
							"Quoted": {
								"schema": {
									"type": "boolean"
								}
							},
							"Raw": {
								"schema": {
									"type": "string"
								}
							},
							"RawExpires": {
								"schema": {
									"type": "string"
								}
							},
							"SameSite": {
								"schema": {
									"format": "int64",
									"type": "integer"
								}
							},
							"Secure": {
								"schema": {
									"type": "boolean"
								}
							},
							"Set-Cookie": {
								"schema": {
									"type": "string"
								}
							},
							"Unparsed": {
								"schema": {
									"type": "string"
								}
							},
							"Value": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Logout",
				"tags": [
					"Account"
				]
			}
		},
		"/account/password": {
			"post": {
				"description": "Updates password of currently authenticated user",
				"operationId": "UpdatePassword",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatePasswordInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update password",
				"tags": [
					"Account"
				]
			}
		},
		"/account/password-reset": {
			"get": {
				"description": "Verifies that the password token is valid and can be used to reset a password",
				"operationId": "ValidatePasswordToken",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Validate password token",
				"tags": [
					"Account"
				]
			},
			"post": {
				"description": "Set a new password using a previously issued reset token",
				"operationId": "ResetPassword",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PasswordInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Reset password",
				"tags": [
					"Account"
				]
			}
		},
		"/account/pending": {
			"get": {
				"description": "Lists all account requests pending validation from an administrator",
				"operationId": "ListPendingUserRequests",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/PendingUserRequest"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List pending user requests",
				"tags": [
					"Account"
				]
			}
		},
		"/account/pending/{email}": {
			"delete": {
				"description": "Delete account request pending validation using the associated email",
				"operationId": "DeletePendingUserRequest",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PendingUserRequest"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete pending user request",
				"tags": [
					"Account"
				]
			},
			"get": {
				"description": "Get account request pending validation using the associated email",
				"operationId": "GetPendingUserRequest",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PendingUserRequest"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get pending user request",
				"tags": [
					"Account"
				]
			}
		},
		"/account/refresh": {
			"post": {
				"description": "Refresh session using refresh token",
				"operationId": "RefreshSession",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RefreshTokenBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Set-Cookie": {
								"schema": {
									"description": "Session cookie storing JWT",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Refresh auth token",
				"tags": [
					"Account"
				]
			}
		},
		"/account/register": {
			"post": {
				"description": "Register a new account that is initially pending, and needs to be activated by an administrator. An email is sent to the registered e-mail address with a verification link. The target URL can be set by the client, otherwise it defaults to the API endpoint: `/api/v1/account/email-confirmation`",
				"operationId": "Register",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegisterInputBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						},
						"description": "Created"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Register new account",
				"tags": [
					"Account"
				]
			}
		},
		"/account/register/{token}": {
			"post": {
				"description": "Register an account with pre-assigned role and identity, using an invitation token",
				"operationId": "ClaimInvitation",
				"parameters": [
					{
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Set-Cookie": {
								"schema": {
									"description": "Session cookie storing JWT",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Claim invitation",
				"tags": [
					"Account"
				]
			}
		},
		"/anchors/": {
			"get": {
				"operationId": "ListAnchors",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TaxonWithParentRef"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List GBIF anchor clades",
				"tags": [
					"Taxonomy GBIF"
				]
			}
		},
		"/datasets": {
			"get": {
				"description": "List all site datasets",
				"operationId": "ListDatasets",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Dataset"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List site datasets",
				"tags": [
					"Datasets"
				]
			},
			"post": {
				"description": "Create a new site dataset with new or existing sites",
				"operationId": "CreateDataset",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DatasetInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Dataset"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create site dataset",
				"tags": [
					"Datasets"
				]
			}
		},
		"/datasets/{slug}": {
			"patch": {
				"description": "Update properties of a site dataset",
				"operationId": "UpdateDataset",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DatasetUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Dataset"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update site dataset",
				"tags": [
					"Datasets"
				]
			},
			"post": {
				"description": "Get infos for a site dataset",
				"operationId": "GetDataset",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Dataset"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get site dataset",
				"tags": [
					"Datasets"
				]
			}
		},
		"/events/{id}": {
			"patch": {
				"operationId": "UpdateEvent",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EventUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Event"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update event",
				"tags": [
					"Events"
				]
			}
		},
		"/events/{id}/spottings": {
			"put": {
				"operationId": "UpdateSpotting",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SpottingUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Spotting"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update spotting",
				"tags": [
					"Events"
				]
			}
		},
		"/fixatives": {
			"get": {
				"operationId": "ListFixatives",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Fixative"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List fixatives",
				"tags": [
					"Sampling"
				]
			},
			"post": {
				"operationId": "CreateFixative",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FixativeInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Fixative"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create fixative",
				"tags": [
					"Sampling"
				]
			}
		},
		"/genes": {
			"get": {
				"operationId": "ListGenes",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Gene"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List genes",
				"tags": [
					"Sequences"
				]
			},
			"post": {
				"operationId": "CreateGene",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GeneInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Gene"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create gene",
				"tags": [
					"Sequences"
				]
			}
		},
		"/habitats": {
			"get": {
				"operationId": "ListHabitatGroups",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/HabitatGroup"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List habitats",
				"tags": [
					"Habitats"
				]
			},
			"post": {
				"operationId": "CreateHabitatGroup",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HabitatGroupInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HabitatGroup"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create habitat group",
				"tags": [
					"Habitats"
				]
			}
		},
		"/habitats/{code}": {
			"delete": {
				"operationId": "DeleteHabitatGroup",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HabitatGroup"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete habitat group",
				"tags": [
					"Habitats"
				]
			},
			"patch": {
				"operationId": "UpdateHabitatGroup",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HabitatGroupUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HabitatGroup"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update habitat group",
				"tags": [
					"Habitats"
				]
			}
		},
		"/import/taxonomy": {
			"put": {
				"operationId": "ImportGBIF",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImportRequestGBIF"
							}
						}
					},
					"required": true
				},
				"responses": {
					"204": {
						"description": "No Content"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "Import GBIF clade",
				"tags": [
					"Taxonomy GBIF"
				]
			}
		},
		"/import/taxonomy/monitor": {
			"get": {
				"operationId": "MonitorGBIF",
				"responses": {
					"200": {
						"content": {
							"text/event-stream": {
								"schema": {
									"description": "Each oneOf object in the array represents one possible Server Sent Events (SSE) message, serialized as UTF-8 text according to the SSE specification.",
									"items": {
										"oneOf": [
											{
												"properties": {
													"data": {
														"additionalProperties": {
															"$ref": "#/components/schemas/ImportProcess"
														},
														"type": "object"
													},
													"event": {
														"const": "state",
														"description": "The event name.",
														"type": "string"
													},
													"id": {
														"description": "The event ID.",
														"type": "integer"
													},
													"retry": {
														"description": "The retry time in milliseconds.",
														"type": "integer"
													}
												},
												"required": [
													"data",
													"event"
												],
												"title": "Event state",
												"type": "object"
											}
										]
									},
									"title": "Server Sent Events",
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"default": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Error"
					}
				},
				"summary": "Monitor GBIF taxonomy imports",
				"tags": [
					"Taxonomy GBIF"
				]
			}
		},
		"/institutions": {
			"get": {
				"operationId": "ListInstitutions",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Institution"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List institutions",
				"tags": [
					"People",
					"Institution"
				]
			},
			"post": {
				"operationId": "CreateInstitution",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InstitutionInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Institution"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create institution",
				"tags": [
					"People",
					"Institution"
				]
			}
		},
		"/institutions/{code}": {
			"delete": {
				"operationId": "DeleteInstitution",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Institution"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete institution",
				"tags": [
					"People",
					"Institution"
				]
			},
			"patch": {
				"operationId": "UpdateInstitution",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InstitutionUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Institution"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update institution",
				"tags": [
					"People",
					"Institution"
				]
			}
		},
		"/locations/countries": {
			"get": {
				"operationId": "ListCountries",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Country"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List countries",
				"tags": [
					"Location",
					"Countries"
				]
			}
		},
		"/persons": {
			"get": {
				"operationId": "ListPersons",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Person"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List persons",
				"tags": [
					"People",
					"Person"
				]
			},
			"post": {
				"operationId": "CreatePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create person",
				"tags": [
					"People",
					"Person"
				]
			}
		},
		"/persons/{id}": {
			"delete": {
				"operationId": "DeletePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete person",
				"tags": [
					"People",
					"Person"
				]
			},
			"patch": {
				"operationId": "UpdatePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update person",
				"tags": [
					"People",
					"Person"
				]
			}
		},
		"/persons/{id}/invite": {
			"post": {
				"description": "Sends an invitation link to a person at the address provided in `dest`, allowing them to register an account assigned with a specified `role`.",
				"operationId": "InvitePerson",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InvitationInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvitationLink"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Invite person",
				"tags": [
					"People",
					"Person"
				]
			}
		},
		"/programs": {
			"get": {
				"operationId": "ListPrograms",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Program"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List programs",
				"tags": [
					"Events"
				]
			},
			"post": {
				"operationId": "CreateProgram",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProgramInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Program"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create program",
				"tags": [
					"Events"
				]
			}
		},
		"/programs/{code}": {
			"delete": {
				"operationId": "DeleteProgram",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Program"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete program",
				"tags": [
					"Events"
				]
			},
			"patch": {
				"operationId": "UpdateProgram",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProgramUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Program"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update program",
				"tags": [
					"Events"
				]
			}
		},
		"/sampling-methods": {
			"get": {
				"operationId": "ListSamplingMethods",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SamplingMethod"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List sampling methods",
				"tags": [
					"Sampling"
				]
			},
			"post": {
				"operationId": "CreateSamplingMethod",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SamplingMethodInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SamplingMethod"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create sampling method",
				"tags": [
					"Sampling"
				]
			}
		},
		"/samplings": {
			"post": {
				"operationId": "CreateSampling",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SamplingInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sampling"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create sampling action",
				"tags": [
					"Sampling"
				]
			}
		},
		"/samplings/{id}": {
			"delete": {
				"operationId": "DeleteSampling",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sampling"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Deletesampling action",
				"tags": [
					"Sampling"
				]
			},
			"patch": {
				"operationId": "UpdateSampling",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "uuid",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SamplingUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sampling"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update sampling action",
				"tags": [
					"Sampling"
				]
			}
		},
		"/settings/emailing": {
			"get": {
				"operationId": "EmailSettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EmailSettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Email settings",
				"tags": [
					"Settings"
				]
			},
			"post": {
				"operationId": "UpdateEmailSettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EmailSettingsInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EmailSettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update email settings",
				"tags": [
					"Settings"
				]
			}
		},
		"/settings/emailing/test-dial": {
			"post": {
				"operationId": "TestSMTP",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EmailSettingsInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Test SMTP connection",
				"tags": [
					"Settings"
				]
			}
		},
		"/settings/icon": {
			"post": {
				"operationId": "SetAppIcon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"encoding": {
								"icon": {
									"contentType": "image/png,image/jpeg"
								}
							},
							"schema": {
								"properties": {
									"icon": {
										"contentEncoding": "binary",
										"contentMediaType": "application/octet-stream",
										"format": "binary",
										"type": "string"
									}
								},
								"required": [
									"icon"
								],
								"type": "object"
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "No Content",
						"headers": {
							"Location": {
								"schema": {
									"format": "uri",
									"type": "string"
								}
							}
						}
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Set app icon",
				"tags": [
					"Settings"
				]
			}
		},
		"/settings/instance": {
			"get": {
				"operationId": "InstanceSettings",
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InstanceSettings"
								}
							}
						},
						"description": "OK"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Instance settings",
				"tags": [
					"Settings"
				]
			},
			"post": {
				"operationId": "UpdateInstanceSettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InstanceSettingsInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InstanceSettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update instance settings",
				"tags": [
					"Settings"
				]
			}
		},
		"/settings/security": {
			"get": {
				"operationId": "SecuritySettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecuritySettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Security settings",
				"tags": [
					"Settings"
				]
			},
			"post": {
				"operationId": "UpdateSecuritySettings",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SecuritySettingsInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecuritySettings"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update security settings",
				"tags": [
					"Settings"
				]
			}
		},
		"/sites": {
			"get": {
				"description": "List all registered sites",
				"operationId": "ListSites",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Site"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List sites",
				"tags": [
					"Location"
				]
			}
		},
		"/sites/{code}": {
			"get": {
				"description": "Get site infos using its code",
				"operationId": "GetSite",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Site"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get site",
				"tags": [
					"Location"
				]
			},
			"patch": {
				"description": "Update site infos using its code",
				"operationId": "UpdateSite",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SiteUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Site"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update site",
				"tags": [
					"Location"
				]
			}
		},
		"/taxonomy": {
			"get": {
				"operationId": "GetTaxonomy",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"description": "Taxon code or UUID",
						"explode": false,
						"in": "query",
						"name": "identifier",
						"schema": {
							"description": "Taxon code or UUID",
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "max-depth",
						"schema": {
							"$ref": "#/components/schemas/TaxonRank"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Taxonomy"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get taxonomy",
				"tags": [
					"Taxonomy"
				]
			}
		},
		"/taxonomy/taxa": {
			"get": {
				"operationId": "ListTaxa",
				"parameters": [
					{
						"explode": false,
						"in": "query",
						"name": "pattern",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "rank",
						"schema": {
							"$ref": "#/components/schemas/TaxonRank"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "status",
						"schema": {
							"$ref": "#/components/schemas/TaxonStatus"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "anchor",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "parent",
						"schema": {
							"type": "string"
						}
					},
					{
						"explode": false,
						"in": "query",
						"name": "limit",
						"schema": {
							"format": "int64",
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TaxonWithParentRef"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "List taxa",
				"tags": [
					"Taxonomy"
				]
			},
			"post": {
				"operationId": "CreateTaxon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TaxonInput"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaxonWithRelatives"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Create taxon",
				"tags": [
					"Taxonomy"
				]
			}
		},
		"/taxonomy/taxa/{code}": {
			"delete": {
				"operationId": "DeleteTaxon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaxonWithRelatives"
								}
							}
						},
						"description": "OK"
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"404": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Not Found"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Delete taxon",
				"tags": [
					"Taxonomy"
				]
			},
			"get": {
				"operationId": "GetTaxon",
				"parameters": [
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaxonWithLineage"
								}
							}
						},
						"description": "OK"
					},
					"404": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Not Found"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Get taxon",
				"tags": [
					"Taxonomy"
				]
			},
			"patch": {
				"operationId": "UpdateTaxon",
				"parameters": [
					{
						"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
						"example": "Bearer \u003cJWT string\u003e",
						"in": "header",
						"name": "Authorization",
						"schema": {
							"description": "Authorization header formatted as \"Bearer auth_token\". Takes precedence over session cookie if set.",
							"examples": [
								"Bearer \u003cJWT string\u003e"
							],
							"type": "string"
						}
					},
					{
						"description": "Session cookie containing JWT",
						"in": "cookie",
						"name": "auth_token",
						"schema": {
							"description": "Session cookie containing JWT",
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TaxonUpdate"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Taxon"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Bad Request"
					},
					"401": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unauthorized"
					},
					"404": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Not Found"
					},
					"422": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Unprocessable Entity"
					},
					"500": {
						"content": {
							"application/problem+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorModel"
								}
							}
						},
						"description": "Internal Server Error"
					}
				},
				"summary": "Update taxon",
				"tags": [
					"Taxonomy"
				]
			}
		}
	},
	"security": [
		{
			"bearer": []
		},
		{
			"cookieAuth": []
		}
	],
	"servers": [
		{
			"url": "/api/v1"
		}
	]
}